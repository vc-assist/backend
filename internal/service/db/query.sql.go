// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package servicedb

import (
	"context"
	"database/sql"
)

const createMoodleToken = `-- name: CreateMoodleToken :exec
insert into token(token, moodle_account_id) values (?, ?)
`

type CreateMoodleTokenParams struct {
	Token           string
	MoodleAccountID sql.NullInt64
}

func (q *Queries) CreateMoodleToken(ctx context.Context, arg CreateMoodleTokenParams) error {
	_, err := q.db.ExecContext(ctx, createMoodleToken, arg.Token, arg.MoodleAccountID)
	return err
}

const createPSToken = `-- name: CreatePSToken :exec
insert into token(token, powerschool_account_id) values (?, ?)
`

type CreatePSTokenParams struct {
	Token                string
	PowerschoolAccountID sql.NullInt64
}

func (q *Queries) CreatePSToken(ctx context.Context, arg CreatePSTokenParams) error {
	_, err := q.db.ExecContext(ctx, createPSToken, arg.Token, arg.PowerschoolAccountID)
	return err
}

const getMoodleAccountFromToken = `-- name: GetMoodleAccountFromToken :one
select
    moodle_account.id,
    moodle_account.username
from token
inner join moodle_account
    on token.moodle_account_id = moodle_account.id
where token.token = ?
`

func (q *Queries) GetMoodleAccountFromToken(ctx context.Context, token string) (MoodleAccount, error) {
	row := q.db.QueryRowContext(ctx, getMoodleAccountFromToken, token)
	var i MoodleAccount
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getPSAccountFromToken = `-- name: GetPSAccountFromToken :one
select 
    powerschool_account.id,
    powerschool_account.email
from token
inner join powerschool_account
    on token.powerschool_account_id = powerschool_account.id
where token.token = ?
`

func (q *Queries) GetPSAccountFromToken(ctx context.Context, token string) (PowerschoolAccount, error) {
	row := q.db.QueryRowContext(ctx, getPSAccountFromToken, token)
	var i PowerschoolAccount
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const setMoodleAccount = `-- name: SetMoodleAccount :one
insert into moodle_account(username) values (?)
on conflict do update set username = excluded.username
returning id
`

// technically this is a useless update, but on "conflict do nothing" will not
// return anything when a conflict is encountered so on "conflict do update" is
// needed to have the updated/inserted row's id returned
func (q *Queries) SetMoodleAccount(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, setMoodleAccount, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const setPSAccount = `-- name: SetPSAccount :one
insert into powerschool_account(email) values (?)
on conflict do update set email = excluded.email
returning id
`

func (q *Queries) SetPSAccount(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, setPSAccount, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}
