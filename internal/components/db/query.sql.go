// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const addMoodleAccount = `-- name: AddMoodleAccount :one


insert into moodle_account(username, password) values (?, ?)
on conflict do update set
    password = excluded.password
returning id
`

type AddMoodleAccountParams struct {
	Username string
	Password string
}

// naming conventions:
// - "Add" implies an insert with some "on conflict" handling.
// - "Create" implies an insert with no "on conflict" handling.
// - "Get" implies a select.
// - "Delete" implies a delete.
// *** ACCOUNTS ***
func (q *Queries) AddMoodleAccount(ctx context.Context, arg AddMoodleAccountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addMoodleAccount, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addMoodleChapter = `-- name: AddMoodleChapter :exec
insert into moodle_chapter(course_id, section_idx, resource_idx, id, name, content_html) values (?, ?, ?, ?, ?, ?)
on conflict (id) do update
    set course_id = excluded.course_id,
        section_idx = excluded.section_idx,
        resource_idx = excluded.resource_idx,
        name = excluded.name,
        content_html = excluded.content_html
`

type AddMoodleChapterParams struct {
	CourseID    int64
	SectionIdx  int64
	ResourceIdx int64
	ID          int64
	Name        string
	ContentHtml string
}

func (q *Queries) AddMoodleChapter(ctx context.Context, arg AddMoodleChapterParams) error {
	_, err := q.db.ExecContext(ctx, addMoodleChapter,
		arg.CourseID,
		arg.SectionIdx,
		arg.ResourceIdx,
		arg.ID,
		arg.Name,
		arg.ContentHtml,
	)
	return err
}

const addMoodleCourse = `-- name: AddMoodleCourse :exec
insert into moodle_course(id, name) values (?, ?)
on conflict (id) do update
    set name = excluded.name
`

type AddMoodleCourseParams struct {
	ID   int64
	Name string
}

func (q *Queries) AddMoodleCourse(ctx context.Context, arg AddMoodleCourseParams) error {
	_, err := q.db.ExecContext(ctx, addMoodleCourse, arg.ID, arg.Name)
	return err
}

const addMoodleResource = `-- name: AddMoodleResource :exec
insert into moodle_resource(course_id, section_idx, idx, id, type, url, display_content) values (?, ?, ?, ?, ?, ?, ?)
on conflict (course_id, section_idx, idx) do update
    set type = excluded.type,
        url = excluded.url,
        display_content = excluded.display_content
`

type AddMoodleResourceParams struct {
	CourseID       int64
	SectionIdx     int64
	Idx            int64
	ID             sql.NullInt64
	Type           int64
	Url            string
	DisplayContent string
}

func (q *Queries) AddMoodleResource(ctx context.Context, arg AddMoodleResourceParams) error {
	_, err := q.db.ExecContext(ctx, addMoodleResource,
		arg.CourseID,
		arg.SectionIdx,
		arg.Idx,
		arg.ID,
		arg.Type,
		arg.Url,
		arg.DisplayContent,
	)
	return err
}

const addMoodleSection = `-- name: AddMoodleSection :exec
insert into moodle_section(course_id, idx, name) values (?, ?, ?)
on conflict (course_id, idx) do update
    set name = excluded.name
`

type AddMoodleSectionParams struct {
	CourseID int64
	Idx      int64
	Name     string
}

func (q *Queries) AddMoodleSection(ctx context.Context, arg AddMoodleSectionParams) error {
	_, err := q.db.ExecContext(ctx, addMoodleSection, arg.CourseID, arg.Idx, arg.Name)
	return err
}

const addMoodleUserCourse = `-- name: AddMoodleUserCourse :exec
insert into moodle_user_course(account_id, course_id) values (?, ?)
on conflict do nothing
`

type AddMoodleUserCourseParams struct {
	AccountID int64
	CourseID  int64
}

func (q *Queries) AddMoodleUserCourse(ctx context.Context, arg AddMoodleUserCourseParams) error {
	_, err := q.db.ExecContext(ctx, addMoodleUserCourse, arg.AccountID, arg.CourseID)
	return err
}

const addPSAccount = `-- name: AddPSAccount :one
insert into powerschool_account(email, access_token, refresh_token, expires_at) values (?, ?, ?, ?)
on conflict do update set
    access_token = excluded.access_token,
    refresh_token = excluded.refresh_token,
    expires_at = excluded.expires_at
returning id
`

type AddPSAccountParams struct {
	Email        string
	AccessToken  string
	RefreshToken string
	ExpiresAt    time.Time
}

func (q *Queries) AddPSAccount(ctx context.Context, arg AddPSAccountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addPSAccount,
		arg.Email,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addPSCachedData = `-- name: AddPSCachedData :exec

insert into powerschool_data_cache(account_id, data) values (?, ?)
on conflict do update set
    data = excluded.data
`

type AddPSCachedDataParams struct {
	AccountID int64
	Data      []byte
}

// *** POWERSCHOOL SPECIFIC ***
func (q *Queries) AddPSCachedData(ctx context.Context, arg AddPSCachedDataParams) error {
	_, err := q.db.ExecContext(ctx, addPSCachedData, arg.AccountID, arg.Data)
	return err
}

const addSnapshotSeries = `-- name: AddSnapshotSeries :one

insert into gradesnapshot_series(powerschool_account_id, course_id, start_time) values (?, ?, ?)
on conflict do nothing
returning id
`

type AddSnapshotSeriesParams struct {
	PowerschoolAccountID int64
	CourseID             string
	StartTime            time.Time
}

// *** SNAPSHOT SPECIFIC ***
func (q *Queries) AddSnapshotSeries(ctx context.Context, arg AddSnapshotSeriesParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addSnapshotSeries, arg.PowerschoolAccountID, arg.CourseID, arg.StartTime)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const addWeightCategory = `-- name: AddWeightCategory :exec
insert into weight_category(weight_course_id, category_name, weight) values (?, ?, ?)
`

type AddWeightCategoryParams struct {
	WeightCourseID int64
	CategoryName   string
	Weight         float64
}

func (q *Queries) AddWeightCategory(ctx context.Context, arg AddWeightCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addWeightCategory, arg.WeightCourseID, arg.CategoryName, arg.Weight)
	return err
}

const addWeightCourse = `-- name: AddWeightCourse :one

insert into weight_course(actual_course_id, actual_course_name) values (?, ?)
on conflict do update
    set actual_course_name = excluded.actual_course_name
returning id
`

type AddWeightCourseParams struct {
	ActualCourseID   string
	ActualCourseName string
}

// *** WEIGHTS SPECIFIC ***
func (q *Queries) AddWeightCourse(ctx context.Context, arg AddWeightCourseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addWeightCourse, arg.ActualCourseID, arg.ActualCourseName)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMoodleToken = `-- name: CreateMoodleToken :exec
insert into token(token, moodle_account_id) values (?, ?)
`

type CreateMoodleTokenParams struct {
	Token           string
	MoodleAccountID sql.NullInt64
}

func (q *Queries) CreateMoodleToken(ctx context.Context, arg CreateMoodleTokenParams) error {
	_, err := q.db.ExecContext(ctx, createMoodleToken, arg.Token, arg.MoodleAccountID)
	return err
}

const createPSToken = `-- name: CreatePSToken :exec
insert into token(token, powerschool_account_id) values (?, ?)
`

type CreatePSTokenParams struct {
	Token                string
	PowerschoolAccountID sql.NullInt64
}

func (q *Queries) CreatePSToken(ctx context.Context, arg CreatePSTokenParams) error {
	_, err := q.db.ExecContext(ctx, createPSToken, arg.Token, arg.PowerschoolAccountID)
	return err
}

const createSnapshot = `-- name: CreateSnapshot :exec
insert into gradesnapshot(series_id, value) values (?, ?)
`

type CreateSnapshotParams struct {
	SeriesID int64
	Value    float64
}

func (q *Queries) CreateSnapshot(ctx context.Context, arg CreateSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, createSnapshot, arg.SeriesID, arg.Value)
	return err
}

const deleteAllMoodleChapters = `-- name: DeleteAllMoodleChapters :exec
delete from moodle_chapter
`

func (q *Queries) DeleteAllMoodleChapters(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMoodleChapters)
	return err
}

const deleteAllMoodleCourses = `-- name: DeleteAllMoodleCourses :exec

delete from moodle_course
`

// *** MOODLE SPECIFIC ***
func (q *Queries) DeleteAllMoodleCourses(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMoodleCourses)
	return err
}

const deleteAllMoodleResources = `-- name: DeleteAllMoodleResources :exec
delete from moodle_resource
`

func (q *Queries) DeleteAllMoodleResources(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMoodleResources)
	return err
}

const deleteAllMoodleSections = `-- name: DeleteAllMoodleSections :exec
delete from moodle_section
`

func (q *Queries) DeleteAllMoodleSections(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllMoodleSections)
	return err
}

const getAllMoodleAccounts = `-- name: GetAllMoodleAccounts :many
select id, username, password from moodle_account
`

func (q *Queries) GetAllMoodleAccounts(ctx context.Context) ([]MoodleAccount, error) {
	rows, err := q.db.QueryContext(ctx, getAllMoodleAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoodleAccount
	for rows.Next() {
		var i MoodleAccount
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMoodleCourses = `-- name: GetAllMoodleCourses :many
select id, name from moodle_course
`

func (q *Queries) GetAllMoodleCourses(ctx context.Context) ([]MoodleCourse, error) {
	rows, err := q.db.QueryContext(ctx, getAllMoodleCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoodleCourse
	for rows.Next() {
		var i MoodleCourse
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPSAccounts = `-- name: GetAllPSAccounts :many
select id, email, access_token, refresh_token, expires_at from powerschool_account
`

func (q *Queries) GetAllPSAccounts(ctx context.Context) ([]PowerschoolAccount, error) {
	rows, err := q.db.QueryContext(ctx, getAllPSAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PowerschoolAccount
	for rows.Next() {
		var i PowerschoolAccount
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.AccessToken,
			&i.RefreshToken,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoodleAccountFromId = `-- name: GetMoodleAccountFromId :one
select id, username, password from moodle_account where id = ?
`

func (q *Queries) GetMoodleAccountFromId(ctx context.Context, id int64) (MoodleAccount, error) {
	row := q.db.QueryRowContext(ctx, getMoodleAccountFromId, id)
	var i MoodleAccount
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getMoodleAccountFromToken = `-- name: GetMoodleAccountFromToken :one
select
    moodle_account.id,
    moodle_account.username
from token
inner join moodle_account
    on token.moodle_account_id = moodle_account.id
where token.token = ?
`

type GetMoodleAccountFromTokenRow struct {
	ID       int64
	Username string
}

func (q *Queries) GetMoodleAccountFromToken(ctx context.Context, token string) (GetMoodleAccountFromTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getMoodleAccountFromToken, token)
	var i GetMoodleAccountFromTokenRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getMoodleChapterContent = `-- name: GetMoodleChapterContent :one
select content_html from moodle_chapter where id = ?
`

func (q *Queries) GetMoodleChapterContent(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getMoodleChapterContent, id)
	var content_html string
	err := row.Scan(&content_html)
	return content_html, err
}

const getMoodleCourseSections = `-- name: GetMoodleCourseSections :many
select course_id, idx, name from moodle_section where course_id = ?
`

func (q *Queries) GetMoodleCourseSections(ctx context.Context, courseID int64) ([]MoodleSection, error) {
	rows, err := q.db.QueryContext(ctx, getMoodleCourseSections, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoodleSection
	for rows.Next() {
		var i MoodleSection
		if err := rows.Scan(&i.CourseID, &i.Idx, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoodleCourses = `-- name: GetMoodleCourses :many
select id, name from moodle_course where id in (/*SLICE:ids*/?)
`

func (q *Queries) GetMoodleCourses(ctx context.Context, ids []int64) ([]MoodleCourse, error) {
	query := getMoodleCourses
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoodleCourse
	for rows.Next() {
		var i MoodleCourse
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoodleFileResource = `-- name: GetMoodleFileResource :one
select url from moodle_resource where id = ? and type = 1
`

func (q *Queries) GetMoodleFileResource(ctx context.Context, id sql.NullInt64) (string, error) {
	row := q.db.QueryRowContext(ctx, getMoodleFileResource, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getMoodleResourceChapters = `-- name: GetMoodleResourceChapters :many
select name, id from moodle_chapter where
    course_id = ? and
    section_idx = ? and
    resource_idx = ?
`

type GetMoodleResourceChaptersParams struct {
	CourseID    int64
	SectionIdx  int64
	ResourceIdx int64
}

type GetMoodleResourceChaptersRow struct {
	Name string
	ID   int64
}

func (q *Queries) GetMoodleResourceChapters(ctx context.Context, arg GetMoodleResourceChaptersParams) ([]GetMoodleResourceChaptersRow, error) {
	rows, err := q.db.QueryContext(ctx, getMoodleResourceChapters, arg.CourseID, arg.SectionIdx, arg.ResourceIdx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMoodleResourceChaptersRow
	for rows.Next() {
		var i GetMoodleResourceChaptersRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoodleSectionResources = `-- name: GetMoodleSectionResources :many
select course_id, section_idx, idx, id, type, url, display_content from moodle_resource where course_id = ? and section_idx = ?
`

type GetMoodleSectionResourcesParams struct {
	CourseID   int64
	SectionIdx int64
}

func (q *Queries) GetMoodleSectionResources(ctx context.Context, arg GetMoodleSectionResourcesParams) ([]MoodleResource, error) {
	rows, err := q.db.QueryContext(ctx, getMoodleSectionResources, arg.CourseID, arg.SectionIdx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MoodleResource
	for rows.Next() {
		var i MoodleResource
		if err := rows.Scan(
			&i.CourseID,
			&i.SectionIdx,
			&i.Idx,
			&i.ID,
			&i.Type,
			&i.Url,
			&i.DisplayContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoodleUserCount = `-- name: GetMoodleUserCount :one
select count(*) from moodle_account
`

func (q *Queries) GetMoodleUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMoodleUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMoodleUserCourses = `-- name: GetMoodleUserCourses :many
select moodle_user_course.course_id from moodle_user_course where moodle_user_course.account_id = ?
`

func (q *Queries) GetMoodleUserCourses(ctx context.Context, accountID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getMoodleUserCourses, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var course_id int64
		if err := rows.Scan(&course_id); err != nil {
			return nil, err
		}
		items = append(items, course_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostRecentSnapshotSeries = `-- name: GetMostRecentSnapshotSeries :one
select id, course_id, start_time from gradesnapshot_series
where powerschool_account_id = ? and course_id = ?
order by start_time asc
limit 1
`

type GetMostRecentSnapshotSeriesParams struct {
	PowerschoolAccountID int64
	CourseID             string
}

type GetMostRecentSnapshotSeriesRow struct {
	ID        int64
	CourseID  string
	StartTime time.Time
}

func (q *Queries) GetMostRecentSnapshotSeries(ctx context.Context, arg GetMostRecentSnapshotSeriesParams) (GetMostRecentSnapshotSeriesRow, error) {
	row := q.db.QueryRowContext(ctx, getMostRecentSnapshotSeries, arg.PowerschoolAccountID, arg.CourseID)
	var i GetMostRecentSnapshotSeriesRow
	err := row.Scan(&i.ID, &i.CourseID, &i.StartTime)
	return i, err
}

const getPSAccountFromId = `-- name: GetPSAccountFromId :one
select id, email, access_token, refresh_token, expires_at from powerschool_account where id = ?
`

func (q *Queries) GetPSAccountFromId(ctx context.Context, id int64) (PowerschoolAccount, error) {
	row := q.db.QueryRowContext(ctx, getPSAccountFromId, id)
	var i PowerschoolAccount
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
	)
	return i, err
}

const getPSAccountFromToken = `-- name: GetPSAccountFromToken :one
select 
    powerschool_account.id,
    powerschool_account.email
from token
inner join powerschool_account
    on token.powerschool_account_id = powerschool_account.id
where token.token = ?
`

type GetPSAccountFromTokenRow struct {
	ID    int64
	Email string
}

func (q *Queries) GetPSAccountFromToken(ctx context.Context, token string) (GetPSAccountFromTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getPSAccountFromToken, token)
	var i GetPSAccountFromTokenRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getPSCachedData = `-- name: GetPSCachedData :one
select data from powerschool_data_cache where account_id = ?
`

func (q *Queries) GetPSCachedData(ctx context.Context, accountID int64) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getPSCachedData, accountID)
	var data []byte
	err := row.Scan(&data)
	return data, err
}

const getPSUserCount = `-- name: GetPSUserCount :one
select count(*) from powerschool_account
`

func (q *Queries) GetPSUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPSUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSnapshotSeries = `-- name: GetSnapshotSeries :many
select id, course_id, start_time from gradesnapshot_series
where powerschool_account_id = ? and course_id = ?
order by start_time asc
`

type GetSnapshotSeriesParams struct {
	PowerschoolAccountID int64
	CourseID             string
}

type GetSnapshotSeriesRow struct {
	ID        int64
	CourseID  string
	StartTime time.Time
}

func (q *Queries) GetSnapshotSeries(ctx context.Context, arg GetSnapshotSeriesParams) ([]GetSnapshotSeriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getSnapshotSeries, arg.PowerschoolAccountID, arg.CourseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSnapshotSeriesRow
	for rows.Next() {
		var i GetSnapshotSeriesRow
		if err := rows.Scan(&i.ID, &i.CourseID, &i.StartTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSnapshotSeriesCount = `-- name: GetSnapshotSeriesCount :one
select count(gradesnapshot.value) from gradesnapshot_series
inner join gradesnapshot on gradesnapshot_series.id = gradesnapshot.series_id
where gradesnapshot_series.id = ?
`

func (q *Queries) GetSnapshotSeriesCount(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSnapshotSeriesCount, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSnapshotSeriesSnapshots = `-- name: GetSnapshotSeriesSnapshots :many
select value from gradesnapshot
where series_id = ?
order by rowid asc
`

func (q *Queries) GetSnapshotSeriesSnapshots(ctx context.Context, seriesID int64) ([]float64, error) {
	rows, err := q.db.QueryContext(ctx, getSnapshotSeriesSnapshots, seriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []float64
	for rows.Next() {
		var value float64
		if err := rows.Scan(&value); err != nil {
			return nil, err
		}
		items = append(items, value)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeightCourseCategories = `-- name: GetWeightCourseCategories :many
select category_name, weight from weight_category
inner join weight_course on weight_course.id = weight_category.weight_course_id
where weight_course.actual_course_id = ?
`

type GetWeightCourseCategoriesRow struct {
	CategoryName string
	Weight       float64
}

func (q *Queries) GetWeightCourseCategories(ctx context.Context, actualCourseID string) ([]GetWeightCourseCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeightCourseCategories, actualCourseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeightCourseCategoriesRow
	for rows.Next() {
		var i GetWeightCourseCategoriesRow
		if err := rows.Scan(&i.CategoryName, &i.Weight); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
