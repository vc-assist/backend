// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/powerschool/v1/api.proto (package vcassist.powerschool.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CourseData, StudentProfile } from "./types_pb.js";

/**
 * Refresh
 *
 * @generated from message vcassist.powerschool.v1.RefreshRequest
 */
export class RefreshRequest extends Message<RefreshRequest> {
  constructor(data?: PartialMessage<RefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.powerschool.v1.RefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshRequest {
    return new RefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshRequest | PlainMessage<RefreshRequest> | undefined, b: RefreshRequest | PlainMessage<RefreshRequest> | undefined): boolean {
    return proto3.util.equals(RefreshRequest, a, b);
  }
}

/**
 * @generated from message vcassist.powerschool.v1.RefreshResponse
 */
export class RefreshResponse extends Message<RefreshResponse> {
  constructor(data?: PartialMessage<RefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.powerschool.v1.RefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshResponse {
    return new RefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshResponse | PlainMessage<RefreshResponse> | undefined, b: RefreshResponse | PlainMessage<RefreshResponse> | undefined): boolean {
    return proto3.util.equals(RefreshResponse, a, b);
  }
}

/**
 * Data
 *
 * @generated from message vcassist.powerschool.v1.DataRequest
 */
export class DataRequest extends Message<DataRequest> {
  constructor(data?: PartialMessage<DataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.powerschool.v1.DataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataRequest {
    return new DataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataRequest {
    return new DataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataRequest {
    return new DataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DataRequest | PlainMessage<DataRequest> | undefined, b: DataRequest | PlainMessage<DataRequest> | undefined): boolean {
    return proto3.util.equals(DataRequest, a, b);
  }
}

/**
 * @generated from message vcassist.powerschool.v1.DataResponse
 */
export class DataResponse extends Message<DataResponse> {
  /**
   * @generated from field: vcassist.powerschool.v1.StudentProfile profile = 1;
   */
  profile?: StudentProfile;

  /**
   * currently unused
   * repeated SchoolData schools = 2;
   * repeated Bulletin bulletins = 3;
   *
   * @generated from field: repeated vcassist.powerschool.v1.CourseData courses = 4;
   */
  courses: CourseData[] = [];

  constructor(data?: PartialMessage<DataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.powerschool.v1.DataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: StudentProfile },
    { no: 4, name: "courses", kind: "message", T: CourseData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataResponse {
    return new DataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataResponse {
    return new DataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataResponse {
    return new DataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DataResponse | PlainMessage<DataResponse> | undefined, b: DataResponse | PlainMessage<DataResponse> | undefined): boolean {
    return proto3.util.equals(DataResponse, a, b);
  }
}

