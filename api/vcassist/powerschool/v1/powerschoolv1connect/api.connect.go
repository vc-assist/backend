// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/powerschool/v1/api.proto

package powerschoolv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/api/vcassist/powerschool/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PowerschoolServiceName is the fully-qualified name of the PowerschoolService service.
	PowerschoolServiceName = "vcassist.powerschool.v1.PowerschoolService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PowerschoolServiceRefreshProcedure is the fully-qualified name of the PowerschoolService's
	// Refresh RPC.
	PowerschoolServiceRefreshProcedure = "/vcassist.powerschool.v1.PowerschoolService/Refresh"
	// PowerschoolServiceDataProcedure is the fully-qualified name of the PowerschoolService's Data RPC.
	PowerschoolServiceDataProcedure = "/vcassist.powerschool.v1.PowerschoolService/Data"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	powerschoolServiceServiceDescriptor       = v1.File_vcassist_powerschool_v1_api_proto.Services().ByName("PowerschoolService")
	powerschoolServiceRefreshMethodDescriptor = powerschoolServiceServiceDescriptor.Methods().ByName("Refresh")
	powerschoolServiceDataMethodDescriptor    = powerschoolServiceServiceDescriptor.Methods().ByName("Data")
)

// PowerschoolServiceClient is a client for the vcassist.powerschool.v1.PowerschoolService service.
type PowerschoolServiceClient interface {
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	// Data has no server-side caching, it is up to the clients to cache this request.
	Data(context.Context, *connect.Request[v1.DataRequest]) (*connect.Response[v1.DataResponse], error)
}

// NewPowerschoolServiceClient constructs a client for the
// vcassist.powerschool.v1.PowerschoolService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPowerschoolServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PowerschoolServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &powerschoolServiceClient{
		refresh: connect.NewClient[v1.RefreshRequest, v1.RefreshResponse](
			httpClient,
			baseURL+PowerschoolServiceRefreshProcedure,
			connect.WithSchema(powerschoolServiceRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		data: connect.NewClient[v1.DataRequest, v1.DataResponse](
			httpClient,
			baseURL+PowerschoolServiceDataProcedure,
			connect.WithSchema(powerschoolServiceDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// powerschoolServiceClient implements PowerschoolServiceClient.
type powerschoolServiceClient struct {
	refresh *connect.Client[v1.RefreshRequest, v1.RefreshResponse]
	data    *connect.Client[v1.DataRequest, v1.DataResponse]
}

// Refresh calls vcassist.powerschool.v1.PowerschoolService.Refresh.
func (c *powerschoolServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// Data calls vcassist.powerschool.v1.PowerschoolService.Data.
func (c *powerschoolServiceClient) Data(ctx context.Context, req *connect.Request[v1.DataRequest]) (*connect.Response[v1.DataResponse], error) {
	return c.data.CallUnary(ctx, req)
}

// PowerschoolServiceHandler is an implementation of the vcassist.powerschool.v1.PowerschoolService
// service.
type PowerschoolServiceHandler interface {
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	// Data has no server-side caching, it is up to the clients to cache this request.
	Data(context.Context, *connect.Request[v1.DataRequest]) (*connect.Response[v1.DataResponse], error)
}

// NewPowerschoolServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPowerschoolServiceHandler(svc PowerschoolServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	powerschoolServiceRefreshHandler := connect.NewUnaryHandler(
		PowerschoolServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(powerschoolServiceRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	powerschoolServiceDataHandler := connect.NewUnaryHandler(
		PowerschoolServiceDataProcedure,
		svc.Data,
		connect.WithSchema(powerschoolServiceDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.powerschool.v1.PowerschoolService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PowerschoolServiceRefreshProcedure:
			powerschoolServiceRefreshHandler.ServeHTTP(w, r)
		case PowerschoolServiceDataProcedure:
			powerschoolServiceDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPowerschoolServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPowerschoolServiceHandler struct{}

func (UnimplementedPowerschoolServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.powerschool.v1.PowerschoolService.Refresh is not implemented"))
}

func (UnimplementedPowerschoolServiceHandler) Data(context.Context, *connect.Request[v1.DataRequest]) (*connect.Response[v1.DataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.powerschool.v1.PowerschoolService.Data is not implemented"))
}
