// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/moodle/v1/api.proto (package vcassist.moodle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * LessonPlans
 *
 * @generated from message vcassist.moodle.v1.LessonPlansRequest
 */
export class LessonPlansRequest extends Message<LessonPlansRequest> {
  constructor(data?: PartialMessage<LessonPlansRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.LessonPlansRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LessonPlansRequest {
    return new LessonPlansRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LessonPlansRequest {
    return new LessonPlansRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LessonPlansRequest {
    return new LessonPlansRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LessonPlansRequest | PlainMessage<LessonPlansRequest> | undefined, b: LessonPlansRequest | PlainMessage<LessonPlansRequest> | undefined): boolean {
    return proto3.util.equals(LessonPlansRequest, a, b);
  }
}

/**
 * @generated from message vcassist.moodle.v1.LessonPlansResponse
 */
export class LessonPlansResponse extends Message<LessonPlansResponse> {
  /**
   * @generated from field: repeated vcassist.moodle.v1.LessonPlansResponse.Course courses = 1;
   */
  courses: LessonPlansResponse_Course[] = [];

  constructor(data?: PartialMessage<LessonPlansResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.LessonPlansResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: LessonPlansResponse_Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LessonPlansResponse {
    return new LessonPlansResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LessonPlansResponse {
    return new LessonPlansResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LessonPlansResponse {
    return new LessonPlansResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LessonPlansResponse | PlainMessage<LessonPlansResponse> | undefined, b: LessonPlansResponse | PlainMessage<LessonPlansResponse> | undefined): boolean {
    return proto3.util.equals(LessonPlansResponse, a, b);
  }
}

/**
 * @generated from message vcassist.moodle.v1.LessonPlansResponse.Chapter
 */
export class LessonPlansResponse_Chapter extends Message<LessonPlansResponse_Chapter> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * the dates this chapter likely belongs to
   *
   * @generated from field: repeated google.protobuf.Timestamp dates = 2;
   */
  dates: Timestamp[] = [];

  /**
   * the content will be not null if the lesson plan is today's lesson plan
   *
   * @generated from field: optional string content = 3;
   */
  content?: string;

  constructor(data?: PartialMessage<LessonPlansResponse_Chapter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.LessonPlansResponse.Chapter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "dates", kind: "message", T: Timestamp, repeated: true },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LessonPlansResponse_Chapter {
    return new LessonPlansResponse_Chapter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LessonPlansResponse_Chapter {
    return new LessonPlansResponse_Chapter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LessonPlansResponse_Chapter {
    return new LessonPlansResponse_Chapter().fromJsonString(jsonString, options);
  }

  static equals(a: LessonPlansResponse_Chapter | PlainMessage<LessonPlansResponse_Chapter> | undefined, b: LessonPlansResponse_Chapter | PlainMessage<LessonPlansResponse_Chapter> | undefined): boolean {
    return proto3.util.equals(LessonPlansResponse_Chapter, a, b);
  }
}

/**
 * @generated from message vcassist.moodle.v1.LessonPlansResponse.Course
 */
export class LessonPlansResponse_Course extends Message<LessonPlansResponse_Course> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string teacher = 3;
   */
  teacher = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: repeated vcassist.moodle.v1.LessonPlansResponse.Chapter chapters = 5;
   */
  chapters: LessonPlansResponse_Chapter[] = [];

  constructor(data?: PartialMessage<LessonPlansResponse_Course>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.LessonPlansResponse.Course";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "teacher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "chapters", kind: "message", T: LessonPlansResponse_Chapter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LessonPlansResponse_Course {
    return new LessonPlansResponse_Course().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LessonPlansResponse_Course {
    return new LessonPlansResponse_Course().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LessonPlansResponse_Course {
    return new LessonPlansResponse_Course().fromJsonString(jsonString, options);
  }

  static equals(a: LessonPlansResponse_Course | PlainMessage<LessonPlansResponse_Course> | undefined, b: LessonPlansResponse_Course | PlainMessage<LessonPlansResponse_Course> | undefined): boolean {
    return proto3.util.equals(LessonPlansResponse_Course, a, b);
  }
}

/**
 * ChapterContent
 *
 * @generated from message vcassist.moodle.v1.ChapterContentRequest
 */
export class ChapterContentRequest extends Message<ChapterContentRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<ChapterContentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.ChapterContentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChapterContentRequest {
    return new ChapterContentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChapterContentRequest {
    return new ChapterContentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChapterContentRequest {
    return new ChapterContentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChapterContentRequest | PlainMessage<ChapterContentRequest> | undefined, b: ChapterContentRequest | PlainMessage<ChapterContentRequest> | undefined): boolean {
    return proto3.util.equals(ChapterContentRequest, a, b);
  }
}

/**
 * @generated from message vcassist.moodle.v1.ChapterContentResponse
 */
export class ChapterContentResponse extends Message<ChapterContentResponse> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<ChapterContentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.ChapterContentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChapterContentResponse {
    return new ChapterContentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChapterContentResponse {
    return new ChapterContentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChapterContentResponse {
    return new ChapterContentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChapterContentResponse | PlainMessage<ChapterContentResponse> | undefined, b: ChapterContentResponse | PlainMessage<ChapterContentResponse> | undefined): boolean {
    return proto3.util.equals(ChapterContentResponse, a, b);
  }
}

/**
 * Refresh
 *
 * @generated from message vcassist.moodle.v1.RefreshRequest
 */
export class RefreshRequest extends Message<RefreshRequest> {
  constructor(data?: PartialMessage<RefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.RefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshRequest {
    return new RefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshRequest {
    return new RefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshRequest | PlainMessage<RefreshRequest> | undefined, b: RefreshRequest | PlainMessage<RefreshRequest> | undefined): boolean {
    return proto3.util.equals(RefreshRequest, a, b);
  }
}

/**
 * @generated from message vcassist.moodle.v1.RefreshResponse
 */
export class RefreshResponse extends Message<RefreshResponse> {
  constructor(data?: PartialMessage<RefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.moodle.v1.RefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshResponse {
    return new RefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshResponse {
    return new RefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshResponse | PlainMessage<RefreshResponse> | undefined, b: RefreshResponse | PlainMessage<RefreshResponse> | undefined): boolean {
    return proto3.util.equals(RefreshResponse, a, b);
  }
}

