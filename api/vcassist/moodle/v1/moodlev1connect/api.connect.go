// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/moodle/v1/api.proto

package moodlev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/api/vcassist/moodle/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoodleServiceName is the fully-qualified name of the MoodleService service.
	MoodleServiceName = "vcassist.moodle.v1.MoodleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoodleServiceRefreshProcedure is the fully-qualified name of the MoodleService's Refresh RPC.
	MoodleServiceRefreshProcedure = "/vcassist.moodle.v1.MoodleService/Refresh"
	// MoodleServiceLessonPlansProcedure is the fully-qualified name of the MoodleService's LessonPlans
	// RPC.
	MoodleServiceLessonPlansProcedure = "/vcassist.moodle.v1.MoodleService/LessonPlans"
	// MoodleServiceChapterContentProcedure is the fully-qualified name of the MoodleService's
	// ChapterContent RPC.
	MoodleServiceChapterContentProcedure = "/vcassist.moodle.v1.MoodleService/ChapterContent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moodleServiceServiceDescriptor              = v1.File_vcassist_moodle_v1_api_proto.Services().ByName("MoodleService")
	moodleServiceRefreshMethodDescriptor        = moodleServiceServiceDescriptor.Methods().ByName("Refresh")
	moodleServiceLessonPlansMethodDescriptor    = moodleServiceServiceDescriptor.Methods().ByName("LessonPlans")
	moodleServiceChapterContentMethodDescriptor = moodleServiceServiceDescriptor.Methods().ByName("ChapterContent")
)

// MoodleServiceClient is a client for the vcassist.moodle.v1.MoodleService service.
type MoodleServiceClient interface {
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	// LessonPlans has no server-side caching, it is up to the clients to cache this request.
	LessonPlans(context.Context, *connect.Request[v1.LessonPlansRequest]) (*connect.Response[v1.LessonPlansResponse], error)
	// ChapterContent has no server-side caching, it is up to the clients to cache this request.
	ChapterContent(context.Context, *connect.Request[v1.ChapterContentRequest]) (*connect.Response[v1.ChapterContentResponse], error)
}

// NewMoodleServiceClient constructs a client for the vcassist.moodle.v1.MoodleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoodleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoodleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moodleServiceClient{
		refresh: connect.NewClient[v1.RefreshRequest, v1.RefreshResponse](
			httpClient,
			baseURL+MoodleServiceRefreshProcedure,
			connect.WithSchema(moodleServiceRefreshMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		lessonPlans: connect.NewClient[v1.LessonPlansRequest, v1.LessonPlansResponse](
			httpClient,
			baseURL+MoodleServiceLessonPlansProcedure,
			connect.WithSchema(moodleServiceLessonPlansMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		chapterContent: connect.NewClient[v1.ChapterContentRequest, v1.ChapterContentResponse](
			httpClient,
			baseURL+MoodleServiceChapterContentProcedure,
			connect.WithSchema(moodleServiceChapterContentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moodleServiceClient implements MoodleServiceClient.
type moodleServiceClient struct {
	refresh        *connect.Client[v1.RefreshRequest, v1.RefreshResponse]
	lessonPlans    *connect.Client[v1.LessonPlansRequest, v1.LessonPlansResponse]
	chapterContent *connect.Client[v1.ChapterContentRequest, v1.ChapterContentResponse]
}

// Refresh calls vcassist.moodle.v1.MoodleService.Refresh.
func (c *moodleServiceClient) Refresh(ctx context.Context, req *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return c.refresh.CallUnary(ctx, req)
}

// LessonPlans calls vcassist.moodle.v1.MoodleService.LessonPlans.
func (c *moodleServiceClient) LessonPlans(ctx context.Context, req *connect.Request[v1.LessonPlansRequest]) (*connect.Response[v1.LessonPlansResponse], error) {
	return c.lessonPlans.CallUnary(ctx, req)
}

// ChapterContent calls vcassist.moodle.v1.MoodleService.ChapterContent.
func (c *moodleServiceClient) ChapterContent(ctx context.Context, req *connect.Request[v1.ChapterContentRequest]) (*connect.Response[v1.ChapterContentResponse], error) {
	return c.chapterContent.CallUnary(ctx, req)
}

// MoodleServiceHandler is an implementation of the vcassist.moodle.v1.MoodleService service.
type MoodleServiceHandler interface {
	Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error)
	// LessonPlans has no server-side caching, it is up to the clients to cache this request.
	LessonPlans(context.Context, *connect.Request[v1.LessonPlansRequest]) (*connect.Response[v1.LessonPlansResponse], error)
	// ChapterContent has no server-side caching, it is up to the clients to cache this request.
	ChapterContent(context.Context, *connect.Request[v1.ChapterContentRequest]) (*connect.Response[v1.ChapterContentResponse], error)
}

// NewMoodleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoodleServiceHandler(svc MoodleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moodleServiceRefreshHandler := connect.NewUnaryHandler(
		MoodleServiceRefreshProcedure,
		svc.Refresh,
		connect.WithSchema(moodleServiceRefreshMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceLessonPlansHandler := connect.NewUnaryHandler(
		MoodleServiceLessonPlansProcedure,
		svc.LessonPlans,
		connect.WithSchema(moodleServiceLessonPlansMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceChapterContentHandler := connect.NewUnaryHandler(
		MoodleServiceChapterContentProcedure,
		svc.ChapterContent,
		connect.WithSchema(moodleServiceChapterContentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.moodle.v1.MoodleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoodleServiceRefreshProcedure:
			moodleServiceRefreshHandler.ServeHTTP(w, r)
		case MoodleServiceLessonPlansProcedure:
			moodleServiceLessonPlansHandler.ServeHTTP(w, r)
		case MoodleServiceChapterContentProcedure:
			moodleServiceChapterContentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoodleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoodleServiceHandler struct{}

func (UnimplementedMoodleServiceHandler) Refresh(context.Context, *connect.Request[v1.RefreshRequest]) (*connect.Response[v1.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.moodle.v1.MoodleService.Refresh is not implemented"))
}

func (UnimplementedMoodleServiceHandler) LessonPlans(context.Context, *connect.Request[v1.LessonPlansRequest]) (*connect.Response[v1.LessonPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.moodle.v1.MoodleService.LessonPlans is not implemented"))
}

func (UnimplementedMoodleServiceHandler) ChapterContent(context.Context, *connect.Request[v1.ChapterContentRequest]) (*connect.Response[v1.ChapterContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.moodle.v1.MoodleService.ChapterContent is not implemented"))
}
