// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/public/v1/api.proto (package vcassist.public.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Token } from "../../../openid/v1/types_pb.js";

/**
 * LoginMoodle
 *
 * @generated from message vcassist.public.v1.LoginMoodleRequest
 */
export class LoginMoodleRequest extends Message<LoginMoodleRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<LoginMoodleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.public.v1.LoginMoodleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginMoodleRequest {
    return new LoginMoodleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginMoodleRequest {
    return new LoginMoodleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginMoodleRequest {
    return new LoginMoodleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginMoodleRequest | PlainMessage<LoginMoodleRequest> | undefined, b: LoginMoodleRequest | PlainMessage<LoginMoodleRequest> | undefined): boolean {
    return proto3.util.equals(LoginMoodleRequest, a, b);
  }
}

/**
 * @generated from message vcassist.public.v1.LoginMoodleResponse
 */
export class LoginMoodleResponse extends Message<LoginMoodleResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<LoginMoodleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.public.v1.LoginMoodleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginMoodleResponse {
    return new LoginMoodleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginMoodleResponse {
    return new LoginMoodleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginMoodleResponse {
    return new LoginMoodleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginMoodleResponse | PlainMessage<LoginMoodleResponse> | undefined, b: LoginMoodleResponse | PlainMessage<LoginMoodleResponse> | undefined): boolean {
    return proto3.util.equals(LoginMoodleResponse, a, b);
  }
}

/**
 * LoginPowerschool
 *
 * @generated from message vcassist.public.v1.LoginPowerschoolRequest
 */
export class LoginPowerschoolRequest extends Message<LoginPowerschoolRequest> {
  /**
   * @generated from field: openid.v1.Token token = 1;
   */
  token?: Token;

  constructor(data?: PartialMessage<LoginPowerschoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.public.v1.LoginPowerschoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginPowerschoolRequest {
    return new LoginPowerschoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginPowerschoolRequest {
    return new LoginPowerschoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginPowerschoolRequest {
    return new LoginPowerschoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoginPowerschoolRequest | PlainMessage<LoginPowerschoolRequest> | undefined, b: LoginPowerschoolRequest | PlainMessage<LoginPowerschoolRequest> | undefined): boolean {
    return proto3.util.equals(LoginPowerschoolRequest, a, b);
  }
}

/**
 * @generated from message vcassist.public.v1.LoginPowerschoolResponse
 */
export class LoginPowerschoolResponse extends Message<LoginPowerschoolResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<LoginPowerschoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.public.v1.LoginPowerschoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginPowerschoolResponse {
    return new LoginPowerschoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginPowerschoolResponse {
    return new LoginPowerschoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginPowerschoolResponse {
    return new LoginPowerschoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LoginPowerschoolResponse | PlainMessage<LoginPowerschoolResponse> | undefined, b: LoginPowerschoolResponse | PlainMessage<LoginPowerschoolResponse> | undefined): boolean {
    return proto3.util.equals(LoginPowerschoolResponse, a, b);
  }
}

