// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/public/v1/api.proto

package publicv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/api/vcassist/public/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PublicServiceName is the fully-qualified name of the PublicService service.
	PublicServiceName = "vcassist.public.v1.PublicService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PublicServiceLoginMoodleProcedure is the fully-qualified name of the PublicService's LoginMoodle
	// RPC.
	PublicServiceLoginMoodleProcedure = "/vcassist.public.v1.PublicService/LoginMoodle"
	// PublicServiceLoginPowerschoolProcedure is the fully-qualified name of the PublicService's
	// LoginPowerschool RPC.
	PublicServiceLoginPowerschoolProcedure = "/vcassist.public.v1.PublicService/LoginPowerschool"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	publicServiceServiceDescriptor                = v1.File_vcassist_public_v1_api_proto.Services().ByName("PublicService")
	publicServiceLoginMoodleMethodDescriptor      = publicServiceServiceDescriptor.Methods().ByName("LoginMoodle")
	publicServiceLoginPowerschoolMethodDescriptor = publicServiceServiceDescriptor.Methods().ByName("LoginPowerschool")
)

// PublicServiceClient is a client for the vcassist.public.v1.PublicService service.
type PublicServiceClient interface {
	LoginMoodle(context.Context, *connect.Request[v1.LoginMoodleRequest]) (*connect.Response[v1.LoginMoodleResponse], error)
	LoginPowerschool(context.Context, *connect.Request[v1.LoginPowerschoolRequest]) (*connect.Response[v1.LoginPowerschoolResponse], error)
}

// NewPublicServiceClient constructs a client for the vcassist.public.v1.PublicService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPublicServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PublicServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &publicServiceClient{
		loginMoodle: connect.NewClient[v1.LoginMoodleRequest, v1.LoginMoodleResponse](
			httpClient,
			baseURL+PublicServiceLoginMoodleProcedure,
			connect.WithSchema(publicServiceLoginMoodleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		loginPowerschool: connect.NewClient[v1.LoginPowerschoolRequest, v1.LoginPowerschoolResponse](
			httpClient,
			baseURL+PublicServiceLoginPowerschoolProcedure,
			connect.WithSchema(publicServiceLoginPowerschoolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// publicServiceClient implements PublicServiceClient.
type publicServiceClient struct {
	loginMoodle      *connect.Client[v1.LoginMoodleRequest, v1.LoginMoodleResponse]
	loginPowerschool *connect.Client[v1.LoginPowerschoolRequest, v1.LoginPowerschoolResponse]
}

// LoginMoodle calls vcassist.public.v1.PublicService.LoginMoodle.
func (c *publicServiceClient) LoginMoodle(ctx context.Context, req *connect.Request[v1.LoginMoodleRequest]) (*connect.Response[v1.LoginMoodleResponse], error) {
	return c.loginMoodle.CallUnary(ctx, req)
}

// LoginPowerschool calls vcassist.public.v1.PublicService.LoginPowerschool.
func (c *publicServiceClient) LoginPowerschool(ctx context.Context, req *connect.Request[v1.LoginPowerschoolRequest]) (*connect.Response[v1.LoginPowerschoolResponse], error) {
	return c.loginPowerschool.CallUnary(ctx, req)
}

// PublicServiceHandler is an implementation of the vcassist.public.v1.PublicService service.
type PublicServiceHandler interface {
	LoginMoodle(context.Context, *connect.Request[v1.LoginMoodleRequest]) (*connect.Response[v1.LoginMoodleResponse], error)
	LoginPowerschool(context.Context, *connect.Request[v1.LoginPowerschoolRequest]) (*connect.Response[v1.LoginPowerschoolResponse], error)
}

// NewPublicServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPublicServiceHandler(svc PublicServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	publicServiceLoginMoodleHandler := connect.NewUnaryHandler(
		PublicServiceLoginMoodleProcedure,
		svc.LoginMoodle,
		connect.WithSchema(publicServiceLoginMoodleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	publicServiceLoginPowerschoolHandler := connect.NewUnaryHandler(
		PublicServiceLoginPowerschoolProcedure,
		svc.LoginPowerschool,
		connect.WithSchema(publicServiceLoginPowerschoolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.public.v1.PublicService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PublicServiceLoginMoodleProcedure:
			publicServiceLoginMoodleHandler.ServeHTTP(w, r)
		case PublicServiceLoginPowerschoolProcedure:
			publicServiceLoginPowerschoolHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPublicServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPublicServiceHandler struct{}

func (UnimplementedPublicServiceHandler) LoginMoodle(context.Context, *connect.Request[v1.LoginMoodleRequest]) (*connect.Response[v1.LoginMoodleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.public.v1.PublicService.LoginMoodle is not implemented"))
}

func (UnimplementedPublicServiceHandler) LoginPowerschool(context.Context, *connect.Request[v1.LoginPowerschoolRequest]) (*connect.Response[v1.LoginPowerschoolResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.public.v1.PublicService.LoginPowerschool is not implemented"))
}
