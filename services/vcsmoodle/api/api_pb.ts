// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/vcsmoodle/api/api.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * ProvideUsernamePassword
 *
 * @generated from message ProvideUsernamePasswordRequest
 */
export class ProvideUsernamePasswordRequest extends Message<ProvideUsernamePasswordRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  constructor(data?: PartialMessage<ProvideUsernamePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ProvideUsernamePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideUsernamePasswordRequest | PlainMessage<ProvideUsernamePasswordRequest> | undefined, b: ProvideUsernamePasswordRequest | PlainMessage<ProvideUsernamePasswordRequest> | undefined): boolean {
    return proto3.util.equals(ProvideUsernamePasswordRequest, a, b);
  }
}

/**
 * @generated from message ProvideUsernamePasswordResponse
 */
export class ProvideUsernamePasswordResponse extends Message<ProvideUsernamePasswordResponse> {
  constructor(data?: PartialMessage<ProvideUsernamePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ProvideUsernamePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideUsernamePasswordResponse | PlainMessage<ProvideUsernamePasswordResponse> | undefined, b: ProvideUsernamePasswordResponse | PlainMessage<ProvideUsernamePasswordResponse> | undefined): boolean {
    return proto3.util.equals(ProvideUsernamePasswordResponse, a, b);
  }
}

/**
 * GetStudentData
 *
 * @generated from message Course
 */
export class Course extends Message<Course> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string lesson_plan = 2;
   */
  lessonPlan = "";

  /**
   * @generated from field: string zoom_link = 3;
   */
  zoomLink = "";

  constructor(data?: PartialMessage<Course>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Course";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lesson_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "zoom_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Course {
    return new Course().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJsonString(jsonString, options);
  }

  static equals(a: Course | PlainMessage<Course> | undefined, b: Course | PlainMessage<Course> | undefined): boolean {
    return proto3.util.equals(Course, a, b);
  }
}

/**
 * @generated from message GetStudentDataRequest
 */
export class GetStudentDataRequest extends Message<GetStudentDataRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  constructor(data?: PartialMessage<GetStudentDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetStudentDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined, b: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined): boolean {
    return proto3.util.equals(GetStudentDataRequest, a, b);
  }
}

/**
 * @generated from message GetStudentDataResponse
 */
export class GetStudentDataResponse extends Message<GetStudentDataResponse> {
  /**
   * @generated from field: repeated Course courses = 1;
   */
  courses: Course[] = [];

  constructor(data?: PartialMessage<GetStudentDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetStudentDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined, b: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined): boolean {
    return proto3.util.equals(GetStudentDataResponse, a, b);
  }
}

