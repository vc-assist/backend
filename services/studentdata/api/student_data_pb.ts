// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/studentdata/api/student_data.proto (package services.studentdata.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum services.studentdata.api.AssignmentState
 */
export enum AssignmentState {
  /**
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: MISSING = 1;
   */
  MISSING = 1,

  /**
   * @generated from enum value: INCOMPLETE = 2;
   */
  INCOMPLETE = 2,

  /**
   * @generated from enum value: SUBMITTED = 3;
   */
  SUBMITTED = 3,

  /**
   * @generated from enum value: LATE = 4;
   */
  LATE = 4,

  /**
   * @generated from enum value: EXEMPT = 5;
   */
  EXEMPT = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(AssignmentState)
proto3.util.setEnumType(AssignmentState, "services.studentdata.api.AssignmentState", [
  { no: 0, name: "UNSET" },
  { no: 1, name: "MISSING" },
  { no: 2, name: "INCOMPLETE" },
  { no: 3, name: "SUBMITTED" },
  { no: 4, name: "LATE" },
  { no: 5, name: "EXEMPT" },
]);

/**
 * @generated from message services.studentdata.api.Assignment
 */
export class Assignment extends Message<Assignment> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int64 time = 2;
   */
  time = protoInt64.zero;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: services.studentdata.api.AssignmentState state = 4;
   */
  state = AssignmentState.UNSET;

  /**
   * @generated from field: float scored = 5;
   */
  scored = 0;

  /**
   * @generated from field: float total = 6;
   */
  total = 0;

  /**
   * @generated from field: string assignment_type_name = 7;
   */
  assignmentTypeName = "";

  constructor(data?: PartialMessage<Assignment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.Assignment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "state", kind: "enum", T: proto3.getEnumType(AssignmentState) },
    { no: 5, name: "scored", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "total", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 7, name: "assignment_type_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assignment {
    return new Assignment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assignment {
    return new Assignment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assignment {
    return new Assignment().fromJsonString(jsonString, options);
  }

  static equals(a: Assignment | PlainMessage<Assignment> | undefined, b: Assignment | PlainMessage<Assignment> | undefined): boolean {
    return proto3.util.equals(Assignment, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.CourseMeeting
 */
export class CourseMeeting extends Message<CourseMeeting> {
  /**
   * @generated from field: int64 start_time = 1;
   */
  startTime = protoInt64.zero;

  /**
   * @generated from field: int64 end_time = 2;
   */
  endTime = protoInt64.zero;

  constructor(data?: PartialMessage<CourseMeeting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.CourseMeeting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "end_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseMeeting {
    return new CourseMeeting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseMeeting {
    return new CourseMeeting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseMeeting {
    return new CourseMeeting().fromJsonString(jsonString, options);
  }

  static equals(a: CourseMeeting | PlainMessage<CourseMeeting> | undefined, b: CourseMeeting | PlainMessage<CourseMeeting> | undefined): boolean {
    return proto3.util.equals(CourseMeeting, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.AssignmentType
 */
export class AssignmentType extends Message<AssignmentType> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: float weight = 2;
   */
  weight = 0;

  constructor(data?: PartialMessage<AssignmentType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.AssignmentType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentType {
    return new AssignmentType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentType {
    return new AssignmentType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentType {
    return new AssignmentType().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentType | PlainMessage<AssignmentType> | undefined, b: AssignmentType | PlainMessage<AssignmentType> | undefined): boolean {
    return proto3.util.equals(AssignmentType, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.GradeSnapshot
 */
export class GradeSnapshot extends Message<GradeSnapshot> {
  /**
   * @generated from field: int64 time = 1;
   */
  time = protoInt64.zero;

  /**
   * @generated from field: float value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<GradeSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.GradeSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: GradeSnapshot | PlainMessage<GradeSnapshot> | undefined, b: GradeSnapshot | PlainMessage<GradeSnapshot> | undefined): boolean {
    return proto3.util.equals(GradeSnapshot, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.Course
 */
export class Course extends Message<Course> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: float overall_grade = 2;
   */
  overallGrade = 0;

  /**
   * @generated from field: string teacher = 3;
   */
  teacher = "";

  /**
   * @generated from field: string teacher_email = 4;
   */
  teacherEmail = "";

  /**
   * @generated from field: string remote_meeting_link = 5;
   */
  remoteMeetingLink = "";

  /**
   * @generated from field: string room = 6;
   */
  room = "";

  /**
   * @generated from field: string day_name = 7;
   */
  dayName = "";

  /**
   * @generated from field: int32 homework_passes = 8;
   */
  homeworkPasses = 0;

  /**
   * @generated from field: repeated services.studentdata.api.CourseMeeting meetings = 9;
   */
  meetings: CourseMeeting[] = [];

  /**
   * @generated from field: repeated services.studentdata.api.AssignmentType assignment_types = 10;
   */
  assignmentTypes: AssignmentType[] = [];

  /**
   * @generated from field: repeated services.studentdata.api.Assignment assignments = 11;
   */
  assignments: Assignment[] = [];

  /**
   * @generated from field: repeated services.studentdata.api.GradeSnapshot snapshots = 12;
   */
  snapshots: GradeSnapshot[] = [];

  /**
   * @generated from field: string lesson_plan = 13;
   */
  lessonPlan = "";

  constructor(data?: PartialMessage<Course>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.Course";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "overall_grade", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "teacher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "teacher_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "remote_meeting_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "day_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "homework_passes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "meetings", kind: "message", T: CourseMeeting, repeated: true },
    { no: 10, name: "assignment_types", kind: "message", T: AssignmentType, repeated: true },
    { no: 11, name: "assignments", kind: "message", T: Assignment, repeated: true },
    { no: 12, name: "snapshots", kind: "message", T: GradeSnapshot, repeated: true },
    { no: 13, name: "lesson_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Course {
    return new Course().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJsonString(jsonString, options);
  }

  static equals(a: Course | PlainMessage<Course> | undefined, b: Course | PlainMessage<Course> | undefined): boolean {
    return proto3.util.equals(Course, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.StudentData
 */
export class StudentData extends Message<StudentData> {
  /**
   * @generated from field: float gpa = 1;
   */
  gpa = 0;

  /**
   * @generated from field: repeated string day_names = 2;
   */
  dayNames: string[] = [];

  /**
   * @generated from field: repeated services.studentdata.api.Course courses = 3;
   */
  courses: Course[] = [];

  constructor(data?: PartialMessage<StudentData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.StudentData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gpa", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "day_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "courses", kind: "message", T: Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StudentData {
    return new StudentData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StudentData {
    return new StudentData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StudentData {
    return new StudentData().fromJsonString(jsonString, options);
  }

  static equals(a: StudentData | PlainMessage<StudentData> | undefined, b: StudentData | PlainMessage<StudentData> | undefined): boolean {
    return proto3.util.equals(StudentData, a, b);
  }
}

