// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/studentdata/api/api.proto (package services.studentdata.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StudentData } from "./student_data_pb.js";

/**
 * @generated from message services.studentdata.api.OAuthFlow
 */
export class OAuthFlow extends Message<OAuthFlow> {
  /**
   * @generated from field: string base_login_url = 1;
   */
  baseLoginUrl = "";

  /**
   * @generated from field: string access_type = 2;
   */
  accessType = "";

  /**
   * @generated from field: string scope = 3;
   */
  scope = "";

  /**
   * @generated from field: string redirect_uri = 4;
   */
  redirectUri = "";

  /**
   * @generated from field: string code_verifier = 5;
   */
  codeVerifier = "";

  /**
   * @generated from field: string client_id = 6;
   */
  clientId = "";

  /**
   * @generated from field: string token_request_url = 7;
   */
  tokenRequestUrl = "";

  constructor(data?: PartialMessage<OAuthFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.OAuthFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_login_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_verifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "token_request_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthFlow {
    return new OAuthFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthFlow | PlainMessage<OAuthFlow> | undefined, b: OAuthFlow | PlainMessage<OAuthFlow> | undefined): boolean {
    return proto3.util.equals(OAuthFlow, a, b);
  }
}

/**
 * GetStudentData
 *
 * @generated from message services.studentdata.api.GetStudentDataRequest
 */
export class GetStudentDataRequest extends Message<GetStudentDataRequest> {
  constructor(data?: PartialMessage<GetStudentDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.GetStudentDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined, b: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined): boolean {
    return proto3.util.equals(GetStudentDataRequest, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.GetStudentDataResponse
 */
export class GetStudentDataResponse extends Message<GetStudentDataResponse> {
  /**
   * @generated from field: services.studentdata.api.StudentData data = 1;
   */
  data?: StudentData;

  constructor(data?: PartialMessage<GetStudentDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.GetStudentDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: StudentData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined, b: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined): boolean {
    return proto3.util.equals(GetStudentDataResponse, a, b);
  }
}

/**
 * GetCredentialStatus
 *
 * @generated from message services.studentdata.api.CredentialStatus
 */
export class CredentialStatus extends Message<CredentialStatus> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool provided = 3;
   */
  provided = false;

  /**
   * @generated from oneof services.studentdata.api.CredentialStatus.login_flow
   */
  loginFlow: {
    /**
     * @generated from field: services.studentdata.api.OAuthFlow oauth = 4;
     */
    value: OAuthFlow;
    case: "oauth";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CredentialStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.CredentialStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provided", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "oauth", kind: "message", T: OAuthFlow, oneof: "login_flow" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialStatus {
    return new CredentialStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialStatus | PlainMessage<CredentialStatus> | undefined, b: CredentialStatus | PlainMessage<CredentialStatus> | undefined): boolean {
    return proto3.util.equals(CredentialStatus, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.GetCredentialStatusRequest
 */
export class GetCredentialStatusRequest extends Message<GetCredentialStatusRequest> {
  constructor(data?: PartialMessage<GetCredentialStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.GetCredentialStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined, b: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusRequest, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.GetCredentialStatusResponse
 */
export class GetCredentialStatusResponse extends Message<GetCredentialStatusResponse> {
  /**
   * @generated from field: repeated services.studentdata.api.CredentialStatus statuses = 1;
   */
  statuses: CredentialStatus[] = [];

  constructor(data?: PartialMessage<GetCredentialStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.GetCredentialStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "statuses", kind: "message", T: CredentialStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined, b: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusResponse, a, b);
  }
}

/**
 * ProvideCredential
 *
 * @generated from message services.studentdata.api.UsernamePassword
 */
export class UsernamePassword extends Message<UsernamePassword> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UsernamePassword>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.UsernamePassword";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsernamePassword {
    return new UsernamePassword().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsernamePassword {
    return new UsernamePassword().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsernamePassword {
    return new UsernamePassword().fromJsonString(jsonString, options);
  }

  static equals(a: UsernamePassword | PlainMessage<UsernamePassword> | undefined, b: UsernamePassword | PlainMessage<UsernamePassword> | undefined): boolean {
    return proto3.util.equals(UsernamePassword, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.OAuthToken
 */
export class OAuthToken extends Message<OAuthToken> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<OAuthToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.OAuthToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthToken {
    return new OAuthToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthToken {
    return new OAuthToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthToken {
    return new OAuthToken().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthToken | PlainMessage<OAuthToken> | undefined, b: OAuthToken | PlainMessage<OAuthToken> | undefined): boolean {
    return proto3.util.equals(OAuthToken, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.ProvideCredentialRequest
 */
export class ProvideCredentialRequest extends Message<ProvideCredentialRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from oneof services.studentdata.api.ProvideCredentialRequest.provided
   */
  provided: {
    /**
     * @generated from field: services.studentdata.api.UsernamePassword username_password = 2;
     */
    value: UsernamePassword;
    case: "usernamePassword";
  } | {
    /**
     * @generated from field: services.studentdata.api.OAuthToken oauth_token = 3;
     */
    value: OAuthToken;
    case: "oauthToken";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProvideCredentialRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.ProvideCredentialRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username_password", kind: "message", T: UsernamePassword, oneof: "provided" },
    { no: 3, name: "oauth_token", kind: "message", T: OAuthToken, oneof: "provided" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideCredentialRequest | PlainMessage<ProvideCredentialRequest> | undefined, b: ProvideCredentialRequest | PlainMessage<ProvideCredentialRequest> | undefined): boolean {
    return proto3.util.equals(ProvideCredentialRequest, a, b);
  }
}

/**
 * @generated from message services.studentdata.api.ProvideCredentialResponse
 */
export class ProvideCredentialResponse extends Message<ProvideCredentialResponse> {
  constructor(data?: PartialMessage<ProvideCredentialResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.studentdata.api.ProvideCredentialResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideCredentialResponse | PlainMessage<ProvideCredentialResponse> | undefined, b: ProvideCredentialResponse | PlainMessage<ProvideCredentialResponse> | undefined): boolean {
    return proto3.util.equals(ProvideCredentialResponse, a, b);
  }
}

