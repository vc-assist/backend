// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const deleteCachedStudentDataBefore = `-- name: DeleteCachedStudentDataBefore :exec
delete from StudentDataCache where expiresAt < ?
`

func (q *Queries) DeleteCachedStudentDataBefore(ctx context.Context, expiresat int64) error {
	_, err := q.db.ExecContext(ctx, deleteCachedStudentDataBefore, expiresat)
	return err
}

const getCachedStudentData = `-- name: GetCachedStudentData :one
select expiresAt, cached from StudentDataCache where studentId = ?
`

type GetCachedStudentDataRow struct {
	Expiresat int64
	Cached    []byte
}

func (q *Queries) GetCachedStudentData(ctx context.Context, studentid string) (GetCachedStudentDataRow, error) {
	row := q.db.QueryRowContext(ctx, getCachedStudentData, studentid)
	var i GetCachedStudentDataRow
	err := row.Scan(&i.Expiresat, &i.Cached)
	return i, err
}

const setCachedStudentData = `-- name: SetCachedStudentData :exec
insert into StudentDataCache(studentId, cached, expiresAt) values (?, ?, ?)
on conflict do update set
    cached = EXCLUDED.cached,
    expiresAt = EXCLUDED.expiresAt
`

type SetCachedStudentDataParams struct {
	Studentid string
	Cached    []byte
	Expiresat int64
}

func (q *Queries) SetCachedStudentData(ctx context.Context, arg SetCachedStudentDataParams) error {
	_, err := q.db.ExecContext(ctx, setCachedStudentData, arg.Studentid, arg.Cached, arg.Expiresat)
	return err
}
