// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/vchs/api/api.proto (package services.vchs.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StudentData } from "./student_data_pb.js";

/**
 * GetStudentData
 *
 * @generated from message services.vchs.api.GetStudentDataRequest
 */
export class GetStudentDataRequest extends Message<GetStudentDataRequest> {
  constructor(data?: PartialMessage<GetStudentDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.GetStudentDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined, b: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined): boolean {
    return proto3.util.equals(GetStudentDataRequest, a, b);
  }
}

/**
 * @generated from message services.vchs.api.GetStudentDataResponse
 */
export class GetStudentDataResponse extends Message<GetStudentDataResponse> {
  /**
   * @generated from field: services.vchs.api.StudentData data = 1;
   */
  data?: StudentData;

  constructor(data?: PartialMessage<GetStudentDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.GetStudentDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: StudentData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined, b: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined): boolean {
    return proto3.util.equals(GetStudentDataResponse, a, b);
  }
}

/**
 * ProvidePowerschoolToken
 *
 * @generated from message services.vchs.api.ProvidePowerschoolTokenRequest
 */
export class ProvidePowerschoolTokenRequest extends Message<ProvidePowerschoolTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ProvidePowerschoolTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.ProvidePowerschoolTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvidePowerschoolTokenRequest {
    return new ProvidePowerschoolTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvidePowerschoolTokenRequest {
    return new ProvidePowerschoolTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvidePowerschoolTokenRequest {
    return new ProvidePowerschoolTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvidePowerschoolTokenRequest | PlainMessage<ProvidePowerschoolTokenRequest> | undefined, b: ProvidePowerschoolTokenRequest | PlainMessage<ProvidePowerschoolTokenRequest> | undefined): boolean {
    return proto3.util.equals(ProvidePowerschoolTokenRequest, a, b);
  }
}

/**
 * @generated from message services.vchs.api.ProvidePowerschoolTokenResponse
 */
export class ProvidePowerschoolTokenResponse extends Message<ProvidePowerschoolTokenResponse> {
  constructor(data?: PartialMessage<ProvidePowerschoolTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.ProvidePowerschoolTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvidePowerschoolTokenResponse {
    return new ProvidePowerschoolTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvidePowerschoolTokenResponse {
    return new ProvidePowerschoolTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvidePowerschoolTokenResponse {
    return new ProvidePowerschoolTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvidePowerschoolTokenResponse | PlainMessage<ProvidePowerschoolTokenResponse> | undefined, b: ProvidePowerschoolTokenResponse | PlainMessage<ProvidePowerschoolTokenResponse> | undefined): boolean {
    return proto3.util.equals(ProvidePowerschoolTokenResponse, a, b);
  }
}

/**
 * ProvideMoodleLogin
 *
 * @generated from message services.vchs.api.ProvideMoodleLoginRequest
 */
export class ProvideMoodleLoginRequest extends Message<ProvideMoodleLoginRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<ProvideMoodleLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.ProvideMoodleLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideMoodleLoginRequest {
    return new ProvideMoodleLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideMoodleLoginRequest {
    return new ProvideMoodleLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideMoodleLoginRequest {
    return new ProvideMoodleLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideMoodleLoginRequest | PlainMessage<ProvideMoodleLoginRequest> | undefined, b: ProvideMoodleLoginRequest | PlainMessage<ProvideMoodleLoginRequest> | undefined): boolean {
    return proto3.util.equals(ProvideMoodleLoginRequest, a, b);
  }
}

/**
 * @generated from message services.vchs.api.ProvideMoodleLoginResponse
 */
export class ProvideMoodleLoginResponse extends Message<ProvideMoodleLoginResponse> {
  constructor(data?: PartialMessage<ProvideMoodleLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.ProvideMoodleLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideMoodleLoginResponse {
    return new ProvideMoodleLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideMoodleLoginResponse {
    return new ProvideMoodleLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideMoodleLoginResponse {
    return new ProvideMoodleLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideMoodleLoginResponse | PlainMessage<ProvideMoodleLoginResponse> | undefined, b: ProvideMoodleLoginResponse | PlainMessage<ProvideMoodleLoginResponse> | undefined): boolean {
    return proto3.util.equals(ProvideMoodleLoginResponse, a, b);
  }
}

/**
 * GetCredentialStatus
 *
 * @generated from message services.vchs.api.GetCredentialStatusRequest
 */
export class GetCredentialStatusRequest extends Message<GetCredentialStatusRequest> {
  constructor(data?: PartialMessage<GetCredentialStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.GetCredentialStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined, b: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusRequest, a, b);
  }
}

/**
 * @generated from message services.vchs.api.GetCredentialStatusResponse
 */
export class GetCredentialStatusResponse extends Message<GetCredentialStatusResponse> {
  /**
   * @generated from field: bool powerschool_provided = 1;
   */
  powerschoolProvided = false;

  /**
   * @generated from field: bool moodle_provided = 2;
   */
  moodleProvided = false;

  constructor(data?: PartialMessage<GetCredentialStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.vchs.api.GetCredentialStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "powerschool_provided", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "moodle_provided", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined, b: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusResponse, a, b);
  }
}

