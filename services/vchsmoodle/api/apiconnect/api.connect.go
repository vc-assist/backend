// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/vchsmoodle/api/api.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	api "vcassist-backend/services/vchsmoodle/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoodleServiceName is the fully-qualified name of the MoodleService service.
	MoodleServiceName = "MoodleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoodleServiceProvideUsernamePasswordProcedure is the fully-qualified name of the MoodleService's
	// ProvideUsernamePassword RPC.
	MoodleServiceProvideUsernamePasswordProcedure = "/MoodleService/ProvideUsernamePassword"
	// MoodleServiceGetStudentDataProcedure is the fully-qualified name of the MoodleService's
	// GetStudentData RPC.
	MoodleServiceGetStudentDataProcedure = "/MoodleService/GetStudentData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moodleServiceServiceDescriptor                       = api.File_services_vchsmoodle_api_api_proto.Services().ByName("MoodleService")
	moodleServiceProvideUsernamePasswordMethodDescriptor = moodleServiceServiceDescriptor.Methods().ByName("ProvideUsernamePassword")
	moodleServiceGetStudentDataMethodDescriptor          = moodleServiceServiceDescriptor.Methods().ByName("GetStudentData")
)

// MoodleServiceClient is a client for the MoodleService service.
type MoodleServiceClient interface {
	ProvideUsernamePassword(context.Context, *connect.Request[api.ProvideUsernamePasswordRequest]) (*connect.Response[api.ProvideUsernamePasswordResponse], error)
	GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error)
}

// NewMoodleServiceClient constructs a client for the MoodleService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoodleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoodleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moodleServiceClient{
		provideUsernamePassword: connect.NewClient[api.ProvideUsernamePasswordRequest, api.ProvideUsernamePasswordResponse](
			httpClient,
			baseURL+MoodleServiceProvideUsernamePasswordProcedure,
			connect.WithSchema(moodleServiceProvideUsernamePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStudentData: connect.NewClient[api.GetStudentDataRequest, api.GetStudentDataResponse](
			httpClient,
			baseURL+MoodleServiceGetStudentDataProcedure,
			connect.WithSchema(moodleServiceGetStudentDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moodleServiceClient implements MoodleServiceClient.
type moodleServiceClient struct {
	provideUsernamePassword *connect.Client[api.ProvideUsernamePasswordRequest, api.ProvideUsernamePasswordResponse]
	getStudentData          *connect.Client[api.GetStudentDataRequest, api.GetStudentDataResponse]
}

// ProvideUsernamePassword calls MoodleService.ProvideUsernamePassword.
func (c *moodleServiceClient) ProvideUsernamePassword(ctx context.Context, req *connect.Request[api.ProvideUsernamePasswordRequest]) (*connect.Response[api.ProvideUsernamePasswordResponse], error) {
	return c.provideUsernamePassword.CallUnary(ctx, req)
}

// GetStudentData calls MoodleService.GetStudentData.
func (c *moodleServiceClient) GetStudentData(ctx context.Context, req *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error) {
	return c.getStudentData.CallUnary(ctx, req)
}

// MoodleServiceHandler is an implementation of the MoodleService service.
type MoodleServiceHandler interface {
	ProvideUsernamePassword(context.Context, *connect.Request[api.ProvideUsernamePasswordRequest]) (*connect.Response[api.ProvideUsernamePasswordResponse], error)
	GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error)
}

// NewMoodleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoodleServiceHandler(svc MoodleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moodleServiceProvideUsernamePasswordHandler := connect.NewUnaryHandler(
		MoodleServiceProvideUsernamePasswordProcedure,
		svc.ProvideUsernamePassword,
		connect.WithSchema(moodleServiceProvideUsernamePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceGetStudentDataHandler := connect.NewUnaryHandler(
		MoodleServiceGetStudentDataProcedure,
		svc.GetStudentData,
		connect.WithSchema(moodleServiceGetStudentDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/MoodleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoodleServiceProvideUsernamePasswordProcedure:
			moodleServiceProvideUsernamePasswordHandler.ServeHTTP(w, r)
		case MoodleServiceGetStudentDataProcedure:
			moodleServiceGetStudentDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoodleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoodleServiceHandler struct{}

func (UnimplementedMoodleServiceHandler) ProvideUsernamePassword(context.Context, *connect.Request[api.ProvideUsernamePasswordRequest]) (*connect.Response[api.ProvideUsernamePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("MoodleService.ProvideUsernamePassword is not implemented"))
}

func (UnimplementedMoodleServiceHandler) GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("MoodleService.GetStudentData is not implemented"))
}
