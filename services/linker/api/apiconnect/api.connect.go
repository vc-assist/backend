// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/linker/api/api.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	api "vcassist-backend/services/linker/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LinkerServiceName is the fully-qualified name of the LinkerService service.
	LinkerServiceName = "services.linker.api.LinkerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LinkerServiceGetExplicitLinksProcedure is the fully-qualified name of the LinkerService's
	// GetExplicitLinks RPC.
	LinkerServiceGetExplicitLinksProcedure = "/services.linker.api.LinkerService/GetExplicitLinks"
	// LinkerServiceAddExplicitLinkProcedure is the fully-qualified name of the LinkerService's
	// AddExplicitLink RPC.
	LinkerServiceAddExplicitLinkProcedure = "/services.linker.api.LinkerService/AddExplicitLink"
	// LinkerServiceDeleteExplicitLinkProcedure is the fully-qualified name of the LinkerService's
	// DeleteExplicitLink RPC.
	LinkerServiceDeleteExplicitLinkProcedure = "/services.linker.api.LinkerService/DeleteExplicitLink"
	// LinkerServiceLinkProcedure is the fully-qualified name of the LinkerService's Link RPC.
	LinkerServiceLinkProcedure = "/services.linker.api.LinkerService/Link"
	// LinkerServiceGetKnownSetsProcedure is the fully-qualified name of the LinkerService's
	// GetKnownSets RPC.
	LinkerServiceGetKnownSetsProcedure = "/services.linker.api.LinkerService/GetKnownSets"
	// LinkerServiceGetKnownKeysProcedure is the fully-qualified name of the LinkerService's
	// GetKnownKeys RPC.
	LinkerServiceGetKnownKeysProcedure = "/services.linker.api.LinkerService/GetKnownKeys"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	linkerServiceServiceDescriptor                  = api.File_services_linker_api_api_proto.Services().ByName("LinkerService")
	linkerServiceGetExplicitLinksMethodDescriptor   = linkerServiceServiceDescriptor.Methods().ByName("GetExplicitLinks")
	linkerServiceAddExplicitLinkMethodDescriptor    = linkerServiceServiceDescriptor.Methods().ByName("AddExplicitLink")
	linkerServiceDeleteExplicitLinkMethodDescriptor = linkerServiceServiceDescriptor.Methods().ByName("DeleteExplicitLink")
	linkerServiceLinkMethodDescriptor               = linkerServiceServiceDescriptor.Methods().ByName("Link")
	linkerServiceGetKnownSetsMethodDescriptor       = linkerServiceServiceDescriptor.Methods().ByName("GetKnownSets")
	linkerServiceGetKnownKeysMethodDescriptor       = linkerServiceServiceDescriptor.Methods().ByName("GetKnownKeys")
)

// LinkerServiceClient is a client for the services.linker.api.LinkerService service.
type LinkerServiceClient interface {
	GetExplicitLinks(context.Context, *connect.Request[api.GetExplicitLinksRequest]) (*connect.Response[api.GetExplicitLinksResponse], error)
	AddExplicitLink(context.Context, *connect.Request[api.AddExplicitLinkRequest]) (*connect.Response[api.AddExplicitLinkResponse], error)
	DeleteExplicitLink(context.Context, *connect.Request[api.DeleteExplicitLinkRequest]) (*connect.Response[api.DeleteExplicitLinkResponse], error)
	Link(context.Context, *connect.Request[api.LinkRequest]) (*connect.Response[api.LinkResponse], error)
	GetKnownSets(context.Context, *connect.Request[api.GetKnownSetsRequest]) (*connect.Response[api.GetKnownSetsResponse], error)
	GetKnownKeys(context.Context, *connect.Request[api.GetKnownKeysRequest]) (*connect.Response[api.GetKnownKeysResponse], error)
}

// NewLinkerServiceClient constructs a client for the services.linker.api.LinkerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLinkerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LinkerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &linkerServiceClient{
		getExplicitLinks: connect.NewClient[api.GetExplicitLinksRequest, api.GetExplicitLinksResponse](
			httpClient,
			baseURL+LinkerServiceGetExplicitLinksProcedure,
			connect.WithSchema(linkerServiceGetExplicitLinksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addExplicitLink: connect.NewClient[api.AddExplicitLinkRequest, api.AddExplicitLinkResponse](
			httpClient,
			baseURL+LinkerServiceAddExplicitLinkProcedure,
			connect.WithSchema(linkerServiceAddExplicitLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteExplicitLink: connect.NewClient[api.DeleteExplicitLinkRequest, api.DeleteExplicitLinkResponse](
			httpClient,
			baseURL+LinkerServiceDeleteExplicitLinkProcedure,
			connect.WithSchema(linkerServiceDeleteExplicitLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		link: connect.NewClient[api.LinkRequest, api.LinkResponse](
			httpClient,
			baseURL+LinkerServiceLinkProcedure,
			connect.WithSchema(linkerServiceLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKnownSets: connect.NewClient[api.GetKnownSetsRequest, api.GetKnownSetsResponse](
			httpClient,
			baseURL+LinkerServiceGetKnownSetsProcedure,
			connect.WithSchema(linkerServiceGetKnownSetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getKnownKeys: connect.NewClient[api.GetKnownKeysRequest, api.GetKnownKeysResponse](
			httpClient,
			baseURL+LinkerServiceGetKnownKeysProcedure,
			connect.WithSchema(linkerServiceGetKnownKeysMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// linkerServiceClient implements LinkerServiceClient.
type linkerServiceClient struct {
	getExplicitLinks   *connect.Client[api.GetExplicitLinksRequest, api.GetExplicitLinksResponse]
	addExplicitLink    *connect.Client[api.AddExplicitLinkRequest, api.AddExplicitLinkResponse]
	deleteExplicitLink *connect.Client[api.DeleteExplicitLinkRequest, api.DeleteExplicitLinkResponse]
	link               *connect.Client[api.LinkRequest, api.LinkResponse]
	getKnownSets       *connect.Client[api.GetKnownSetsRequest, api.GetKnownSetsResponse]
	getKnownKeys       *connect.Client[api.GetKnownKeysRequest, api.GetKnownKeysResponse]
}

// GetExplicitLinks calls services.linker.api.LinkerService.GetExplicitLinks.
func (c *linkerServiceClient) GetExplicitLinks(ctx context.Context, req *connect.Request[api.GetExplicitLinksRequest]) (*connect.Response[api.GetExplicitLinksResponse], error) {
	return c.getExplicitLinks.CallUnary(ctx, req)
}

// AddExplicitLink calls services.linker.api.LinkerService.AddExplicitLink.
func (c *linkerServiceClient) AddExplicitLink(ctx context.Context, req *connect.Request[api.AddExplicitLinkRequest]) (*connect.Response[api.AddExplicitLinkResponse], error) {
	return c.addExplicitLink.CallUnary(ctx, req)
}

// DeleteExplicitLink calls services.linker.api.LinkerService.DeleteExplicitLink.
func (c *linkerServiceClient) DeleteExplicitLink(ctx context.Context, req *connect.Request[api.DeleteExplicitLinkRequest]) (*connect.Response[api.DeleteExplicitLinkResponse], error) {
	return c.deleteExplicitLink.CallUnary(ctx, req)
}

// Link calls services.linker.api.LinkerService.Link.
func (c *linkerServiceClient) Link(ctx context.Context, req *connect.Request[api.LinkRequest]) (*connect.Response[api.LinkResponse], error) {
	return c.link.CallUnary(ctx, req)
}

// GetKnownSets calls services.linker.api.LinkerService.GetKnownSets.
func (c *linkerServiceClient) GetKnownSets(ctx context.Context, req *connect.Request[api.GetKnownSetsRequest]) (*connect.Response[api.GetKnownSetsResponse], error) {
	return c.getKnownSets.CallUnary(ctx, req)
}

// GetKnownKeys calls services.linker.api.LinkerService.GetKnownKeys.
func (c *linkerServiceClient) GetKnownKeys(ctx context.Context, req *connect.Request[api.GetKnownKeysRequest]) (*connect.Response[api.GetKnownKeysResponse], error) {
	return c.getKnownKeys.CallUnary(ctx, req)
}

// LinkerServiceHandler is an implementation of the services.linker.api.LinkerService service.
type LinkerServiceHandler interface {
	GetExplicitLinks(context.Context, *connect.Request[api.GetExplicitLinksRequest]) (*connect.Response[api.GetExplicitLinksResponse], error)
	AddExplicitLink(context.Context, *connect.Request[api.AddExplicitLinkRequest]) (*connect.Response[api.AddExplicitLinkResponse], error)
	DeleteExplicitLink(context.Context, *connect.Request[api.DeleteExplicitLinkRequest]) (*connect.Response[api.DeleteExplicitLinkResponse], error)
	Link(context.Context, *connect.Request[api.LinkRequest]) (*connect.Response[api.LinkResponse], error)
	GetKnownSets(context.Context, *connect.Request[api.GetKnownSetsRequest]) (*connect.Response[api.GetKnownSetsResponse], error)
	GetKnownKeys(context.Context, *connect.Request[api.GetKnownKeysRequest]) (*connect.Response[api.GetKnownKeysResponse], error)
}

// NewLinkerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLinkerServiceHandler(svc LinkerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	linkerServiceGetExplicitLinksHandler := connect.NewUnaryHandler(
		LinkerServiceGetExplicitLinksProcedure,
		svc.GetExplicitLinks,
		connect.WithSchema(linkerServiceGetExplicitLinksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	linkerServiceAddExplicitLinkHandler := connect.NewUnaryHandler(
		LinkerServiceAddExplicitLinkProcedure,
		svc.AddExplicitLink,
		connect.WithSchema(linkerServiceAddExplicitLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	linkerServiceDeleteExplicitLinkHandler := connect.NewUnaryHandler(
		LinkerServiceDeleteExplicitLinkProcedure,
		svc.DeleteExplicitLink,
		connect.WithSchema(linkerServiceDeleteExplicitLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	linkerServiceLinkHandler := connect.NewUnaryHandler(
		LinkerServiceLinkProcedure,
		svc.Link,
		connect.WithSchema(linkerServiceLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	linkerServiceGetKnownSetsHandler := connect.NewUnaryHandler(
		LinkerServiceGetKnownSetsProcedure,
		svc.GetKnownSets,
		connect.WithSchema(linkerServiceGetKnownSetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	linkerServiceGetKnownKeysHandler := connect.NewUnaryHandler(
		LinkerServiceGetKnownKeysProcedure,
		svc.GetKnownKeys,
		connect.WithSchema(linkerServiceGetKnownKeysMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.linker.api.LinkerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LinkerServiceGetExplicitLinksProcedure:
			linkerServiceGetExplicitLinksHandler.ServeHTTP(w, r)
		case LinkerServiceAddExplicitLinkProcedure:
			linkerServiceAddExplicitLinkHandler.ServeHTTP(w, r)
		case LinkerServiceDeleteExplicitLinkProcedure:
			linkerServiceDeleteExplicitLinkHandler.ServeHTTP(w, r)
		case LinkerServiceLinkProcedure:
			linkerServiceLinkHandler.ServeHTTP(w, r)
		case LinkerServiceGetKnownSetsProcedure:
			linkerServiceGetKnownSetsHandler.ServeHTTP(w, r)
		case LinkerServiceGetKnownKeysProcedure:
			linkerServiceGetKnownKeysHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLinkerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLinkerServiceHandler struct{}

func (UnimplementedLinkerServiceHandler) GetExplicitLinks(context.Context, *connect.Request[api.GetExplicitLinksRequest]) (*connect.Response[api.GetExplicitLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.GetExplicitLinks is not implemented"))
}

func (UnimplementedLinkerServiceHandler) AddExplicitLink(context.Context, *connect.Request[api.AddExplicitLinkRequest]) (*connect.Response[api.AddExplicitLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.AddExplicitLink is not implemented"))
}

func (UnimplementedLinkerServiceHandler) DeleteExplicitLink(context.Context, *connect.Request[api.DeleteExplicitLinkRequest]) (*connect.Response[api.DeleteExplicitLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.DeleteExplicitLink is not implemented"))
}

func (UnimplementedLinkerServiceHandler) Link(context.Context, *connect.Request[api.LinkRequest]) (*connect.Response[api.LinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.Link is not implemented"))
}

func (UnimplementedLinkerServiceHandler) GetKnownSets(context.Context, *connect.Request[api.GetKnownSetsRequest]) (*connect.Response[api.GetKnownSetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.GetKnownSets is not implemented"))
}

func (UnimplementedLinkerServiceHandler) GetKnownKeys(context.Context, *connect.Request[api.GetKnownKeysRequest]) (*connect.Response[api.GetKnownKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.linker.api.LinkerService.GetKnownKeys is not implemented"))
}
