// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/linker/api/api.proto (package services.linker.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GetExplicitLinks
 *
 * @generated from message services.linker.api.GetExplicitLinksRequest
 */
export class GetExplicitLinksRequest extends Message<GetExplicitLinksRequest> {
  /**
   * @generated from field: string left_set = 1;
   */
  leftSet = "";

  /**
   * @generated from field: string right_set = 2;
   */
  rightSet = "";

  constructor(data?: PartialMessage<GetExplicitLinksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetExplicitLinksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left_set", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "right_set", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExplicitLinksRequest {
    return new GetExplicitLinksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExplicitLinksRequest {
    return new GetExplicitLinksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExplicitLinksRequest {
    return new GetExplicitLinksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetExplicitLinksRequest | PlainMessage<GetExplicitLinksRequest> | undefined, b: GetExplicitLinksRequest | PlainMessage<GetExplicitLinksRequest> | undefined): boolean {
    return proto3.util.equals(GetExplicitLinksRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.GetExplicitLinksResponse
 */
export class GetExplicitLinksResponse extends Message<GetExplicitLinksResponse> {
  /**
   * @generated from field: repeated string left_keys = 1;
   */
  leftKeys: string[] = [];

  /**
   * @generated from field: repeated string right_keys = 2;
   */
  rightKeys: string[] = [];

  constructor(data?: PartialMessage<GetExplicitLinksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetExplicitLinksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "right_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExplicitLinksResponse {
    return new GetExplicitLinksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExplicitLinksResponse {
    return new GetExplicitLinksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExplicitLinksResponse {
    return new GetExplicitLinksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetExplicitLinksResponse | PlainMessage<GetExplicitLinksResponse> | undefined, b: GetExplicitLinksResponse | PlainMessage<GetExplicitLinksResponse> | undefined): boolean {
    return proto3.util.equals(GetExplicitLinksResponse, a, b);
  }
}

/**
 * @generated from message services.linker.api.ExplicitKey
 */
export class ExplicitKey extends Message<ExplicitKey> {
  /**
   * @generated from field: string set = 1;
   */
  set = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<ExplicitKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.ExplicitKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExplicitKey {
    return new ExplicitKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExplicitKey {
    return new ExplicitKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExplicitKey {
    return new ExplicitKey().fromJsonString(jsonString, options);
  }

  static equals(a: ExplicitKey | PlainMessage<ExplicitKey> | undefined, b: ExplicitKey | PlainMessage<ExplicitKey> | undefined): boolean {
    return proto3.util.equals(ExplicitKey, a, b);
  }
}

/**
 * AddExplicitLink
 *
 * @generated from message services.linker.api.AddExplicitLinkRequest
 */
export class AddExplicitLinkRequest extends Message<AddExplicitLinkRequest> {
  /**
   * @generated from field: services.linker.api.ExplicitKey left = 1;
   */
  left?: ExplicitKey;

  /**
   * @generated from field: services.linker.api.ExplicitKey right = 2;
   */
  right?: ExplicitKey;

  constructor(data?: PartialMessage<AddExplicitLinkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.AddExplicitLinkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left", kind: "message", T: ExplicitKey },
    { no: 2, name: "right", kind: "message", T: ExplicitKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddExplicitLinkRequest {
    return new AddExplicitLinkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddExplicitLinkRequest {
    return new AddExplicitLinkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddExplicitLinkRequest {
    return new AddExplicitLinkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddExplicitLinkRequest | PlainMessage<AddExplicitLinkRequest> | undefined, b: AddExplicitLinkRequest | PlainMessage<AddExplicitLinkRequest> | undefined): boolean {
    return proto3.util.equals(AddExplicitLinkRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.AddExplicitLinkResponse
 */
export class AddExplicitLinkResponse extends Message<AddExplicitLinkResponse> {
  constructor(data?: PartialMessage<AddExplicitLinkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.AddExplicitLinkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddExplicitLinkResponse {
    return new AddExplicitLinkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddExplicitLinkResponse {
    return new AddExplicitLinkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddExplicitLinkResponse {
    return new AddExplicitLinkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddExplicitLinkResponse | PlainMessage<AddExplicitLinkResponse> | undefined, b: AddExplicitLinkResponse | PlainMessage<AddExplicitLinkResponse> | undefined): boolean {
    return proto3.util.equals(AddExplicitLinkResponse, a, b);
  }
}

/**
 * DeleteExplicitLink
 *
 * @generated from message services.linker.api.DeleteExplicitLinkRequest
 */
export class DeleteExplicitLinkRequest extends Message<DeleteExplicitLinkRequest> {
  /**
   * @generated from field: services.linker.api.ExplicitKey left = 1;
   */
  left?: ExplicitKey;

  /**
   * @generated from field: services.linker.api.ExplicitKey right = 2;
   */
  right?: ExplicitKey;

  constructor(data?: PartialMessage<DeleteExplicitLinkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.DeleteExplicitLinkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "left", kind: "message", T: ExplicitKey },
    { no: 2, name: "right", kind: "message", T: ExplicitKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExplicitLinkRequest {
    return new DeleteExplicitLinkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExplicitLinkRequest {
    return new DeleteExplicitLinkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExplicitLinkRequest {
    return new DeleteExplicitLinkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExplicitLinkRequest | PlainMessage<DeleteExplicitLinkRequest> | undefined, b: DeleteExplicitLinkRequest | PlainMessage<DeleteExplicitLinkRequest> | undefined): boolean {
    return proto3.util.equals(DeleteExplicitLinkRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.DeleteExplicitLinkResponse
 */
export class DeleteExplicitLinkResponse extends Message<DeleteExplicitLinkResponse> {
  constructor(data?: PartialMessage<DeleteExplicitLinkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.DeleteExplicitLinkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExplicitLinkResponse {
    return new DeleteExplicitLinkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExplicitLinkResponse {
    return new DeleteExplicitLinkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExplicitLinkResponse {
    return new DeleteExplicitLinkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExplicitLinkResponse | PlainMessage<DeleteExplicitLinkResponse> | undefined, b: DeleteExplicitLinkResponse | PlainMessage<DeleteExplicitLinkResponse> | undefined): boolean {
    return proto3.util.equals(DeleteExplicitLinkResponse, a, b);
  }
}

/**
 * Link
 *
 * @generated from message services.linker.api.Set
 */
export class Set extends Message<Set> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string keys = 2;
   */
  keys: string[] = [];

  constructor(data?: PartialMessage<Set>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.Set";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Set {
    return new Set().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Set {
    return new Set().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Set {
    return new Set().fromJsonString(jsonString, options);
  }

  static equals(a: Set | PlainMessage<Set> | undefined, b: Set | PlainMessage<Set> | undefined): boolean {
    return proto3.util.equals(Set, a, b);
  }
}

/**
 * @generated from message services.linker.api.LinkRequest
 */
export class LinkRequest extends Message<LinkRequest> {
  /**
   * @generated from field: services.linker.api.Set src = 1;
   */
  src?: Set;

  /**
   * @generated from field: services.linker.api.Set dst = 2;
   */
  dst?: Set;

  constructor(data?: PartialMessage<LinkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.LinkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src", kind: "message", T: Set },
    { no: 2, name: "dst", kind: "message", T: Set },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkRequest {
    return new LinkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkRequest {
    return new LinkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkRequest {
    return new LinkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LinkRequest | PlainMessage<LinkRequest> | undefined, b: LinkRequest | PlainMessage<LinkRequest> | undefined): boolean {
    return proto3.util.equals(LinkRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.LinkResponse
 */
export class LinkResponse extends Message<LinkResponse> {
  /**
   * @generated from field: map<string, string> src_to_dst = 1;
   */
  srcToDst: { [key: string]: string } = {};

  constructor(data?: PartialMessage<LinkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.LinkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src_to_dst", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkResponse {
    return new LinkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkResponse {
    return new LinkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkResponse {
    return new LinkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LinkResponse | PlainMessage<LinkResponse> | undefined, b: LinkResponse | PlainMessage<LinkResponse> | undefined): boolean {
    return proto3.util.equals(LinkResponse, a, b);
  }
}

/**
 * GetKnownSets
 *
 * @generated from message services.linker.api.GetKnownSetsRequest
 */
export class GetKnownSetsRequest extends Message<GetKnownSetsRequest> {
  constructor(data?: PartialMessage<GetKnownSetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetKnownSetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKnownSetsRequest {
    return new GetKnownSetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKnownSetsRequest {
    return new GetKnownSetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKnownSetsRequest {
    return new GetKnownSetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKnownSetsRequest | PlainMessage<GetKnownSetsRequest> | undefined, b: GetKnownSetsRequest | PlainMessage<GetKnownSetsRequest> | undefined): boolean {
    return proto3.util.equals(GetKnownSetsRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.GetKnownSetsResponse
 */
export class GetKnownSetsResponse extends Message<GetKnownSetsResponse> {
  /**
   * @generated from field: repeated string sets = 1;
   */
  sets: string[] = [];

  constructor(data?: PartialMessage<GetKnownSetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetKnownSetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKnownSetsResponse {
    return new GetKnownSetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKnownSetsResponse {
    return new GetKnownSetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKnownSetsResponse {
    return new GetKnownSetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKnownSetsResponse | PlainMessage<GetKnownSetsResponse> | undefined, b: GetKnownSetsResponse | PlainMessage<GetKnownSetsResponse> | undefined): boolean {
    return proto3.util.equals(GetKnownSetsResponse, a, b);
  }
}

/**
 * GetKnownKeys
 *
 * @generated from message services.linker.api.KnownKey
 */
export class KnownKey extends Message<KnownKey> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * a unix date, if more than 6 months since last seen, delete the key
   *
   * @generated from field: int64 last_seen = 2;
   */
  lastSeen = protoInt64.zero;

  constructor(data?: PartialMessage<KnownKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.KnownKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_seen", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KnownKey {
    return new KnownKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KnownKey {
    return new KnownKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KnownKey {
    return new KnownKey().fromJsonString(jsonString, options);
  }

  static equals(a: KnownKey | PlainMessage<KnownKey> | undefined, b: KnownKey | PlainMessage<KnownKey> | undefined): boolean {
    return proto3.util.equals(KnownKey, a, b);
  }
}

/**
 * @generated from message services.linker.api.GetKnownKeysRequest
 */
export class GetKnownKeysRequest extends Message<GetKnownKeysRequest> {
  /**
   * @generated from field: string set = 1;
   */
  set = "";

  constructor(data?: PartialMessage<GetKnownKeysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetKnownKeysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "set", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKnownKeysRequest {
    return new GetKnownKeysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKnownKeysRequest {
    return new GetKnownKeysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKnownKeysRequest {
    return new GetKnownKeysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKnownKeysRequest | PlainMessage<GetKnownKeysRequest> | undefined, b: GetKnownKeysRequest | PlainMessage<GetKnownKeysRequest> | undefined): boolean {
    return proto3.util.equals(GetKnownKeysRequest, a, b);
  }
}

/**
 * @generated from message services.linker.api.GetKnownKeysResponse
 */
export class GetKnownKeysResponse extends Message<GetKnownKeysResponse> {
  /**
   * @generated from field: repeated services.linker.api.KnownKey keys = 1;
   */
  keys: KnownKey[] = [];

  constructor(data?: PartialMessage<GetKnownKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.linker.api.GetKnownKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: KnownKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKnownKeysResponse {
    return new GetKnownKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKnownKeysResponse {
    return new GetKnownKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKnownKeysResponse {
    return new GetKnownKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKnownKeysResponse | PlainMessage<GetKnownKeysResponse> | undefined, b: GetKnownKeysResponse | PlainMessage<GetKnownKeysResponse> | undefined): boolean {
    return proto3.util.equals(GetKnownKeysResponse, a, b);
  }
}

