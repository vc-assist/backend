// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"strings"
)

const createExplicitLink = `-- name: CreateExplicitLink :exec
insert into ExplicitLink(leftSet, leftKey, rightSet, rightKey) values (?, ?, ?, ?)
on conflict do nothing
`

type CreateExplicitLinkParams struct {
	Leftset  string
	Leftkey  string
	Rightset string
	Rightkey string
}

func (q *Queries) CreateExplicitLink(ctx context.Context, arg CreateExplicitLinkParams) error {
	_, err := q.db.ExecContext(ctx, createExplicitLink,
		arg.Leftset,
		arg.Leftkey,
		arg.Rightset,
		arg.Rightkey,
	)
	return err
}

const createKnownKey = `-- name: CreateKnownKey :exec
insert into KnownKey(setname, value, lastSeen) values (?, ?, ?)
on conflict (setname, value) do update set
    lastSeen = EXCLUDED.lastSeen
`

type CreateKnownKeyParams struct {
	Setname  string
	Value    string
	Lastseen int64
}

func (q *Queries) CreateKnownKey(ctx context.Context, arg CreateKnownKeyParams) error {
	_, err := q.db.ExecContext(ctx, createKnownKey, arg.Setname, arg.Value, arg.Lastseen)
	return err
}

const createKnownSet = `-- name: CreateKnownSet :exec
insert into KnownSet(setname) values (?) on conflict (setname) do nothing
`

func (q *Queries) CreateKnownSet(ctx context.Context, setname string) error {
	_, err := q.db.ExecContext(ctx, createKnownSet, setname)
	return err
}

const deleteExplicitLink = `-- name: DeleteExplicitLink :exec
delete from ExplicitLink where
    leftSet = ? and
    leftKey = ? and
    rightSet = ? and
    rightKey = ?
`

type DeleteExplicitLinkParams struct {
	Leftset  string
	Leftkey  string
	Rightset string
	Rightkey string
}

func (q *Queries) DeleteExplicitLink(ctx context.Context, arg DeleteExplicitLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteExplicitLink,
		arg.Leftset,
		arg.Leftkey,
		arg.Rightset,
		arg.Rightkey,
	)
	return err
}

const deleteKeysBefore = `-- name: DeleteKeysBefore :exec
delete from KnownKey where setname = ? and lastSeen < ?
`

type DeleteKeysBeforeParams struct {
	Setname  string
	Lastseen int64
}

func (q *Queries) DeleteKeysBefore(ctx context.Context, arg DeleteKeysBeforeParams) error {
	_, err := q.db.ExecContext(ctx, deleteKeysBefore, arg.Setname, arg.Lastseen)
	return err
}

const deleteKnownSets = `-- name: DeleteKnownSets :exec
delete from KnownSet where setname in (/*SLICE:sets*/?)
`

func (q *Queries) DeleteKnownSets(ctx context.Context, sets []string) error {
	query := deleteKnownSets
	var queryParams []interface{}
	if len(sets) > 0 {
		for _, v := range sets {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:sets*/?", strings.Repeat(",?", len(sets))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:sets*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getExplicitLinks = `-- name: GetExplicitLinks :many
select leftset, leftkey, rightset, rightkey from ExplicitLink
where (leftSet = ?1 and rightSet = ?2)
`

type GetExplicitLinksParams struct {
	Leftset  string
	Rightset string
}

func (q *Queries) GetExplicitLinks(ctx context.Context, arg GetExplicitLinksParams) ([]ExplicitLink, error) {
	rows, err := q.db.QueryContext(ctx, getExplicitLinks, arg.Leftset, arg.Rightset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExplicitLink
	for rows.Next() {
		var i ExplicitLink
		if err := rows.Scan(
			&i.Leftset,
			&i.Leftkey,
			&i.Rightset,
			&i.Rightkey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnownKeyBefore = `-- name: GetKnownKeyBefore :many
select setname, value, lastseen from KnownKey where lastSeen < ?
`

func (q *Queries) GetKnownKeyBefore(ctx context.Context, lastseen int64) ([]KnownKey, error) {
	rows, err := q.db.QueryContext(ctx, getKnownKeyBefore, lastseen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KnownKey
	for rows.Next() {
		var i KnownKey
		if err := rows.Scan(&i.Setname, &i.Value, &i.Lastseen); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnownKeys = `-- name: GetKnownKeys :many
select setname, value, lastseen from KnownKey where setname = ?
`

func (q *Queries) GetKnownKeys(ctx context.Context, setname string) ([]KnownKey, error) {
	rows, err := q.db.QueryContext(ctx, getKnownKeys, setname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KnownKey
	for rows.Next() {
		var i KnownKey
		if err := rows.Scan(&i.Setname, &i.Value, &i.Lastseen); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKnownSets = `-- name: GetKnownSets :many
select setname from KnownSet
`

func (q *Queries) GetKnownSets(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getKnownSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var setname string
		if err := rows.Scan(&setname); err != nil {
			return nil, err
		}
		items = append(items, setname)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
