// Code generated by sqlc-joins-gen. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"strings"
)

type queryMap[T any] struct {
	dict map[string]*T
	list []*T
}

func newQueryMap[T any]() queryMap[T] {
	return queryMap[T]{
		dict: make(map[string]*T),
	}
}

// Table: Course
type GetCourses struct {
	Id      int
	Name    string
	Section []*GetCourses0
}

// Table: Section
type GetCourses0 struct {
	Idx      int
	Name     string
	Courseid int
	Resource []*GetCourses00
}

// Table: Resource
type GetCourses00 struct {
	Idx            int
	Type           int
	Url            string
	Displaycontent string
	Courseid       int
	Sectionidx     int
	Chapter        []*GetCourses000
}

// Table: Chapter
type GetCourses000 struct {
	Id   int
	Name string
}

const getCoursesQuery = `select
"Course"."id" as "Course_id",
"Course"."name" as "Course_name",
"Section"."idx" as "Section_idx",
"Section"."name" as "Section_name",
"Section"."course_id" as "Section_course_id",
"Resource"."idx" as "Resource_idx",
"Resource"."type" as "Resource_type",
"Resource"."url" as "Resource_url",
"Resource"."display_content" as "Resource_display_content",
"Resource"."course_id" as "Resource_course_id",
"Resource"."section_idx" as "Resource_section_idx",
"Chapter"."id" as "Chapter_id",
"Chapter"."name" as "Chapter_name"
from "Course"
inner join "Section" on "Section"."course_id" = "Course"."id"
inner join "Resource" on "Resource"."course_id" = "Section"."course_id" and "Resource"."section_idx" = "Section"."idx"
inner join "Chapter" on "Chapter"."course_id" = "Resource"."course_id" and "Chapter"."section_idx" = "Resource"."section_idx" and "Chapter"."resource_idx" = "Resource"."idx"
where Course.id in ($0)

`

func (q *Queries) GetCourses(ctx context.Context, id []int) ([]*GetCourses, error) {
	queryStr := getCoursesQuery

	idJoined := ""
	for i, e := range id {
		if i > 0 {
			idJoined += ", "
		}
		idStr := fmt.Sprint(e)
		idJoined += idStr
	}
	queryStr = strings.Replace(queryStr, "$0", idJoined, 1)

	rows, err := q.db.QueryContext(ctx, queryStr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	getCoursesMap := newQueryMap[GetCourses]()
	getCourses0Map := newQueryMap[GetCourses0]()
	getCourses00Map := newQueryMap[GetCourses00]()
	getCourses000Map := newQueryMap[GetCourses000]()

	for rows.Next() {
		var getCourses GetCourses
		var getCourses0 GetCourses0
		var getCourses00 GetCourses00
		var getCourses000 GetCourses000

		err := rows.Scan(
			&getCourses.Id,
			&getCourses.Name,
			&getCourses0.Idx,
			&getCourses0.Name,
			&getCourses0.Courseid,
			&getCourses00.Idx,
			&getCourses00.Type,
			&getCourses00.Url,
			&getCourses00.Displaycontent,
			&getCourses00.Courseid,
			&getCourses00.Sectionidx,
			&getCourses000.Id,
			&getCourses000.Name,
		)
		if err != nil {
			return nil, err
		}

		getCoursesPkey := fmt.Sprint(getCourses.Id)
		getCoursesExisting, ok := getCoursesMap.dict[getCoursesPkey]
		if !ok {
			getCoursesExisting = &getCourses
			getCoursesMap.list = append(getCoursesMap.list, getCoursesExisting)
			getCoursesMap.dict[getCoursesPkey] = getCoursesExisting
		}

		getCourses0Pkey := fmt.Sprint(getCourses0.Idx, getCourses0.Courseid)
		getCourses0Existing, ok := getCourses0Map.dict[getCourses0Pkey]
		if !ok {
			getCourses0Existing = &getCourses0
			getCourses0Map.list = append(getCourses0Map.list, getCourses0Existing)
			getCourses0Map.dict[getCourses0Pkey] = getCourses0Existing
			getCoursesExisting.Section = append(getCoursesExisting.Section, getCourses0Existing)
		}

		getCourses00Pkey := fmt.Sprint(getCourses00.Idx, getCourses00.Courseid, getCourses00.Sectionidx)
		getCourses00Existing, ok := getCourses00Map.dict[getCourses00Pkey]
		if !ok {
			getCourses00Existing = &getCourses00
			getCourses00Map.list = append(getCourses00Map.list, getCourses00Existing)
			getCourses00Map.dict[getCourses00Pkey] = getCourses00Existing
			getCourses0Existing.Resource = append(getCourses0Existing.Resource, getCourses00Existing)
		}

		getCourses000Pkey := fmt.Sprint(getCourses000.Id)
		getCourses000Existing, ok := getCourses000Map.dict[getCourses000Pkey]
		if !ok {
			getCourses000Existing = &getCourses000
			getCourses000Map.list = append(getCourses000Map.list, getCourses000Existing)
			getCourses000Map.dict[getCourses000Pkey] = getCourses000Existing
			getCourses00Existing.Chapter = append(getCourses00Existing.Chapter, getCourses000Existing)
		}
	}

	err = rows.Close()
	if err != nil {
		return nil, err
	}
	err = rows.Err()
	if err != nil {
		return nil, err
	}
	return getCoursesMap.list, nil
}
