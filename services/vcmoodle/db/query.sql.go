// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const deleteAllChapters = `-- name: DeleteAllChapters :exec
delete from Chapter
`

func (q *Queries) DeleteAllChapters(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChapters)
	return err
}

const deleteAllCourses = `-- name: DeleteAllCourses :exec
delete from Course
`

func (q *Queries) DeleteAllCourses(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCourses)
	return err
}

const deleteAllResources = `-- name: DeleteAllResources :exec
delete from Resource
`

func (q *Queries) DeleteAllResources(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllResources)
	return err
}

const deleteAllSections = `-- name: DeleteAllSections :exec
delete from Section
`

func (q *Queries) DeleteAllSections(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSections)
	return err
}

const getCourseContent = `-- name: GetCourseContent :one
select content_html from Chapter where id = ?
`

func (q *Queries) GetCourseContent(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getCourseContent, id)
	var content_html string
	err := row.Scan(&content_html)
	return content_html, err
}

const noteChapter = `-- name: NoteChapter :exec
insert into Chapter(course_id, section_idx, resource_idx, id, name, content_html) values (?, ?, ?, ?, ?, ?)
on conflict (id) do update
    set course_id = excluded.course_id,
        section_idx = excluded.section_idx,
        resource_idx = excluded.resource_idx,
        name = excluded.name,
        content_html = excluded.content_html
`

type NoteChapterParams struct {
	CourseID    int64
	SectionIdx  int64
	ResourceIdx int64
	ID          int64
	Name        string
	ContentHtml string
}

func (q *Queries) NoteChapter(ctx context.Context, arg NoteChapterParams) error {
	_, err := q.db.ExecContext(ctx, noteChapter,
		arg.CourseID,
		arg.SectionIdx,
		arg.ResourceIdx,
		arg.ID,
		arg.Name,
		arg.ContentHtml,
	)
	return err
}

const noteCourse = `-- name: NoteCourse :exec
insert into Course(id, name) values (?, ?)
on conflict (id) do update
    set name = excluded.name
`

type NoteCourseParams struct {
	ID   int64
	Name string
}

func (q *Queries) NoteCourse(ctx context.Context, arg NoteCourseParams) error {
	_, err := q.db.ExecContext(ctx, noteCourse, arg.ID, arg.Name)
	return err
}

const noteResource = `-- name: NoteResource :exec
insert into Resource(course_id, section_idx, idx, type, url, display_content) values (?, ?, ?, ?, ?, ?)
on conflict (course_id, section_idx, idx) do update
    set type = excluded.type,
        url = excluded.url,
        display_content = excluded.display_content
`

type NoteResourceParams struct {
	CourseID       int64
	SectionIdx     int64
	Idx            int64
	Type           int64
	Url            string
	DisplayContent string
}

func (q *Queries) NoteResource(ctx context.Context, arg NoteResourceParams) error {
	_, err := q.db.ExecContext(ctx, noteResource,
		arg.CourseID,
		arg.SectionIdx,
		arg.Idx,
		arg.Type,
		arg.Url,
		arg.DisplayContent,
	)
	return err
}

const noteSection = `-- name: NoteSection :exec
insert into Section(course_id, idx, name) values (?, ?, ?)
on conflict (course_id, idx) do update
    set name = excluded.name
`

type NoteSectionParams struct {
	CourseID int64
	Idx      int64
	Name     string
}

func (q *Queries) NoteSection(ctx context.Context, arg NoteSectionParams) error {
	_, err := q.db.ExecContext(ctx, noteSection, arg.CourseID, arg.Idx, arg.Name)
	return err
}
