// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"strings"
)

const deleteAllChapters = `-- name: DeleteAllChapters :exec
delete from Chapter
`

func (q *Queries) DeleteAllChapters(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllChapters)
	return err
}

const deleteAllCourses = `-- name: DeleteAllCourses :exec
delete from Course
`

func (q *Queries) DeleteAllCourses(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllCourses)
	return err
}

const deleteAllResources = `-- name: DeleteAllResources :exec
delete from Resource
`

func (q *Queries) DeleteAllResources(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllResources)
	return err
}

const deleteAllSections = `-- name: DeleteAllSections :exec
delete from Section
`

func (q *Queries) DeleteAllSections(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllSections)
	return err
}

const getAllCourses = `-- name: GetAllCourses :many
select id, name from Course
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChapterContent = `-- name: GetChapterContent :one
select content_html from Chapter where id = ?
`

func (q *Queries) GetChapterContent(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, getChapterContent, id)
	var content_html string
	err := row.Scan(&content_html)
	return content_html, err
}

const getCourseSections = `-- name: GetCourseSections :many
select course_id, idx, name from Section where course_id = ?
`

func (q *Queries) GetCourseSections(ctx context.Context, courseID int64) ([]Section, error) {
	rows, err := q.db.QueryContext(ctx, getCourseSections, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(&i.CourseID, &i.Idx, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourses = `-- name: GetCourses :many

select id, name from Course where id in (/*SLICE:ids*/?)
`

// on conflict (id) do update
//
//	set course_id = excluded.course_id,
//	    section_idx = excluded.section_idx,
//	    resource_idx = excluded.resource_idx,
//	    name = excluded.name,
//	    content_html = excluded.content_html;
func (q *Queries) GetCourses(ctx context.Context, ids []int64) ([]Course, error) {
	query := getCourses
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileResource = `-- name: GetFileResource :one
select url from Resource where id = ? and type = 1
`

func (q *Queries) GetFileResource(ctx context.Context, id sql.NullInt64) (string, error) {
	row := q.db.QueryRowContext(ctx, getFileResource, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getResourceChapters = `-- name: GetResourceChapters :many
select course_id, section_idx, resource_idx, id, name, content_html from Chapter where
    course_id = ? and
    section_idx = ? and
    resource_idx = ?
`

type GetResourceChaptersParams struct {
	CourseID    int64
	SectionIdx  int64
	ResourceIdx int64
}

func (q *Queries) GetResourceChapters(ctx context.Context, arg GetResourceChaptersParams) ([]Chapter, error) {
	rows, err := q.db.QueryContext(ctx, getResourceChapters, arg.CourseID, arg.SectionIdx, arg.ResourceIdx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chapter
	for rows.Next() {
		var i Chapter
		if err := rows.Scan(
			&i.CourseID,
			&i.SectionIdx,
			&i.ResourceIdx,
			&i.ID,
			&i.Name,
			&i.ContentHtml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionResources = `-- name: GetSectionResources :many
select course_id, section_idx, idx, id, type, url, display_content from Resource where course_id = ? and section_idx = ?
`

type GetSectionResourcesParams struct {
	CourseID   int64
	SectionIdx int64
}

func (q *Queries) GetSectionResources(ctx context.Context, arg GetSectionResourcesParams) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getSectionResources, arg.CourseID, arg.SectionIdx)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.CourseID,
			&i.SectionIdx,
			&i.Idx,
			&i.ID,
			&i.Type,
			&i.Url,
			&i.DisplayContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const noteChapter = `-- name: NoteChapter :exec

insert into Chapter(course_id, section_idx, resource_idx, id, name, content_html) values (?, ?, ?, ?, ?, ?)
`

type NoteChapterParams struct {
	CourseID    int64
	SectionIdx  int64
	ResourceIdx int64
	ID          int64
	Name        string
	ContentHtml string
}

// on conflict (course_id, section_idx, idx) do update
//
//	set type = excluded.type,
//	    url = excluded.url,
//	    display_content = excluded.display_content;
func (q *Queries) NoteChapter(ctx context.Context, arg NoteChapterParams) error {
	_, err := q.db.ExecContext(ctx, noteChapter,
		arg.CourseID,
		arg.SectionIdx,
		arg.ResourceIdx,
		arg.ID,
		arg.Name,
		arg.ContentHtml,
	)
	return err
}

const noteCourse = `-- name: NoteCourse :exec
insert into Course(id, name) values (?, ?)
`

type NoteCourseParams struct {
	ID   int64
	Name string
}

func (q *Queries) NoteCourse(ctx context.Context, arg NoteCourseParams) error {
	_, err := q.db.ExecContext(ctx, noteCourse, arg.ID, arg.Name)
	return err
}

const noteResource = `-- name: NoteResource :exec

insert into Resource(course_id, section_idx, idx, id, type, url, display_content) values (?, ?, ?, ?, ?, ?, ?)
`

type NoteResourceParams struct {
	CourseID       int64
	SectionIdx     int64
	Idx            int64
	ID             sql.NullInt64
	Type           int64
	Url            string
	DisplayContent string
}

// on conflict (course_id, idx) do update
//
//	set name = excluded.name;
func (q *Queries) NoteResource(ctx context.Context, arg NoteResourceParams) error {
	_, err := q.db.ExecContext(ctx, noteResource,
		arg.CourseID,
		arg.SectionIdx,
		arg.Idx,
		arg.ID,
		arg.Type,
		arg.Url,
		arg.DisplayContent,
	)
	return err
}

const noteSection = `-- name: NoteSection :exec

insert into Section(course_id, idx, name) values (?, ?, ?)
`

type NoteSectionParams struct {
	CourseID int64
	Idx      int64
	Name     string
}

// on conflict (id) do update
//
//	set name = excluded.name;
func (q *Queries) NoteSection(ctx context.Context, arg NoteSectionParams) error {
	_, err := q.db.ExecContext(ctx, noteSection, arg.CourseID, arg.Idx, arg.Name)
	return err
}
