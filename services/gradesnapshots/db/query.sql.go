// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createGradeSnapshot = `-- name: CreateGradeSnapshot :exec
insert into GradeSnapshot(userCourseId, time, value)
values (?, ?, ?)
`

type CreateGradeSnapshotParams struct {
	Usercourseid int64
	Time         int64
	Value        float64
}

func (q *Queries) CreateGradeSnapshot(ctx context.Context, arg CreateGradeSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, createGradeSnapshot, arg.Usercourseid, arg.Time, arg.Value)
	return err
}

const createUserCourse = `-- name: CreateUserCourse :one
insert into UserCourse(user, course)
values (?, ?)
on conflict do nothing
returning id
`

type CreateUserCourseParams struct {
	User   string
	Course string
}

func (q *Queries) CreateUserCourse(ctx context.Context, arg CreateUserCourseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUserCourse, arg.User, arg.Course)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteGradeSnapshotsAfter = `-- name: DeleteGradeSnapshotsAfter :exec
delete from GradeSnapshot where time > ?1
`

func (q *Queries) DeleteGradeSnapshotsAfter(ctx context.Context, after int64) error {
	_, err := q.db.ExecContext(ctx, deleteGradeSnapshotsAfter, after)
	return err
}

const getGradeSnapshots = `-- name: GetGradeSnapshots :many
select FoundCourses.course, time, value from GradeSnapshot
inner join (
    select id, user, course from UserCourse where user = ?
) as FoundCourses
    on FoundCourses.id = userCourseId
order by (FoundCourses.course, time)
`

type GetGradeSnapshotsRow struct {
	Course string
	Time   int64
	Value  float64
}

func (q *Queries) GetGradeSnapshots(ctx context.Context, user string) ([]GetGradeSnapshotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGradeSnapshots, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGradeSnapshotsRow
	for rows.Next() {
		var i GetGradeSnapshotsRow
		if err := rows.Scan(&i.Course, &i.Time, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
