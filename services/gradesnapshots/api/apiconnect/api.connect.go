// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/gradesnapshots/api/api.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	api "vcassist-backend/services/gradesnapshots/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GradeSnapshotsServiceName is the fully-qualified name of the GradeSnapshotsService service.
	GradeSnapshotsServiceName = "services.gradesnapshots.api.GradeSnapshotsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GradeSnapshotsServicePushProcedure is the fully-qualified name of the GradeSnapshotsService's
	// Push RPC.
	GradeSnapshotsServicePushProcedure = "/services.gradesnapshots.api.GradeSnapshotsService/Push"
	// GradeSnapshotsServicePullProcedure is the fully-qualified name of the GradeSnapshotsService's
	// Pull RPC.
	GradeSnapshotsServicePullProcedure = "/services.gradesnapshots.api.GradeSnapshotsService/Pull"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gradeSnapshotsServiceServiceDescriptor    = api.File_services_gradesnapshots_api_api_proto.Services().ByName("GradeSnapshotsService")
	gradeSnapshotsServicePushMethodDescriptor = gradeSnapshotsServiceServiceDescriptor.Methods().ByName("Push")
	gradeSnapshotsServicePullMethodDescriptor = gradeSnapshotsServiceServiceDescriptor.Methods().ByName("Pull")
)

// GradeSnapshotsServiceClient is a client for the services.gradesnapshots.api.GradeSnapshotsService
// service.
type GradeSnapshotsServiceClient interface {
	Push(context.Context, *connect.Request[api.PushRequest]) (*connect.Response[api.PushResponse], error)
	Pull(context.Context, *connect.Request[api.PullRequest]) (*connect.Response[api.PullResponse], error)
}

// NewGradeSnapshotsServiceClient constructs a client for the
// services.gradesnapshots.api.GradeSnapshotsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGradeSnapshotsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GradeSnapshotsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gradeSnapshotsServiceClient{
		push: connect.NewClient[api.PushRequest, api.PushResponse](
			httpClient,
			baseURL+GradeSnapshotsServicePushProcedure,
			connect.WithSchema(gradeSnapshotsServicePushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pull: connect.NewClient[api.PullRequest, api.PullResponse](
			httpClient,
			baseURL+GradeSnapshotsServicePullProcedure,
			connect.WithSchema(gradeSnapshotsServicePullMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gradeSnapshotsServiceClient implements GradeSnapshotsServiceClient.
type gradeSnapshotsServiceClient struct {
	push *connect.Client[api.PushRequest, api.PushResponse]
	pull *connect.Client[api.PullRequest, api.PullResponse]
}

// Push calls services.gradesnapshots.api.GradeSnapshotsService.Push.
func (c *gradeSnapshotsServiceClient) Push(ctx context.Context, req *connect.Request[api.PushRequest]) (*connect.Response[api.PushResponse], error) {
	return c.push.CallUnary(ctx, req)
}

// Pull calls services.gradesnapshots.api.GradeSnapshotsService.Pull.
func (c *gradeSnapshotsServiceClient) Pull(ctx context.Context, req *connect.Request[api.PullRequest]) (*connect.Response[api.PullResponse], error) {
	return c.pull.CallUnary(ctx, req)
}

// GradeSnapshotsServiceHandler is an implementation of the
// services.gradesnapshots.api.GradeSnapshotsService service.
type GradeSnapshotsServiceHandler interface {
	Push(context.Context, *connect.Request[api.PushRequest]) (*connect.Response[api.PushResponse], error)
	Pull(context.Context, *connect.Request[api.PullRequest]) (*connect.Response[api.PullResponse], error)
}

// NewGradeSnapshotsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGradeSnapshotsServiceHandler(svc GradeSnapshotsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gradeSnapshotsServicePushHandler := connect.NewUnaryHandler(
		GradeSnapshotsServicePushProcedure,
		svc.Push,
		connect.WithSchema(gradeSnapshotsServicePushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gradeSnapshotsServicePullHandler := connect.NewUnaryHandler(
		GradeSnapshotsServicePullProcedure,
		svc.Pull,
		connect.WithSchema(gradeSnapshotsServicePullMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.gradesnapshots.api.GradeSnapshotsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GradeSnapshotsServicePushProcedure:
			gradeSnapshotsServicePushHandler.ServeHTTP(w, r)
		case GradeSnapshotsServicePullProcedure:
			gradeSnapshotsServicePullHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGradeSnapshotsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGradeSnapshotsServiceHandler struct{}

func (UnimplementedGradeSnapshotsServiceHandler) Push(context.Context, *connect.Request[api.PushRequest]) (*connect.Response[api.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.gradesnapshots.api.GradeSnapshotsService.Push is not implemented"))
}

func (UnimplementedGradeSnapshotsServiceHandler) Pull(context.Context, *connect.Request[api.PullRequest]) (*connect.Response[api.PullResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.gradesnapshots.api.GradeSnapshotsService.Pull is not implemented"))
}
