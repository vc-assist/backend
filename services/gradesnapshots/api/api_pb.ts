// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file services/gradesnapshots/api/api.proto (package services.gradesnapshots.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message services.gradesnapshots.api.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * @generated from field: int64 time = 1;
   */
  time = protoInt64.zero;

  /**
   * @generated from field: float value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot | PlainMessage<Snapshot> | undefined, b: Snapshot | PlainMessage<Snapshot> | undefined): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}

/**
 * @generated from message services.gradesnapshots.api.CourseSnapshot
 */
export class CourseSnapshot extends Message<CourseSnapshot> {
  /**
   * @generated from field: string course = 1;
   */
  course = "";

  /**
   * @generated from field: services.gradesnapshots.api.Snapshot snapshot = 2;
   */
  snapshot?: Snapshot;

  constructor(data?: PartialMessage<CourseSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.CourseSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "course", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "snapshot", kind: "message", T: Snapshot },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseSnapshot {
    return new CourseSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseSnapshot {
    return new CourseSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseSnapshot {
    return new CourseSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: CourseSnapshot | PlainMessage<CourseSnapshot> | undefined, b: CourseSnapshot | PlainMessage<CourseSnapshot> | undefined): boolean {
    return proto3.util.equals(CourseSnapshot, a, b);
  }
}

/**
 * @generated from message services.gradesnapshots.api.UserSnapshot
 */
export class UserSnapshot extends Message<UserSnapshot> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: repeated services.gradesnapshots.api.CourseSnapshot courses = 2;
   */
  courses: CourseSnapshot[] = [];

  constructor(data?: PartialMessage<UserSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.UserSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "courses", kind: "message", T: CourseSnapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSnapshot {
    return new UserSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSnapshot {
    return new UserSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSnapshot {
    return new UserSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: UserSnapshot | PlainMessage<UserSnapshot> | undefined, b: UserSnapshot | PlainMessage<UserSnapshot> | undefined): boolean {
    return proto3.util.equals(UserSnapshot, a, b);
  }
}

/**
 * Push
 *
 * @generated from message services.gradesnapshots.api.PushRequest
 */
export class PushRequest extends Message<PushRequest> {
  /**
   * @generated from field: repeated services.gradesnapshots.api.UserSnapshot users = 1;
   */
  users: UserSnapshot[] = [];

  constructor(data?: PartialMessage<PushRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.PushRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: UserSnapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushRequest {
    return new PushRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushRequest {
    return new PushRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushRequest {
    return new PushRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PushRequest | PlainMessage<PushRequest> | undefined, b: PushRequest | PlainMessage<PushRequest> | undefined): boolean {
    return proto3.util.equals(PushRequest, a, b);
  }
}

/**
 * @generated from message services.gradesnapshots.api.PushResponse
 */
export class PushResponse extends Message<PushResponse> {
  constructor(data?: PartialMessage<PushResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.PushResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushResponse {
    return new PushResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushResponse {
    return new PushResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushResponse {
    return new PushResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PushResponse | PlainMessage<PushResponse> | undefined, b: PushResponse | PlainMessage<PushResponse> | undefined): boolean {
    return proto3.util.equals(PushResponse, a, b);
  }
}

/**
 * Pull
 *
 * @generated from message services.gradesnapshots.api.CourseSnapshotList
 */
export class CourseSnapshotList extends Message<CourseSnapshotList> {
  /**
   * @generated from field: string course = 1;
   */
  course = "";

  /**
   * @generated from field: repeated services.gradesnapshots.api.Snapshot snapshots = 2;
   */
  snapshots: Snapshot[] = [];

  constructor(data?: PartialMessage<CourseSnapshotList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.CourseSnapshotList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "course", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "snapshots", kind: "message", T: Snapshot, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseSnapshotList {
    return new CourseSnapshotList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseSnapshotList {
    return new CourseSnapshotList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseSnapshotList {
    return new CourseSnapshotList().fromJsonString(jsonString, options);
  }

  static equals(a: CourseSnapshotList | PlainMessage<CourseSnapshotList> | undefined, b: CourseSnapshotList | PlainMessage<CourseSnapshotList> | undefined): boolean {
    return proto3.util.equals(CourseSnapshotList, a, b);
  }
}

/**
 * @generated from message services.gradesnapshots.api.PullRequest
 */
export class PullRequest extends Message<PullRequest> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  constructor(data?: PartialMessage<PullRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.PullRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequest {
    return new PullRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequest {
    return new PullRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PullRequest | PlainMessage<PullRequest> | undefined, b: PullRequest | PlainMessage<PullRequest> | undefined): boolean {
    return proto3.util.equals(PullRequest, a, b);
  }
}

/**
 * @generated from message services.gradesnapshots.api.PullResponse
 */
export class PullResponse extends Message<PullResponse> {
  /**
   * @generated from field: repeated services.gradesnapshots.api.CourseSnapshotList courses = 1;
   */
  courses: CourseSnapshotList[] = [];

  constructor(data?: PartialMessage<PullResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "services.gradesnapshots.api.PullResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: CourseSnapshotList, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullResponse {
    return new PullResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullResponse {
    return new PullResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullResponse {
    return new PullResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PullResponse | PlainMessage<PullResponse> | undefined, b: PullResponse | PlainMessage<PullResponse> | undefined): boolean {
    return proto3.util.equals(PullResponse, a, b);
  }
}

