// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
	"strings"
)

const createGradeSnapshot = `-- name: CreateGradeSnapshot :exec
insert into GradeSnapshot(user_course_id, time, value)
values (?, ?, ?)
`

type CreateGradeSnapshotParams struct {
	UserCourseID int64
	Time         int64
	Value        float64
}

func (q *Queries) CreateGradeSnapshot(ctx context.Context, arg CreateGradeSnapshotParams) error {
	_, err := q.db.ExecContext(ctx, createGradeSnapshot, arg.UserCourseID, arg.Time, arg.Value)
	return err
}

const createUserCourse = `-- name: CreateUserCourse :exec
insert into UserCourse(user, course)
values (?, ?)
on conflict do nothing
`

type CreateUserCourseParams struct {
	User   string
	Course string
}

func (q *Queries) CreateUserCourse(ctx context.Context, arg CreateUserCourseParams) error {
	_, err := q.db.ExecContext(ctx, createUserCourse, arg.User, arg.Course)
	return err
}

const deleteGradeSnapshotsIn = `-- name: DeleteGradeSnapshotsIn :exec
delete from GradeSnapshot where
rowid in (
    select rowid from GradeSnapshot as SubSnapshot
    inner join (
        select id, user, course from UserCourse where user in (/*SLICE:users*/?)
    ) as FoundCourses
        on FoundCourses.id = SubSnapshot.user_course_id
    and SubSnapshot.time > ?2
    and SubSnapshot.time < ?3
)
`

type DeleteGradeSnapshotsInParams struct {
	Users  []string
	After  int64
	Before int64
}

func (q *Queries) DeleteGradeSnapshotsIn(ctx context.Context, arg DeleteGradeSnapshotsInParams) error {
	query := deleteGradeSnapshotsIn
	var queryParams []interface{}
	if len(arg.Users) > 0 {
		for _, v := range arg.Users {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:users*/?", strings.Repeat(",?", len(arg.Users))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:users*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.After)
	queryParams = append(queryParams, arg.Before)
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getGradeSnapshots = `-- name: GetGradeSnapshots :many
select FoundCourses.course, json_group_array(json_array(time, value)) as grades from GradeSnapshot
inner join (
    select id, user, course from UserCourse where user = ?
) as FoundCourses
    on FoundCourses.id = user_course_id
group by FoundCourses.course
`

type GetGradeSnapshotsRow struct {
	Course string
	Grades interface{}
}

func (q *Queries) GetGradeSnapshots(ctx context.Context, user string) ([]GetGradeSnapshotsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGradeSnapshots, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGradeSnapshotsRow
	for rows.Next() {
		var i GetGradeSnapshotsRow
		if err := rows.Scan(&i.Course, &i.Grades); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserCourseId = `-- name: GetUserCourseId :one
select id from UserCourse where user = ? and course = ?
`

type GetUserCourseIdParams struct {
	User   string
	Course string
}

func (q *Queries) GetUserCourseId(ctx context.Context, arg GetUserCourseIdParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserCourseId, arg.User, arg.Course)
	var id int64
	err := row.Scan(&id)
	return id, err
}
