// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file lib/platforms/powerschool/query_all_students.proto (package lib.platforms.powerschool, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message lib.platforms.powerschool.SchoolData
 */
export class SchoolData extends Message<SchoolData> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string phone = 2;
   */
  phone = "";

  /**
   * @generated from field: string fax = 3;
   */
  fax = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: string streetAddress = 5;
   */
  streetAddress = "";

  /**
   * @generated from field: string city = 6;
   */
  city = "";

  /**
   * @generated from field: string state = 7;
   */
  state = "";

  /**
   * @generated from field: string zip = 8;
   */
  zip = "";

  /**
   * @generated from field: string country = 9;
   */
  country = "";

  constructor(data?: PartialMessage<SchoolData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.platforms.powerschool.SchoolData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "streetAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchoolData {
    return new SchoolData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchoolData {
    return new SchoolData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchoolData {
    return new SchoolData().fromJsonString(jsonString, options);
  }

  static equals(a: SchoolData | PlainMessage<SchoolData> | undefined, b: SchoolData | PlainMessage<SchoolData> | undefined): boolean {
    return proto3.util.equals(SchoolData, a, b);
  }
}

/**
 * @generated from message lib.platforms.powerschool.Bulletin
 */
export class Bulletin extends Message<Bulletin> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string start_date = 2;
   */
  startDate = "";

  /**
   * @generated from field: string end_date = 3;
   */
  endDate = "";

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  constructor(data?: PartialMessage<Bulletin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.platforms.powerschool.Bulletin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "end_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bulletin {
    return new Bulletin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bulletin {
    return new Bulletin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bulletin {
    return new Bulletin().fromJsonString(jsonString, options);
  }

  static equals(a: Bulletin | PlainMessage<Bulletin> | undefined, b: Bulletin | PlainMessage<Bulletin> | undefined): boolean {
    return proto3.util.equals(Bulletin, a, b);
  }
}

/**
 * @generated from message lib.platforms.powerschool.StudentProfile
 */
export class StudentProfile extends Message<StudentProfile> {
  /**
   * @generated from field: string guid = 1;
   */
  guid = "";

  /**
   * @generated from field: string current_gpa = 2 [json_name = "currentGPA"];
   */
  currentGpa = "";

  /**
   * @generated from field: string first_name = 3;
   */
  firstName = "";

  /**
   * @generated from field: string last_name = 4;
   */
  lastName = "";

  /**
   * @generated from field: int32 grade_level = 5;
   */
  gradeLevel = 0;

  /**
   * @generated from field: repeated lib.platforms.powerschool.SchoolData schools = 6;
   */
  schools: SchoolData[] = [];

  /**
   * @generated from field: repeated lib.platforms.powerschool.Bulletin bulletins = 7;
   */
  bulletins: Bulletin[] = [];

  constructor(data?: PartialMessage<StudentProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.platforms.powerschool.StudentProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_gpa", jsonName: "currentGPA", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "grade_level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "schools", kind: "message", T: SchoolData, repeated: true },
    { no: 7, name: "bulletins", kind: "message", T: Bulletin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StudentProfile {
    return new StudentProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StudentProfile {
    return new StudentProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StudentProfile {
    return new StudentProfile().fromJsonString(jsonString, options);
  }

  static equals(a: StudentProfile | PlainMessage<StudentProfile> | undefined, b: StudentProfile | PlainMessage<StudentProfile> | undefined): boolean {
    return proto3.util.equals(StudentProfile, a, b);
  }
}

/**
 * @generated from message lib.platforms.powerschool.AllStudents
 */
export class AllStudents extends Message<AllStudents> {
  /**
   * @generated from field: repeated lib.platforms.powerschool.StudentProfile students = 1;
   */
  students: StudentProfile[] = [];

  constructor(data?: PartialMessage<AllStudents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.platforms.powerschool.AllStudents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "students", kind: "message", T: StudentProfile, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllStudents {
    return new AllStudents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllStudents {
    return new AllStudents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllStudents {
    return new AllStudents().fromJsonString(jsonString, options);
  }

  static equals(a: AllStudents | PlainMessage<AllStudents> | undefined, b: AllStudents | PlainMessage<AllStudents> | undefined): boolean {
    return proto3.util.equals(AllStudents, a, b);
  }
}

/**
 * @generated from message lib.platforms.powerschool.GetAllStudentsInput
 */
export class GetAllStudentsInput extends Message<GetAllStudentsInput> {
  constructor(data?: PartialMessage<GetAllStudentsInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.platforms.powerschool.GetAllStudentsInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllStudentsInput {
    return new GetAllStudentsInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllStudentsInput {
    return new GetAllStudentsInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllStudentsInput {
    return new GetAllStudentsInput().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllStudentsInput | PlainMessage<GetAllStudentsInput> | undefined, b: GetAllStudentsInput | PlainMessage<GetAllStudentsInput> | undefined): boolean {
    return proto3.util.equals(GetAllStudentsInput, a, b);
  }
}

