// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file lib/scrapers/powerschool/query_student_data.proto (package lib.scrapers.powerschool, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message lib.scrapers.powerschool.TermData
 */
export class TermData extends Message<TermData> {
  /**
   * @generated from field: string start = 1;
   */
  start = "";

  /**
   * @generated from field: string end = 2;
   */
  end = "";

  /**
   * @generated from field: lib.scrapers.powerschool.TermData.FinalGrade final_grade = 3;
   */
  finalGrade?: TermData_FinalGrade;

  constructor(data?: PartialMessage<TermData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.TermData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "final_grade", kind: "message", T: TermData_FinalGrade },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TermData {
    return new TermData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TermData {
    return new TermData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TermData {
    return new TermData().fromJsonString(jsonString, options);
  }

  static equals(a: TermData | PlainMessage<TermData> | undefined, b: TermData | PlainMessage<TermData> | undefined): boolean {
    return proto3.util.equals(TermData, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.TermData.FinalGrade
 */
export class TermData_FinalGrade extends Message<TermData_FinalGrade> {
  /**
   * @generated from field: int32 percent = 1;
   */
  percent = 0;

  /**
   * @generated from field: bool in_progress_status = 2;
   */
  inProgressStatus = false;

  constructor(data?: PartialMessage<TermData_FinalGrade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.TermData.FinalGrade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "percent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "in_progress_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TermData_FinalGrade {
    return new TermData_FinalGrade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TermData_FinalGrade {
    return new TermData_FinalGrade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TermData_FinalGrade {
    return new TermData_FinalGrade().fromJsonString(jsonString, options);
  }

  static equals(a: TermData_FinalGrade | PlainMessage<TermData_FinalGrade> | undefined, b: TermData_FinalGrade | PlainMessage<TermData_FinalGrade> | undefined): boolean {
    return proto3.util.equals(TermData_FinalGrade, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.AssignmentData
 */
export class AssignmentData extends Message<AssignmentData> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string category = 2;
   */
  category = "";

  /**
   * @generated from field: string due_date = 3;
   */
  dueDate = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: int32 points_earned = 5;
   */
  pointsEarned = 0;

  /**
   * @generated from field: int32 points_possible = 6;
   */
  pointsPossible = 0;

  /**
   * @generated from field: bool attribute_missing = 7;
   */
  attributeMissing = false;

  /**
   * @generated from field: bool attribute_late = 8;
   */
  attributeLate = false;

  /**
   * @generated from field: bool attribute_collected = 9;
   */
  attributeCollected = false;

  /**
   * @generated from field: bool attribute_exempt = 10;
   */
  attributeExempt = false;

  /**
   * @generated from field: bool attribute_incomplete = 11;
   */
  attributeIncomplete = false;

  constructor(data?: PartialMessage<AssignmentData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.AssignmentData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "due_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "points_earned", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "points_possible", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "attribute_missing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "attribute_late", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "attribute_collected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "attribute_exempt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "attribute_incomplete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentData {
    return new AssignmentData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentData {
    return new AssignmentData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentData {
    return new AssignmentData().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentData | PlainMessage<AssignmentData> | undefined, b: AssignmentData | PlainMessage<AssignmentData> | undefined): boolean {
    return proto3.util.equals(AssignmentData, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.CourseData
 */
export class CourseData extends Message<CourseData> {
  /**
   * @generated from field: string guid = 1;
   */
  guid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string period = 3;
   */
  period = "";

  /**
   * @generated from field: string teacher_first_name = 4;
   */
  teacherFirstName = "";

  /**
   * @generated from field: string teacher_last_name = 5;
   */
  teacherLastName = "";

  /**
   * @generated from field: string teacher_email = 6;
   */
  teacherEmail = "";

  /**
   * @generated from field: string room = 7;
   */
  room = "";

  /**
   * @generated from field: repeated lib.scrapers.powerschool.AssignmentData assignments = 8;
   */
  assignments: AssignmentData[] = [];

  /**
   * @generated from field: repeated lib.scrapers.powerschool.TermData terms = 9;
   */
  terms: TermData[] = [];

  constructor(data?: PartialMessage<CourseData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.CourseData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "teacher_first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "teacher_last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "teacher_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "assignments", kind: "message", T: AssignmentData, repeated: true },
    { no: 9, name: "terms", kind: "message", T: TermData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseData {
    return new CourseData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseData {
    return new CourseData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseData {
    return new CourseData().fromJsonString(jsonString, options);
  }

  static equals(a: CourseData | PlainMessage<CourseData> | undefined, b: CourseData | PlainMessage<CourseData> | undefined): boolean {
    return proto3.util.equals(CourseData, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.StudentData
 */
export class StudentData extends Message<StudentData> {
  /**
   * @generated from field: lib.scrapers.powerschool.StudentData.Student student = 1 [json_name = "guid"];
   */
  student?: StudentData_Student;

  constructor(data?: PartialMessage<StudentData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.StudentData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student", jsonName: "guid", kind: "message", T: StudentData_Student },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StudentData {
    return new StudentData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StudentData {
    return new StudentData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StudentData {
    return new StudentData().fromJsonString(jsonString, options);
  }

  static equals(a: StudentData | PlainMessage<StudentData> | undefined, b: StudentData | PlainMessage<StudentData> | undefined): boolean {
    return proto3.util.equals(StudentData, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.StudentData.Student
 */
export class StudentData_Student extends Message<StudentData_Student> {
  /**
   * @generated from field: repeated lib.scrapers.powerschool.CourseData sections = 1;
   */
  sections: CourseData[] = [];

  constructor(data?: PartialMessage<StudentData_Student>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.StudentData.Student";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sections", kind: "message", T: CourseData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StudentData_Student {
    return new StudentData_Student().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StudentData_Student {
    return new StudentData_Student().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StudentData_Student {
    return new StudentData_Student().fromJsonString(jsonString, options);
  }

  static equals(a: StudentData_Student | PlainMessage<StudentData_Student> | undefined, b: StudentData_Student | PlainMessage<StudentData_Student> | undefined): boolean {
    return proto3.util.equals(StudentData_Student, a, b);
  }
}

/**
 * @generated from message lib.scrapers.powerschool.GetStudentDataInput
 */
export class GetStudentDataInput extends Message<GetStudentDataInput> {
  /**
   * @generated from field: string guid = 1;
   */
  guid = "";

  constructor(data?: PartialMessage<GetStudentDataInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lib.scrapers.powerschool.GetStudentDataInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataInput {
    return new GetStudentDataInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataInput {
    return new GetStudentDataInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataInput {
    return new GetStudentDataInput().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataInput | PlainMessage<GetStudentDataInput> | undefined, b: GetStudentDataInput | PlainMessage<GetStudentDataInput> | undefined): boolean {
    return proto3.util.equals(GetStudentDataInput, a, b);
  }
}

