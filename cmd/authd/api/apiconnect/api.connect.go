// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cmd/authd/api/api.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	http "net/http"
	api "vcassist-backend/cmd/authd/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "cmd.authd.api.AuthService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor = api.File_cmd_authd_api_api_proto.Services().ByName("AuthService")
)

// AuthServiceClient is a client for the cmd.authd.api.AuthService service.
type AuthServiceClient interface {
}

// NewAuthServiceClient constructs a client for the cmd.authd.api.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	return &authServiceClient{}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
}

// AuthServiceHandler is an implementation of the cmd.authd.api.AuthService service.
type AuthServiceHandler interface {
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/cmd.authd.api.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}
