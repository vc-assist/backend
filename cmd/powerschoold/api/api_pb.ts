// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file cmd/powerschoold/api/api.proto (package cmd.powerschoold.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StudentProfile } from "../../../lib/platforms/powerschool/query_all_students_pb.js";
import { CourseMeetingList } from "../../../lib/platforms/powerschool/query_schedule_pb.js";
import { CourseData } from "../../../lib/platforms/powerschool/query_student_data_pb.js";

/**
 * GetAuthStatus
 *
 * @generated from message cmd.powerschoold.api.GetAuthStatusRequest
 */
export class GetAuthStatusRequest extends Message<GetAuthStatusRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  constructor(data?: PartialMessage<GetAuthStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetAuthStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthStatusRequest | PlainMessage<GetAuthStatusRequest> | undefined, b: GetAuthStatusRequest | PlainMessage<GetAuthStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthStatusRequest, a, b);
  }
}

/**
 * @generated from message cmd.powerschoold.api.GetAuthStatusResponse
 */
export class GetAuthStatusResponse extends Message<GetAuthStatusResponse> {
  /**
   * @generated from field: bool is_authenticated = 1;
   */
  isAuthenticated = false;

  constructor(data?: PartialMessage<GetAuthStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetAuthStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_authenticated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthStatusResponse | PlainMessage<GetAuthStatusResponse> | undefined, b: GetAuthStatusResponse | PlainMessage<GetAuthStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthStatusResponse, a, b);
  }
}

/**
 * GetAuthFlow
 *
 * @generated from message cmd.powerschoold.api.OAuthFlow
 */
export class OAuthFlow extends Message<OAuthFlow> {
  /**
   * @generated from field: string base_login_url = 1;
   */
  baseLoginUrl = "";

  /**
   * @generated from field: string access_type = 2;
   */
  accessType = "";

  /**
   * @generated from field: string scope = 3;
   */
  scope = "";

  /**
   * @generated from field: string redirect_uri = 4;
   */
  redirectUri = "";

  /**
   * @generated from field: string code_verifier = 5;
   */
  codeVerifier = "";

  /**
   * @generated from field: string client_id = 6;
   */
  clientId = "";

  /**
   * @generated from field: string token_request_url = 7;
   */
  tokenRequestUrl = "";

  constructor(data?: PartialMessage<OAuthFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.OAuthFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_login_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_verifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "token_request_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthFlow {
    return new OAuthFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthFlow | PlainMessage<OAuthFlow> | undefined, b: OAuthFlow | PlainMessage<OAuthFlow> | undefined): boolean {
    return proto3.util.equals(OAuthFlow, a, b);
  }
}

/**
 * @generated from message cmd.powerschoold.api.GetAuthFlowRequest
 */
export class GetAuthFlowRequest extends Message<GetAuthFlowRequest> {
  constructor(data?: PartialMessage<GetAuthFlowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetAuthFlowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthFlowRequest {
    return new GetAuthFlowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthFlowRequest {
    return new GetAuthFlowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthFlowRequest {
    return new GetAuthFlowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthFlowRequest | PlainMessage<GetAuthFlowRequest> | undefined, b: GetAuthFlowRequest | PlainMessage<GetAuthFlowRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthFlowRequest, a, b);
  }
}

/**
 * @generated from message cmd.powerschoold.api.GetAuthFlowResponse
 */
export class GetAuthFlowResponse extends Message<GetAuthFlowResponse> {
  /**
   * @generated from oneof cmd.powerschoold.api.GetAuthFlowResponse.flow
   */
  flow: {
    /**
     * @generated from field: cmd.powerschoold.api.OAuthFlow oauth = 1;
     */
    value: OAuthFlow;
    case: "oauth";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetAuthFlowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetAuthFlowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "oauth", kind: "message", T: OAuthFlow, oneof: "flow" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthFlowResponse {
    return new GetAuthFlowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthFlowResponse {
    return new GetAuthFlowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthFlowResponse {
    return new GetAuthFlowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthFlowResponse | PlainMessage<GetAuthFlowResponse> | undefined, b: GetAuthFlowResponse | PlainMessage<GetAuthFlowResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthFlowResponse, a, b);
  }
}

/**
 * ProvideOAuth
 *
 * @generated from message cmd.powerschoold.api.ProvideOAuthRequest
 */
export class ProvideOAuthRequest extends Message<ProvideOAuthRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  /**
   * @generated from field: string token = 2;
   */
  token = "";

  constructor(data?: PartialMessage<ProvideOAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.ProvideOAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideOAuthRequest {
    return new ProvideOAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideOAuthRequest {
    return new ProvideOAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideOAuthRequest {
    return new ProvideOAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideOAuthRequest | PlainMessage<ProvideOAuthRequest> | undefined, b: ProvideOAuthRequest | PlainMessage<ProvideOAuthRequest> | undefined): boolean {
    return proto3.util.equals(ProvideOAuthRequest, a, b);
  }
}

/**
 * @generated from message cmd.powerschoold.api.ProvideOAuthResponse
 */
export class ProvideOAuthResponse extends Message<ProvideOAuthResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<ProvideOAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.ProvideOAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideOAuthResponse {
    return new ProvideOAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideOAuthResponse {
    return new ProvideOAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideOAuthResponse {
    return new ProvideOAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideOAuthResponse | PlainMessage<ProvideOAuthResponse> | undefined, b: ProvideOAuthResponse | PlainMessage<ProvideOAuthResponse> | undefined): boolean {
    return proto3.util.equals(ProvideOAuthResponse, a, b);
  }
}

/**
 * GetStudentData
 *
 * @generated from message cmd.powerschoold.api.GetStudentDataRequest
 */
export class GetStudentDataRequest extends Message<GetStudentDataRequest> {
  /**
   * @generated from field: string student_id = 1;
   */
  studentId = "";

  constructor(data?: PartialMessage<GetStudentDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetStudentDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "student_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataRequest {
    return new GetStudentDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined, b: GetStudentDataRequest | PlainMessage<GetStudentDataRequest> | undefined): boolean {
    return proto3.util.equals(GetStudentDataRequest, a, b);
  }
}

/**
 * @generated from message cmd.powerschoold.api.GetStudentDataResponse
 */
export class GetStudentDataResponse extends Message<GetStudentDataResponse> {
  /**
   * @generated from field: lib.platforms.powerschool.StudentProfile profile = 1;
   */
  profile?: StudentProfile;

  /**
   * @generated from field: lib.platforms.powerschool.CourseMeetingList meetings = 2;
   */
  meetings?: CourseMeetingList;

  /**
   * @generated from field: repeated lib.platforms.powerschool.CourseData course_data = 3;
   */
  courseData: CourseData[] = [];

  constructor(data?: PartialMessage<GetStudentDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cmd.powerschoold.api.GetStudentDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: StudentProfile },
    { no: 2, name: "meetings", kind: "message", T: CourseMeetingList },
    { no: 3, name: "course_data", kind: "message", T: CourseData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStudentDataResponse {
    return new GetStudentDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined, b: GetStudentDataResponse | PlainMessage<GetStudentDataResponse> | undefined): boolean {
    return proto3.util.equals(GetStudentDataResponse, a, b);
  }
}

