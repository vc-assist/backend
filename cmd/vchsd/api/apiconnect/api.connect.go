// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cmd/vchsd/api/api.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	api "vcassist-backend/cmd/vchsd/api"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VchsServiceName is the fully-qualified name of the VchsService service.
	VchsServiceName = "cmd.vchsd.api.VchsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VchsServiceGetCredentialStatusProcedure is the fully-qualified name of the VchsService's
	// GetCredentialStatus RPC.
	VchsServiceGetCredentialStatusProcedure = "/cmd.vchsd.api.VchsService/GetCredentialStatus"
	// VchsServiceProvidePowerschoolTokenProcedure is the fully-qualified name of the VchsService's
	// ProvidePowerschoolToken RPC.
	VchsServiceProvidePowerschoolTokenProcedure = "/cmd.vchsd.api.VchsService/ProvidePowerschoolToken"
	// VchsServiceProvideMoodleLoginProcedure is the fully-qualified name of the VchsService's
	// ProvideMoodleLogin RPC.
	VchsServiceProvideMoodleLoginProcedure = "/cmd.vchsd.api.VchsService/ProvideMoodleLogin"
	// VchsServiceGetStudentDataProcedure is the fully-qualified name of the VchsService's
	// GetStudentData RPC.
	VchsServiceGetStudentDataProcedure = "/cmd.vchsd.api.VchsService/GetStudentData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	vchsServiceServiceDescriptor                       = api.File_cmd_vchsd_api_api_proto.Services().ByName("VchsService")
	vchsServiceGetCredentialStatusMethodDescriptor     = vchsServiceServiceDescriptor.Methods().ByName("GetCredentialStatus")
	vchsServiceProvidePowerschoolTokenMethodDescriptor = vchsServiceServiceDescriptor.Methods().ByName("ProvidePowerschoolToken")
	vchsServiceProvideMoodleLoginMethodDescriptor      = vchsServiceServiceDescriptor.Methods().ByName("ProvideMoodleLogin")
	vchsServiceGetStudentDataMethodDescriptor          = vchsServiceServiceDescriptor.Methods().ByName("GetStudentData")
)

// VchsServiceClient is a client for the cmd.vchsd.api.VchsService service.
type VchsServiceClient interface {
	GetCredentialStatus(context.Context, *connect.Request[api.GetCredentialStatusRequest]) (*connect.Response[api.GetCredentialStatusResponse], error)
	ProvidePowerschoolToken(context.Context, *connect.Request[api.ProvidePowerschoolTokenRequest]) (*connect.Response[api.ProvidePowerschoolTokenResponse], error)
	ProvideMoodleLogin(context.Context, *connect.Request[api.ProvideMoodleLoginRequest]) (*connect.Response[api.ProvideMoodleLoginResponse], error)
	GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error)
}

// NewVchsServiceClient constructs a client for the cmd.vchsd.api.VchsService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVchsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VchsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &vchsServiceClient{
		getCredentialStatus: connect.NewClient[api.GetCredentialStatusRequest, api.GetCredentialStatusResponse](
			httpClient,
			baseURL+VchsServiceGetCredentialStatusProcedure,
			connect.WithSchema(vchsServiceGetCredentialStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		providePowerschoolToken: connect.NewClient[api.ProvidePowerschoolTokenRequest, api.ProvidePowerschoolTokenResponse](
			httpClient,
			baseURL+VchsServiceProvidePowerschoolTokenProcedure,
			connect.WithSchema(vchsServiceProvidePowerschoolTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		provideMoodleLogin: connect.NewClient[api.ProvideMoodleLoginRequest, api.ProvideMoodleLoginResponse](
			httpClient,
			baseURL+VchsServiceProvideMoodleLoginProcedure,
			connect.WithSchema(vchsServiceProvideMoodleLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStudentData: connect.NewClient[api.GetStudentDataRequest, api.GetStudentDataResponse](
			httpClient,
			baseURL+VchsServiceGetStudentDataProcedure,
			connect.WithSchema(vchsServiceGetStudentDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// vchsServiceClient implements VchsServiceClient.
type vchsServiceClient struct {
	getCredentialStatus     *connect.Client[api.GetCredentialStatusRequest, api.GetCredentialStatusResponse]
	providePowerschoolToken *connect.Client[api.ProvidePowerschoolTokenRequest, api.ProvidePowerschoolTokenResponse]
	provideMoodleLogin      *connect.Client[api.ProvideMoodleLoginRequest, api.ProvideMoodleLoginResponse]
	getStudentData          *connect.Client[api.GetStudentDataRequest, api.GetStudentDataResponse]
}

// GetCredentialStatus calls cmd.vchsd.api.VchsService.GetCredentialStatus.
func (c *vchsServiceClient) GetCredentialStatus(ctx context.Context, req *connect.Request[api.GetCredentialStatusRequest]) (*connect.Response[api.GetCredentialStatusResponse], error) {
	return c.getCredentialStatus.CallUnary(ctx, req)
}

// ProvidePowerschoolToken calls cmd.vchsd.api.VchsService.ProvidePowerschoolToken.
func (c *vchsServiceClient) ProvidePowerschoolToken(ctx context.Context, req *connect.Request[api.ProvidePowerschoolTokenRequest]) (*connect.Response[api.ProvidePowerschoolTokenResponse], error) {
	return c.providePowerschoolToken.CallUnary(ctx, req)
}

// ProvideMoodleLogin calls cmd.vchsd.api.VchsService.ProvideMoodleLogin.
func (c *vchsServiceClient) ProvideMoodleLogin(ctx context.Context, req *connect.Request[api.ProvideMoodleLoginRequest]) (*connect.Response[api.ProvideMoodleLoginResponse], error) {
	return c.provideMoodleLogin.CallUnary(ctx, req)
}

// GetStudentData calls cmd.vchsd.api.VchsService.GetStudentData.
func (c *vchsServiceClient) GetStudentData(ctx context.Context, req *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error) {
	return c.getStudentData.CallUnary(ctx, req)
}

// VchsServiceHandler is an implementation of the cmd.vchsd.api.VchsService service.
type VchsServiceHandler interface {
	GetCredentialStatus(context.Context, *connect.Request[api.GetCredentialStatusRequest]) (*connect.Response[api.GetCredentialStatusResponse], error)
	ProvidePowerschoolToken(context.Context, *connect.Request[api.ProvidePowerschoolTokenRequest]) (*connect.Response[api.ProvidePowerschoolTokenResponse], error)
	ProvideMoodleLogin(context.Context, *connect.Request[api.ProvideMoodleLoginRequest]) (*connect.Response[api.ProvideMoodleLoginResponse], error)
	GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error)
}

// NewVchsServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVchsServiceHandler(svc VchsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vchsServiceGetCredentialStatusHandler := connect.NewUnaryHandler(
		VchsServiceGetCredentialStatusProcedure,
		svc.GetCredentialStatus,
		connect.WithSchema(vchsServiceGetCredentialStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vchsServiceProvidePowerschoolTokenHandler := connect.NewUnaryHandler(
		VchsServiceProvidePowerschoolTokenProcedure,
		svc.ProvidePowerschoolToken,
		connect.WithSchema(vchsServiceProvidePowerschoolTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vchsServiceProvideMoodleLoginHandler := connect.NewUnaryHandler(
		VchsServiceProvideMoodleLoginProcedure,
		svc.ProvideMoodleLogin,
		connect.WithSchema(vchsServiceProvideMoodleLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	vchsServiceGetStudentDataHandler := connect.NewUnaryHandler(
		VchsServiceGetStudentDataProcedure,
		svc.GetStudentData,
		connect.WithSchema(vchsServiceGetStudentDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cmd.vchsd.api.VchsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VchsServiceGetCredentialStatusProcedure:
			vchsServiceGetCredentialStatusHandler.ServeHTTP(w, r)
		case VchsServiceProvidePowerschoolTokenProcedure:
			vchsServiceProvidePowerschoolTokenHandler.ServeHTTP(w, r)
		case VchsServiceProvideMoodleLoginProcedure:
			vchsServiceProvideMoodleLoginHandler.ServeHTTP(w, r)
		case VchsServiceGetStudentDataProcedure:
			vchsServiceGetStudentDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVchsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVchsServiceHandler struct{}

func (UnimplementedVchsServiceHandler) GetCredentialStatus(context.Context, *connect.Request[api.GetCredentialStatusRequest]) (*connect.Response[api.GetCredentialStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cmd.vchsd.api.VchsService.GetCredentialStatus is not implemented"))
}

func (UnimplementedVchsServiceHandler) ProvidePowerschoolToken(context.Context, *connect.Request[api.ProvidePowerschoolTokenRequest]) (*connect.Response[api.ProvidePowerschoolTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cmd.vchsd.api.VchsService.ProvidePowerschoolToken is not implemented"))
}

func (UnimplementedVchsServiceHandler) ProvideMoodleLogin(context.Context, *connect.Request[api.ProvideMoodleLoginRequest]) (*connect.Response[api.ProvideMoodleLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cmd.vchsd.api.VchsService.ProvideMoodleLogin is not implemented"))
}

func (UnimplementedVchsServiceHandler) GetStudentData(context.Context, *connect.Request[api.GetStudentDataRequest]) (*connect.Response[api.GetStudentDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cmd.vchsd.api.VchsService.GetStudentData is not implemented"))
}
