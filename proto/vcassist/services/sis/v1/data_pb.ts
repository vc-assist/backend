// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/sis/v1/data.proto (package vcassist.services.sis.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message vcassist.services.sis.v1.AssignmentData
 */
export class AssignmentData extends Message<AssignmentData> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string category = 3;
   */
  category = "";

  /**
   * @generated from field: int64 due_date = 4;
   */
  dueDate = protoInt64.zero;

  /**
   * @generated from field: optional float points_earned = 5;
   */
  pointsEarned?: number;

  /**
   * @generated from field: optional float points_possible = 6;
   */
  pointsPossible?: number;

  /**
   * @generated from field: bool is_missing = 7;
   */
  isMissing = false;

  /**
   * @generated from field: bool is_late = 8;
   */
  isLate = false;

  /**
   * @generated from field: bool is_collected = 9;
   */
  isCollected = false;

  /**
   * @generated from field: bool is_exempt = 10;
   */
  isExempt = false;

  /**
   * @generated from field: bool is_incomplete = 11;
   */
  isIncomplete = false;

  constructor(data?: PartialMessage<AssignmentData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.AssignmentData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "due_date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "points_earned", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 6, name: "points_possible", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "is_missing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "is_late", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "is_collected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "is_exempt", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "is_incomplete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentData {
    return new AssignmentData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentData {
    return new AssignmentData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentData {
    return new AssignmentData().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentData | PlainMessage<AssignmentData> | undefined, b: AssignmentData | PlainMessage<AssignmentData> | undefined): boolean {
    return proto3.util.equals(AssignmentData, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.Meeting
 */
export class Meeting extends Message<Meeting> {
  /**
   * @generated from field: int64 start = 1;
   */
  start = protoInt64.zero;

  /**
   * @generated from field: int64 stop = 2;
   */
  stop = protoInt64.zero;

  constructor(data?: PartialMessage<Meeting>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.Meeting";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "stop", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Meeting {
    return new Meeting().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Meeting {
    return new Meeting().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Meeting {
    return new Meeting().fromJsonString(jsonString, options);
  }

  static equals(a: Meeting | PlainMessage<Meeting> | undefined, b: Meeting | PlainMessage<Meeting> | undefined): boolean {
    return proto3.util.equals(Meeting, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.AssignmentCategory
 */
export class AssignmentCategory extends Message<AssignmentCategory> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * this is a value from 0-1
   *
   * @generated from field: float weight = 2;
   */
  weight = 0;

  constructor(data?: PartialMessage<AssignmentCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.AssignmentCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentCategory {
    return new AssignmentCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentCategory {
    return new AssignmentCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentCategory {
    return new AssignmentCategory().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentCategory | PlainMessage<AssignmentCategory> | undefined, b: AssignmentCategory | PlainMessage<AssignmentCategory> | undefined): boolean {
    return proto3.util.equals(AssignmentCategory, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.GradeSnapshot
 */
export class GradeSnapshot extends Message<GradeSnapshot> {
  /**
   * @generated from field: int64 time = 1;
   */
  time = protoInt64.zero;

  /**
   * this is a value from 0-100
   *
   * @generated from field: float value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<GradeSnapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.GradeSnapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradeSnapshot {
    return new GradeSnapshot().fromJsonString(jsonString, options);
  }

  static equals(a: GradeSnapshot | PlainMessage<GradeSnapshot> | undefined, b: GradeSnapshot | PlainMessage<GradeSnapshot> | undefined): boolean {
    return proto3.util.equals(GradeSnapshot, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.CourseData
 */
export class CourseData extends Message<CourseData> {
  /**
   * @generated from field: string guid = 1;
   */
  guid = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string period = 3;
   */
  period = "";

  /**
   * @generated from field: string teacher = 4;
   */
  teacher = "";

  /**
   * @generated from field: string teacher_email = 5;
   */
  teacherEmail = "";

  /**
   * @generated from field: string room = 6;
   */
  room = "";

  /**
   * @generated from field: float overall_grade = 7;
   */
  overallGrade = 0;

  /**
   * @generated from field: string day_name = 8;
   */
  dayName = "";

  /**
   * @generated from field: int32 homework_passes = 9;
   */
  homeworkPasses = 0;

  /**
   * @generated from field: repeated vcassist.services.sis.v1.AssignmentData assignments = 10;
   */
  assignments: AssignmentData[] = [];

  /**
   * @generated from field: repeated vcassist.services.sis.v1.Meeting meetings = 11;
   */
  meetings: Meeting[] = [];

  /**
   * @generated from field: repeated vcassist.services.sis.v1.GradeSnapshot snapshots = 12;
   */
  snapshots: GradeSnapshot[] = [];

  /**
   * @generated from field: repeated vcassist.services.sis.v1.AssignmentCategory assignment_categories = 13;
   */
  assignmentCategories: AssignmentCategory[] = [];

  constructor(data?: PartialMessage<CourseData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.CourseData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "period", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "teacher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "teacher_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "room", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "overall_grade", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 8, name: "day_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "homework_passes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "assignments", kind: "message", T: AssignmentData, repeated: true },
    { no: 11, name: "meetings", kind: "message", T: Meeting, repeated: true },
    { no: 12, name: "snapshots", kind: "message", T: GradeSnapshot, repeated: true },
    { no: 13, name: "assignment_categories", kind: "message", T: AssignmentCategory, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseData {
    return new CourseData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseData {
    return new CourseData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseData {
    return new CourseData().fromJsonString(jsonString, options);
  }

  static equals(a: CourseData | PlainMessage<CourseData> | undefined, b: CourseData | PlainMessage<CourseData> | undefined): boolean {
    return proto3.util.equals(CourseData, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.SchoolData
 */
export class SchoolData extends Message<SchoolData> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string phone = 2;
   */
  phone = "";

  /**
   * @generated from field: string fax = 3;
   */
  fax = "";

  /**
   * @generated from field: string email = 4;
   */
  email = "";

  /**
   * @generated from field: string street_address = 5;
   */
  streetAddress = "";

  /**
   * @generated from field: string city = 6;
   */
  city = "";

  /**
   * @generated from field: string state = 7;
   */
  state = "";

  /**
   * @generated from field: string zip = 8;
   */
  zip = "";

  /**
   * @generated from field: string country = 9;
   */
  country = "";

  constructor(data?: PartialMessage<SchoolData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.SchoolData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fax", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "street_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "zip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SchoolData {
    return new SchoolData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SchoolData {
    return new SchoolData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SchoolData {
    return new SchoolData().fromJsonString(jsonString, options);
  }

  static equals(a: SchoolData | PlainMessage<SchoolData> | undefined, b: SchoolData | PlainMessage<SchoolData> | undefined): boolean {
    return proto3.util.equals(SchoolData, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.Bulletin
 */
export class Bulletin extends Message<Bulletin> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: int64 start_date = 2;
   */
  startDate = protoInt64.zero;

  /**
   * @generated from field: int64 end_date = 3;
   */
  endDate = protoInt64.zero;

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  constructor(data?: PartialMessage<Bulletin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.Bulletin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "end_date", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bulletin {
    return new Bulletin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bulletin {
    return new Bulletin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bulletin {
    return new Bulletin().fromJsonString(jsonString, options);
  }

  static equals(a: Bulletin | PlainMessage<Bulletin> | undefined, b: Bulletin | PlainMessage<Bulletin> | undefined): boolean {
    return proto3.util.equals(Bulletin, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.StudentProfile
 */
export class StudentProfile extends Message<StudentProfile> {
  /**
   * @generated from field: string guid = 1;
   */
  guid = "";

  /**
   * @generated from field: float current_gpa = 2;
   */
  currentGpa = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: bytes photo = 4;
   */
  photo = new Uint8Array(0);

  constructor(data?: PartialMessage<StudentProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.StudentProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "current_gpa", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "photo", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StudentProfile {
    return new StudentProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StudentProfile {
    return new StudentProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StudentProfile {
    return new StudentProfile().fromJsonString(jsonString, options);
  }

  static equals(a: StudentProfile | PlainMessage<StudentProfile> | undefined, b: StudentProfile | PlainMessage<StudentProfile> | undefined): boolean {
    return proto3.util.equals(StudentProfile, a, b);
  }
}

