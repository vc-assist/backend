// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/services/sis/v1/api.proto

package sisv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/proto/vcassist/services/sis/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SIServiceName is the fully-qualified name of the SIService service.
	SIServiceName = "vcassist.services.sis.v1.SIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SIServiceGetCredentialStatusProcedure is the fully-qualified name of the SIService's
	// GetCredentialStatus RPC.
	SIServiceGetCredentialStatusProcedure = "/vcassist.services.sis.v1.SIService/GetCredentialStatus"
	// SIServiceProvideCredentialProcedure is the fully-qualified name of the SIService's
	// ProvideCredential RPC.
	SIServiceProvideCredentialProcedure = "/vcassist.services.sis.v1.SIService/ProvideCredential"
	// SIServiceGetDataProcedure is the fully-qualified name of the SIService's GetData RPC.
	SIServiceGetDataProcedure = "/vcassist.services.sis.v1.SIService/GetData"
	// SIServiceRefreshDataProcedure is the fully-qualified name of the SIService's RefreshData RPC.
	SIServiceRefreshDataProcedure = "/vcassist.services.sis.v1.SIService/RefreshData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sIServiceServiceDescriptor                   = v1.File_vcassist_services_sis_v1_api_proto.Services().ByName("SIService")
	sIServiceGetCredentialStatusMethodDescriptor = sIServiceServiceDescriptor.Methods().ByName("GetCredentialStatus")
	sIServiceProvideCredentialMethodDescriptor   = sIServiceServiceDescriptor.Methods().ByName("ProvideCredential")
	sIServiceGetDataMethodDescriptor             = sIServiceServiceDescriptor.Methods().ByName("GetData")
	sIServiceRefreshDataMethodDescriptor         = sIServiceServiceDescriptor.Methods().ByName("RefreshData")
)

// SIServiceClient is a client for the vcassist.services.sis.v1.SIService service.
type SIServiceClient interface {
	GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error)
	ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error)
	GetData(context.Context, *connect.Request[v1.GetDataRequest]) (*connect.Response[v1.GetDataResponse], error)
	RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error)
}

// NewSIServiceClient constructs a client for the vcassist.services.sis.v1.SIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sIServiceClient{
		getCredentialStatus: connect.NewClient[v1.GetCredentialStatusRequest, v1.GetCredentialStatusResponse](
			httpClient,
			baseURL+SIServiceGetCredentialStatusProcedure,
			connect.WithSchema(sIServiceGetCredentialStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		provideCredential: connect.NewClient[v1.ProvideCredentialRequest, v1.ProvideCredentialResponse](
			httpClient,
			baseURL+SIServiceProvideCredentialProcedure,
			connect.WithSchema(sIServiceProvideCredentialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getData: connect.NewClient[v1.GetDataRequest, v1.GetDataResponse](
			httpClient,
			baseURL+SIServiceGetDataProcedure,
			connect.WithSchema(sIServiceGetDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshData: connect.NewClient[v1.RefreshDataRequest, v1.RefreshDataResponse](
			httpClient,
			baseURL+SIServiceRefreshDataProcedure,
			connect.WithSchema(sIServiceRefreshDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sIServiceClient implements SIServiceClient.
type sIServiceClient struct {
	getCredentialStatus *connect.Client[v1.GetCredentialStatusRequest, v1.GetCredentialStatusResponse]
	provideCredential   *connect.Client[v1.ProvideCredentialRequest, v1.ProvideCredentialResponse]
	getData             *connect.Client[v1.GetDataRequest, v1.GetDataResponse]
	refreshData         *connect.Client[v1.RefreshDataRequest, v1.RefreshDataResponse]
}

// GetCredentialStatus calls vcassist.services.sis.v1.SIService.GetCredentialStatus.
func (c *sIServiceClient) GetCredentialStatus(ctx context.Context, req *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error) {
	return c.getCredentialStatus.CallUnary(ctx, req)
}

// ProvideCredential calls vcassist.services.sis.v1.SIService.ProvideCredential.
func (c *sIServiceClient) ProvideCredential(ctx context.Context, req *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error) {
	return c.provideCredential.CallUnary(ctx, req)
}

// GetData calls vcassist.services.sis.v1.SIService.GetData.
func (c *sIServiceClient) GetData(ctx context.Context, req *connect.Request[v1.GetDataRequest]) (*connect.Response[v1.GetDataResponse], error) {
	return c.getData.CallUnary(ctx, req)
}

// RefreshData calls vcassist.services.sis.v1.SIService.RefreshData.
func (c *sIServiceClient) RefreshData(ctx context.Context, req *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error) {
	return c.refreshData.CallUnary(ctx, req)
}

// SIServiceHandler is an implementation of the vcassist.services.sis.v1.SIService service.
type SIServiceHandler interface {
	GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error)
	ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error)
	GetData(context.Context, *connect.Request[v1.GetDataRequest]) (*connect.Response[v1.GetDataResponse], error)
	RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error)
}

// NewSIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSIServiceHandler(svc SIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sIServiceGetCredentialStatusHandler := connect.NewUnaryHandler(
		SIServiceGetCredentialStatusProcedure,
		svc.GetCredentialStatus,
		connect.WithSchema(sIServiceGetCredentialStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sIServiceProvideCredentialHandler := connect.NewUnaryHandler(
		SIServiceProvideCredentialProcedure,
		svc.ProvideCredential,
		connect.WithSchema(sIServiceProvideCredentialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sIServiceGetDataHandler := connect.NewUnaryHandler(
		SIServiceGetDataProcedure,
		svc.GetData,
		connect.WithSchema(sIServiceGetDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sIServiceRefreshDataHandler := connect.NewUnaryHandler(
		SIServiceRefreshDataProcedure,
		svc.RefreshData,
		connect.WithSchema(sIServiceRefreshDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.services.sis.v1.SIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SIServiceGetCredentialStatusProcedure:
			sIServiceGetCredentialStatusHandler.ServeHTTP(w, r)
		case SIServiceProvideCredentialProcedure:
			sIServiceProvideCredentialHandler.ServeHTTP(w, r)
		case SIServiceGetDataProcedure:
			sIServiceGetDataHandler.ServeHTTP(w, r)
		case SIServiceRefreshDataProcedure:
			sIServiceRefreshDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSIServiceHandler struct{}

func (UnimplementedSIServiceHandler) GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.sis.v1.SIService.GetCredentialStatus is not implemented"))
}

func (UnimplementedSIServiceHandler) ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.sis.v1.SIService.ProvideCredential is not implemented"))
}

func (UnimplementedSIServiceHandler) GetData(context.Context, *connect.Request[v1.GetDataRequest]) (*connect.Response[v1.GetDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.sis.v1.SIService.GetData is not implemented"))
}

func (UnimplementedSIServiceHandler) RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.sis.v1.SIService.RefreshData is not implemented"))
}
