// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/sis/v1/api.proto (package vcassist.services.sis.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CredentialStatus, OAuthTokenProvision, UsernamePasswordProvision } from "../../keychain/v1/auth_flow_pb.js";
import { Bulletin, CourseData, SchoolData, StudentProfile } from "./data_pb.js";

/**
 * GetCredentialStatus
 *
 * @generated from message vcassist.services.sis.v1.GetCredentialStatusRequest
 */
export class GetCredentialStatusRequest extends Message<GetCredentialStatusRequest> {
  constructor(data?: PartialMessage<GetCredentialStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.GetCredentialStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusRequest {
    return new GetCredentialStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined, b: GetCredentialStatusRequest | PlainMessage<GetCredentialStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.GetCredentialStatusResponse
 */
export class GetCredentialStatusResponse extends Message<GetCredentialStatusResponse> {
  /**
   * @generated from field: vcassist.services.keychain.v1.CredentialStatus status = 1;
   */
  status?: CredentialStatus;

  constructor(data?: PartialMessage<GetCredentialStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.GetCredentialStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: CredentialStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCredentialStatusResponse {
    return new GetCredentialStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined, b: GetCredentialStatusResponse | PlainMessage<GetCredentialStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetCredentialStatusResponse, a, b);
  }
}

/**
 * ProvideCredential
 *
 * @generated from message vcassist.services.sis.v1.ProvideCredentialRequest
 */
export class ProvideCredentialRequest extends Message<ProvideCredentialRequest> {
  /**
   * @generated from oneof vcassist.services.sis.v1.ProvideCredentialRequest.credential
   */
  credential: {
    /**
     * @generated from field: vcassist.services.keychain.v1.OAuthTokenProvision token = 1;
     */
    value: OAuthTokenProvision;
    case: "token";
  } | {
    /**
     * @generated from field: vcassist.services.keychain.v1.UsernamePasswordProvision username_password = 2;
     */
    value: UsernamePasswordProvision;
    case: "usernamePassword";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProvideCredentialRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.ProvideCredentialRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: OAuthTokenProvision, oneof: "credential" },
    { no: 2, name: "username_password", kind: "message", T: UsernamePasswordProvision, oneof: "credential" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideCredentialRequest {
    return new ProvideCredentialRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideCredentialRequest | PlainMessage<ProvideCredentialRequest> | undefined, b: ProvideCredentialRequest | PlainMessage<ProvideCredentialRequest> | undefined): boolean {
    return proto3.util.equals(ProvideCredentialRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.ProvideCredentialResponse
 */
export class ProvideCredentialResponse extends Message<ProvideCredentialResponse> {
  constructor(data?: PartialMessage<ProvideCredentialResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.ProvideCredentialResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideCredentialResponse {
    return new ProvideCredentialResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideCredentialResponse | PlainMessage<ProvideCredentialResponse> | undefined, b: ProvideCredentialResponse | PlainMessage<ProvideCredentialResponse> | undefined): boolean {
    return proto3.util.equals(ProvideCredentialResponse, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.Data
 */
export class Data extends Message<Data> {
  /**
   * @generated from field: vcassist.services.sis.v1.StudentProfile profile = 1;
   */
  profile?: StudentProfile;

  /**
   * @generated from field: repeated vcassist.services.sis.v1.SchoolData schools = 2;
   */
  schools: SchoolData[] = [];

  /**
   * @generated from field: repeated vcassist.services.sis.v1.Bulletin bulletins = 3;
   */
  bulletins: Bulletin[] = [];

  /**
   * @generated from field: repeated vcassist.services.sis.v1.CourseData courses = 4;
   */
  courses: CourseData[] = [];

  constructor(data?: PartialMessage<Data>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.Data";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: StudentProfile },
    { no: 2, name: "schools", kind: "message", T: SchoolData, repeated: true },
    { no: 3, name: "bulletins", kind: "message", T: Bulletin, repeated: true },
    { no: 4, name: "courses", kind: "message", T: CourseData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Data {
    return new Data().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Data {
    return new Data().fromJsonString(jsonString, options);
  }

  static equals(a: Data | PlainMessage<Data> | undefined, b: Data | PlainMessage<Data> | undefined): boolean {
    return proto3.util.equals(Data, a, b);
  }
}

/**
 * GetData
 *
 * @generated from message vcassist.services.sis.v1.GetDataRequest
 */
export class GetDataRequest extends Message<GetDataRequest> {
  constructor(data?: PartialMessage<GetDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.GetDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataRequest {
    return new GetDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataRequest {
    return new GetDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataRequest {
    return new GetDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataRequest | PlainMessage<GetDataRequest> | undefined, b: GetDataRequest | PlainMessage<GetDataRequest> | undefined): boolean {
    return proto3.util.equals(GetDataRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.GetDataResponse
 */
export class GetDataResponse extends Message<GetDataResponse> {
  /**
   * @generated from field: vcassist.services.sis.v1.Data data = 1;
   */
  data?: Data;

  constructor(data?: PartialMessage<GetDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.GetDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataResponse {
    return new GetDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataResponse {
    return new GetDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataResponse {
    return new GetDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataResponse | PlainMessage<GetDataResponse> | undefined, b: GetDataResponse | PlainMessage<GetDataResponse> | undefined): boolean {
    return proto3.util.equals(GetDataResponse, a, b);
  }
}

/**
 * RefreshData
 *
 * @generated from message vcassist.services.sis.v1.RefreshDataRequest
 */
export class RefreshDataRequest extends Message<RefreshDataRequest> {
  constructor(data?: PartialMessage<RefreshDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.RefreshDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshDataRequest {
    return new RefreshDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshDataRequest {
    return new RefreshDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshDataRequest {
    return new RefreshDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshDataRequest | PlainMessage<RefreshDataRequest> | undefined, b: RefreshDataRequest | PlainMessage<RefreshDataRequest> | undefined): boolean {
    return proto3.util.equals(RefreshDataRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.sis.v1.RefreshDataResponse
 */
export class RefreshDataResponse extends Message<RefreshDataResponse> {
  /**
   * @generated from field: vcassist.services.sis.v1.Data data = 1;
   */
  data?: Data;

  constructor(data?: PartialMessage<RefreshDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.sis.v1.RefreshDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Data },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshDataResponse {
    return new RefreshDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshDataResponse {
    return new RefreshDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshDataResponse {
    return new RefreshDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshDataResponse | PlainMessage<RefreshDataResponse> | undefined, b: RefreshDataResponse | PlainMessage<RefreshDataResponse> | undefined): boolean {
    return proto3.util.equals(RefreshDataResponse, a, b);
  }
}

