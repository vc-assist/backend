// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/keychain/v1/auth_flow.proto (package vcassist.services.keychain.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vcassist.services.keychain.v1.UsernamePasswordFlow
 */
export class UsernamePasswordFlow extends Message<UsernamePasswordFlow> {
  constructor(data?: PartialMessage<UsernamePasswordFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.UsernamePasswordFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsernamePasswordFlow {
    return new UsernamePasswordFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsernamePasswordFlow {
    return new UsernamePasswordFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsernamePasswordFlow {
    return new UsernamePasswordFlow().fromJsonString(jsonString, options);
  }

  static equals(a: UsernamePasswordFlow | PlainMessage<UsernamePasswordFlow> | undefined, b: UsernamePasswordFlow | PlainMessage<UsernamePasswordFlow> | undefined): boolean {
    return proto3.util.equals(UsernamePasswordFlow, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.OAuthFlow
 */
export class OAuthFlow extends Message<OAuthFlow> {
  /**
   * @generated from field: string base_login_url = 1;
   */
  baseLoginUrl = "";

  /**
   * @generated from field: string access_type = 2;
   */
  accessType = "";

  /**
   * @generated from field: string scope = 3;
   */
  scope = "";

  /**
   * @generated from field: string redirect_uri = 4;
   */
  redirectUri = "";

  /**
   * @generated from field: string code_verifier = 5;
   */
  codeVerifier = "";

  /**
   * @generated from field: string client_id = 6;
   */
  clientId = "";

  /**
   * @generated from field: string token_request_url = 7;
   */
  tokenRequestUrl = "";

  constructor(data?: PartialMessage<OAuthFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.OAuthFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_login_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "access_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "code_verifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "token_request_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthFlow {
    return new OAuthFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthFlow {
    return new OAuthFlow().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthFlow | PlainMessage<OAuthFlow> | undefined, b: OAuthFlow | PlainMessage<OAuthFlow> | undefined): boolean {
    return proto3.util.equals(OAuthFlow, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.CredentialStatus
 */
export class CredentialStatus extends Message<CredentialStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string picture = 2;
   */
  picture = "";

  /**
   * @generated from field: bool provided = 3;
   */
  provided = false;

  /**
   * @generated from oneof vcassist.services.keychain.v1.CredentialStatus.login_flow
   */
  loginFlow: {
    /**
     * @generated from field: vcassist.services.keychain.v1.UsernamePasswordFlow username_password = 4;
     */
    value: UsernamePasswordFlow;
    case: "usernamePassword";
  } | {
    /**
     * @generated from field: vcassist.services.keychain.v1.OAuthFlow oauth = 5;
     */
    value: OAuthFlow;
    case: "oauth";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CredentialStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.CredentialStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "picture", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "provided", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "username_password", kind: "message", T: UsernamePasswordFlow, oneof: "login_flow" },
    { no: 5, name: "oauth", kind: "message", T: OAuthFlow, oneof: "login_flow" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CredentialStatus {
    return new CredentialStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CredentialStatus {
    return new CredentialStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CredentialStatus | PlainMessage<CredentialStatus> | undefined, b: CredentialStatus | PlainMessage<CredentialStatus> | undefined): boolean {
    return proto3.util.equals(CredentialStatus, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.UsernamePasswordProvision
 */
export class UsernamePasswordProvision extends Message<UsernamePasswordProvision> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UsernamePasswordProvision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.UsernamePasswordProvision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsernamePasswordProvision {
    return new UsernamePasswordProvision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsernamePasswordProvision {
    return new UsernamePasswordProvision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsernamePasswordProvision {
    return new UsernamePasswordProvision().fromJsonString(jsonString, options);
  }

  static equals(a: UsernamePasswordProvision | PlainMessage<UsernamePasswordProvision> | undefined, b: UsernamePasswordProvision | PlainMessage<UsernamePasswordProvision> | undefined): boolean {
    return proto3.util.equals(UsernamePasswordProvision, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.OAuthTokenProvision
 */
export class OAuthTokenProvision extends Message<OAuthTokenProvision> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<OAuthTokenProvision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.OAuthTokenProvision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthTokenProvision {
    return new OAuthTokenProvision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthTokenProvision {
    return new OAuthTokenProvision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthTokenProvision {
    return new OAuthTokenProvision().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthTokenProvision | PlainMessage<OAuthTokenProvision> | undefined, b: OAuthTokenProvision | PlainMessage<OAuthTokenProvision> | undefined): boolean {
    return proto3.util.equals(OAuthTokenProvision, a, b);
  }
}

