// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/keychain/v1/api.proto (package vcassist.services.keychain.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message vcassist.services.keychain.v1.UsernamePasswordKey
 */
export class UsernamePasswordKey extends Message<UsernamePasswordKey> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<UsernamePasswordKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.UsernamePasswordKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsernamePasswordKey {
    return new UsernamePasswordKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsernamePasswordKey {
    return new UsernamePasswordKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsernamePasswordKey {
    return new UsernamePasswordKey().fromJsonString(jsonString, options);
  }

  static equals(a: UsernamePasswordKey | PlainMessage<UsernamePasswordKey> | undefined, b: UsernamePasswordKey | PlainMessage<UsernamePasswordKey> | undefined): boolean {
    return proto3.util.equals(UsernamePasswordKey, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.OAuthKey
 */
export class OAuthKey extends Message<OAuthKey> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string refresh_url = 2;
   */
  refreshUrl = "";

  /**
   * @generated from field: string client_id = 3;
   */
  clientId = "";

  /**
   * @generated from field: int64 expires_at = 4;
   */
  expiresAt = protoInt64.zero;

  constructor(data?: PartialMessage<OAuthKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.OAuthKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuthKey {
    return new OAuthKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuthKey {
    return new OAuthKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuthKey {
    return new OAuthKey().fromJsonString(jsonString, options);
  }

  static equals(a: OAuthKey | PlainMessage<OAuthKey> | undefined, b: OAuthKey | PlainMessage<OAuthKey> | undefined): boolean {
    return proto3.util.equals(OAuthKey, a, b);
  }
}

/**
 * SetOAuth
 *
 * @generated from message vcassist.services.keychain.v1.SetOAuthRequest
 */
export class SetOAuthRequest extends Message<SetOAuthRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: vcassist.services.keychain.v1.OAuthKey key = 3;
   */
  key?: OAuthKey;

  constructor(data?: PartialMessage<SetOAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.SetOAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "message", T: OAuthKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOAuthRequest {
    return new SetOAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOAuthRequest {
    return new SetOAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOAuthRequest {
    return new SetOAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOAuthRequest | PlainMessage<SetOAuthRequest> | undefined, b: SetOAuthRequest | PlainMessage<SetOAuthRequest> | undefined): boolean {
    return proto3.util.equals(SetOAuthRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.SetOAuthResponse
 */
export class SetOAuthResponse extends Message<SetOAuthResponse> {
  constructor(data?: PartialMessage<SetOAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.SetOAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOAuthResponse {
    return new SetOAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOAuthResponse {
    return new SetOAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOAuthResponse {
    return new SetOAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetOAuthResponse | PlainMessage<SetOAuthResponse> | undefined, b: SetOAuthResponse | PlainMessage<SetOAuthResponse> | undefined): boolean {
    return proto3.util.equals(SetOAuthResponse, a, b);
  }
}

/**
 * SetUsernamePassword
 *
 * @generated from message vcassist.services.keychain.v1.SetUsernamePasswordRequest
 */
export class SetUsernamePasswordRequest extends Message<SetUsernamePasswordRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: vcassist.services.keychain.v1.UsernamePasswordKey key = 3;
   */
  key?: UsernamePasswordKey;

  constructor(data?: PartialMessage<SetUsernamePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.SetUsernamePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "message", T: UsernamePasswordKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUsernamePasswordRequest {
    return new SetUsernamePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUsernamePasswordRequest {
    return new SetUsernamePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUsernamePasswordRequest {
    return new SetUsernamePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetUsernamePasswordRequest | PlainMessage<SetUsernamePasswordRequest> | undefined, b: SetUsernamePasswordRequest | PlainMessage<SetUsernamePasswordRequest> | undefined): boolean {
    return proto3.util.equals(SetUsernamePasswordRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.SetUsernamePasswordResponse
 */
export class SetUsernamePasswordResponse extends Message<SetUsernamePasswordResponse> {
  constructor(data?: PartialMessage<SetUsernamePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.SetUsernamePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetUsernamePasswordResponse {
    return new SetUsernamePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetUsernamePasswordResponse {
    return new SetUsernamePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetUsernamePasswordResponse {
    return new SetUsernamePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetUsernamePasswordResponse | PlainMessage<SetUsernamePasswordResponse> | undefined, b: SetUsernamePasswordResponse | PlainMessage<SetUsernamePasswordResponse> | undefined): boolean {
    return proto3.util.equals(SetUsernamePasswordResponse, a, b);
  }
}

/**
 * GetOAuth
 *
 * @generated from message vcassist.services.keychain.v1.GetOAuthRequest
 */
export class GetOAuthRequest extends Message<GetOAuthRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetOAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.GetOAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOAuthRequest {
    return new GetOAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOAuthRequest {
    return new GetOAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOAuthRequest {
    return new GetOAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOAuthRequest | PlainMessage<GetOAuthRequest> | undefined, b: GetOAuthRequest | PlainMessage<GetOAuthRequest> | undefined): boolean {
    return proto3.util.equals(GetOAuthRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.GetOAuthResponse
 */
export class GetOAuthResponse extends Message<GetOAuthResponse> {
  /**
   * this will be null if a key cannot be found or is expired
   *
   * @generated from field: vcassist.services.keychain.v1.OAuthKey key = 1;
   */
  key?: OAuthKey;

  constructor(data?: PartialMessage<GetOAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.GetOAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: OAuthKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOAuthResponse {
    return new GetOAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOAuthResponse {
    return new GetOAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOAuthResponse {
    return new GetOAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOAuthResponse | PlainMessage<GetOAuthResponse> | undefined, b: GetOAuthResponse | PlainMessage<GetOAuthResponse> | undefined): boolean {
    return proto3.util.equals(GetOAuthResponse, a, b);
  }
}

/**
 * GetUsernamePassword
 *
 * @generated from message vcassist.services.keychain.v1.GetUsernamePasswordRequest
 */
export class GetUsernamePasswordRequest extends Message<GetUsernamePasswordRequest> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetUsernamePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.GetUsernamePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsernamePasswordRequest {
    return new GetUsernamePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsernamePasswordRequest {
    return new GetUsernamePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsernamePasswordRequest {
    return new GetUsernamePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsernamePasswordRequest | PlainMessage<GetUsernamePasswordRequest> | undefined, b: GetUsernamePasswordRequest | PlainMessage<GetUsernamePasswordRequest> | undefined): boolean {
    return proto3.util.equals(GetUsernamePasswordRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.keychain.v1.GetUsernamePasswordResponse
 */
export class GetUsernamePasswordResponse extends Message<GetUsernamePasswordResponse> {
  /**
   * this will be null if a key cannot be found or is expired
   *
   * @generated from field: vcassist.services.keychain.v1.UsernamePasswordKey key = 1;
   */
  key?: UsernamePasswordKey;

  constructor(data?: PartialMessage<GetUsernamePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.keychain.v1.GetUsernamePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: UsernamePasswordKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsernamePasswordResponse {
    return new GetUsernamePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsernamePasswordResponse {
    return new GetUsernamePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsernamePasswordResponse {
    return new GetUsernamePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsernamePasswordResponse | PlainMessage<GetUsernamePasswordResponse> | undefined, b: GetUsernamePasswordResponse | PlainMessage<GetUsernamePasswordResponse> | undefined): boolean {
    return proto3.util.equals(GetUsernamePasswordResponse, a, b);
  }
}

