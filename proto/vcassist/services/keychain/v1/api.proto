syntax = "proto3";

package vcassist.services.keychain.v1;

message UsernamePasswordKey {
  string username = 1;
  string password = 2;
}

message OAuthKey {
  string token = 1;
  string refresh_url = 2;
  string client_id = 3;
  int64 expires_at = 4;
}

// SetOAuth
message SetOAuthRequest {
  string namespace = 1;
  string id = 2;
  OAuthKey key = 3;
}
message SetOAuthResponse {}

// SetUsernamePassword
message SetUsernamePasswordRequest {
  string namespace = 1;
  string id = 2;
  UsernamePasswordKey key = 3;
}
message SetUsernamePasswordResponse {}

// GetOAuth
message GetOAuthRequest {
  string namespace = 1;
  string id = 2;
}
message GetOAuthResponse {
  // this will be null if a key cannot be found or is expired
  OAuthKey key = 1;
}

// GetUsernamePassword
message GetUsernamePasswordRequest {
  string namespace = 1;
  string id = 2;
}
message GetUsernamePasswordResponse {
  // this will be null if a key cannot be found or is expired
  UsernamePasswordKey key = 1;
}

message SetSessionTokenRequest {
  message UsernamePassword {
    string username = 1;
    string password = 2;
  }
  message OAuthFeilds {
    string token = 1;
    string refresh_url = 2;
    string client_id = 3;
    int64 expires_at = 4;
  }
    string oauth_token = 1;    
    optional UsernamePassword username_password = 2; //could be either one or both inputted
    optional OAuthFeilds oauth_feilds = 3; // this is for all of our oath paraemeters alot

}

message SetSessionTokenResponse {
  string sessionToken = 1; //token is nil if does not exist 
}

service KeychainService {
  rpc SetOAuth(SetOAuthRequest) returns (SetOAuthResponse);
  rpc GetOAuth(GetOAuthRequest) returns (GetOAuthResponse);
  rpc SetSessionToken(SetSessionTokenRequest) returns (SetSessionTokenResponse);
  rpc SetUsernamePassword(SetUsernamePasswordRequest) returns (SetUsernamePasswordResponse);
  rpc GetUsernamePassword(GetUsernamePasswordRequest) returns (GetUsernamePasswordResponse);
}
