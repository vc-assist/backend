// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/services/keychain/v1/api.proto

package keychainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/proto/vcassist/services/keychain/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KeychainServiceName is the fully-qualified name of the KeychainService service.
	KeychainServiceName = "vcassist.services.keychain.v1.KeychainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KeychainServiceSetOAuthProcedure is the fully-qualified name of the KeychainService's SetOAuth
	// RPC.
	KeychainServiceSetOAuthProcedure = "/vcassist.services.keychain.v1.KeychainService/SetOAuth"
	// KeychainServiceGetOAuthProcedure is the fully-qualified name of the KeychainService's GetOAuth
	// RPC.
	KeychainServiceGetOAuthProcedure = "/vcassist.services.keychain.v1.KeychainService/GetOAuth"
	// KeychainServiceSetUsernamePasswordProcedure is the fully-qualified name of the KeychainService's
	// SetUsernamePassword RPC.
	KeychainServiceSetUsernamePasswordProcedure = "/vcassist.services.keychain.v1.KeychainService/SetUsernamePassword"
	// KeychainServiceGetUsernamePasswordProcedure is the fully-qualified name of the KeychainService's
	// GetUsernamePassword RPC.
	KeychainServiceGetUsernamePasswordProcedure = "/vcassist.services.keychain.v1.KeychainService/GetUsernamePassword"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	keychainServiceServiceDescriptor                   = v1.File_vcassist_services_keychain_v1_api_proto.Services().ByName("KeychainService")
	keychainServiceSetOAuthMethodDescriptor            = keychainServiceServiceDescriptor.Methods().ByName("SetOAuth")
	keychainServiceGetOAuthMethodDescriptor            = keychainServiceServiceDescriptor.Methods().ByName("GetOAuth")
	keychainServiceSetUsernamePasswordMethodDescriptor = keychainServiceServiceDescriptor.Methods().ByName("SetUsernamePassword")
	keychainServiceGetUsernamePasswordMethodDescriptor = keychainServiceServiceDescriptor.Methods().ByName("GetUsernamePassword")
)

// KeychainServiceClient is a client for the vcassist.services.keychain.v1.KeychainService service.
type KeychainServiceClient interface {
	SetOAuth(context.Context, *connect.Request[v1.SetOAuthRequest]) (*connect.Response[v1.SetOAuthResponse], error)
	GetOAuth(context.Context, *connect.Request[v1.GetOAuthRequest]) (*connect.Response[v1.GetOAuthResponse], error)
	SetUsernamePassword(context.Context, *connect.Request[v1.SetUsernamePasswordRequest]) (*connect.Response[v1.SetUsernamePasswordResponse], error)
	GetUsernamePassword(context.Context, *connect.Request[v1.GetUsernamePasswordRequest]) (*connect.Response[v1.GetUsernamePasswordResponse], error)
}

// NewKeychainServiceClient constructs a client for the
// vcassist.services.keychain.v1.KeychainService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKeychainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KeychainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &keychainServiceClient{
		setOAuth: connect.NewClient[v1.SetOAuthRequest, v1.SetOAuthResponse](
			httpClient,
			baseURL+KeychainServiceSetOAuthProcedure,
			connect.WithSchema(keychainServiceSetOAuthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOAuth: connect.NewClient[v1.GetOAuthRequest, v1.GetOAuthResponse](
			httpClient,
			baseURL+KeychainServiceGetOAuthProcedure,
			connect.WithSchema(keychainServiceGetOAuthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setUsernamePassword: connect.NewClient[v1.SetUsernamePasswordRequest, v1.SetUsernamePasswordResponse](
			httpClient,
			baseURL+KeychainServiceSetUsernamePasswordProcedure,
			connect.WithSchema(keychainServiceSetUsernamePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUsernamePassword: connect.NewClient[v1.GetUsernamePasswordRequest, v1.GetUsernamePasswordResponse](
			httpClient,
			baseURL+KeychainServiceGetUsernamePasswordProcedure,
			connect.WithSchema(keychainServiceGetUsernamePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// keychainServiceClient implements KeychainServiceClient.
type keychainServiceClient struct {
	setOAuth            *connect.Client[v1.SetOAuthRequest, v1.SetOAuthResponse]
	getOAuth            *connect.Client[v1.GetOAuthRequest, v1.GetOAuthResponse]
	setUsernamePassword *connect.Client[v1.SetUsernamePasswordRequest, v1.SetUsernamePasswordResponse]
	getUsernamePassword *connect.Client[v1.GetUsernamePasswordRequest, v1.GetUsernamePasswordResponse]
}

// SetOAuth calls vcassist.services.keychain.v1.KeychainService.SetOAuth.
func (c *keychainServiceClient) SetOAuth(ctx context.Context, req *connect.Request[v1.SetOAuthRequest]) (*connect.Response[v1.SetOAuthResponse], error) {
	return c.setOAuth.CallUnary(ctx, req)
}

// GetOAuth calls vcassist.services.keychain.v1.KeychainService.GetOAuth.
func (c *keychainServiceClient) GetOAuth(ctx context.Context, req *connect.Request[v1.GetOAuthRequest]) (*connect.Response[v1.GetOAuthResponse], error) {
	return c.getOAuth.CallUnary(ctx, req)
}

// SetUsernamePassword calls vcassist.services.keychain.v1.KeychainService.SetUsernamePassword.
func (c *keychainServiceClient) SetUsernamePassword(ctx context.Context, req *connect.Request[v1.SetUsernamePasswordRequest]) (*connect.Response[v1.SetUsernamePasswordResponse], error) {
	return c.setUsernamePassword.CallUnary(ctx, req)
}

// GetUsernamePassword calls vcassist.services.keychain.v1.KeychainService.GetUsernamePassword.
func (c *keychainServiceClient) GetUsernamePassword(ctx context.Context, req *connect.Request[v1.GetUsernamePasswordRequest]) (*connect.Response[v1.GetUsernamePasswordResponse], error) {
	return c.getUsernamePassword.CallUnary(ctx, req)
}

// KeychainServiceHandler is an implementation of the vcassist.services.keychain.v1.KeychainService
// service.
type KeychainServiceHandler interface {
	SetOAuth(context.Context, *connect.Request[v1.SetOAuthRequest]) (*connect.Response[v1.SetOAuthResponse], error)
	GetOAuth(context.Context, *connect.Request[v1.GetOAuthRequest]) (*connect.Response[v1.GetOAuthResponse], error)
	SetUsernamePassword(context.Context, *connect.Request[v1.SetUsernamePasswordRequest]) (*connect.Response[v1.SetUsernamePasswordResponse], error)
	GetUsernamePassword(context.Context, *connect.Request[v1.GetUsernamePasswordRequest]) (*connect.Response[v1.GetUsernamePasswordResponse], error)
}

// NewKeychainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKeychainServiceHandler(svc KeychainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	keychainServiceSetOAuthHandler := connect.NewUnaryHandler(
		KeychainServiceSetOAuthProcedure,
		svc.SetOAuth,
		connect.WithSchema(keychainServiceSetOAuthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keychainServiceGetOAuthHandler := connect.NewUnaryHandler(
		KeychainServiceGetOAuthProcedure,
		svc.GetOAuth,
		connect.WithSchema(keychainServiceGetOAuthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keychainServiceSetUsernamePasswordHandler := connect.NewUnaryHandler(
		KeychainServiceSetUsernamePasswordProcedure,
		svc.SetUsernamePassword,
		connect.WithSchema(keychainServiceSetUsernamePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	keychainServiceGetUsernamePasswordHandler := connect.NewUnaryHandler(
		KeychainServiceGetUsernamePasswordProcedure,
		svc.GetUsernamePassword,
		connect.WithSchema(keychainServiceGetUsernamePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.services.keychain.v1.KeychainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KeychainServiceSetOAuthProcedure:
			keychainServiceSetOAuthHandler.ServeHTTP(w, r)
		case KeychainServiceGetOAuthProcedure:
			keychainServiceGetOAuthHandler.ServeHTTP(w, r)
		case KeychainServiceSetUsernamePasswordProcedure:
			keychainServiceSetUsernamePasswordHandler.ServeHTTP(w, r)
		case KeychainServiceGetUsernamePasswordProcedure:
			keychainServiceGetUsernamePasswordHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKeychainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKeychainServiceHandler struct{}

func (UnimplementedKeychainServiceHandler) SetOAuth(context.Context, *connect.Request[v1.SetOAuthRequest]) (*connect.Response[v1.SetOAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.keychain.v1.KeychainService.SetOAuth is not implemented"))
}

func (UnimplementedKeychainServiceHandler) GetOAuth(context.Context, *connect.Request[v1.GetOAuthRequest]) (*connect.Response[v1.GetOAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.keychain.v1.KeychainService.GetOAuth is not implemented"))
}

func (UnimplementedKeychainServiceHandler) SetUsernamePassword(context.Context, *connect.Request[v1.SetUsernamePasswordRequest]) (*connect.Response[v1.SetUsernamePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.keychain.v1.KeychainService.SetUsernamePassword is not implemented"))
}

func (UnimplementedKeychainServiceHandler) GetUsernamePassword(context.Context, *connect.Request[v1.GetUsernamePasswordRequest]) (*connect.Response[v1.GetUsernamePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.keychain.v1.KeychainService.GetUsernamePassword is not implemented"))
}
