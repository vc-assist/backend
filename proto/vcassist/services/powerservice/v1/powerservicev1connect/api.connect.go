// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/services/powerservice/v1/api.proto

package powerservicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/proto/vcassist/services/powerservice/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PowerschoolServiceName is the fully-qualified name of the PowerschoolService service.
	PowerschoolServiceName = "vcassist.services.powerservice.v1.PowerschoolService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PowerschoolServiceGetAuthStatusProcedure is the fully-qualified name of the PowerschoolService's
	// GetAuthStatus RPC.
	PowerschoolServiceGetAuthStatusProcedure = "/vcassist.services.powerservice.v1.PowerschoolService/GetAuthStatus"
	// PowerschoolServiceGetOAuthFlowProcedure is the fully-qualified name of the PowerschoolService's
	// GetOAuthFlow RPC.
	PowerschoolServiceGetOAuthFlowProcedure = "/vcassist.services.powerservice.v1.PowerschoolService/GetOAuthFlow"
	// PowerschoolServiceProvideOAuthProcedure is the fully-qualified name of the PowerschoolService's
	// ProvideOAuth RPC.
	PowerschoolServiceProvideOAuthProcedure = "/vcassist.services.powerservice.v1.PowerschoolService/ProvideOAuth"
	// PowerschoolServiceGetStudentDataProcedure is the fully-qualified name of the PowerschoolService's
	// GetStudentData RPC.
	PowerschoolServiceGetStudentDataProcedure = "/vcassist.services.powerservice.v1.PowerschoolService/GetStudentData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	powerschoolServiceServiceDescriptor              = v1.File_vcassist_services_powerservice_v1_api_proto.Services().ByName("PowerschoolService")
	powerschoolServiceGetAuthStatusMethodDescriptor  = powerschoolServiceServiceDescriptor.Methods().ByName("GetAuthStatus")
	powerschoolServiceGetOAuthFlowMethodDescriptor   = powerschoolServiceServiceDescriptor.Methods().ByName("GetOAuthFlow")
	powerschoolServiceProvideOAuthMethodDescriptor   = powerschoolServiceServiceDescriptor.Methods().ByName("ProvideOAuth")
	powerschoolServiceGetStudentDataMethodDescriptor = powerschoolServiceServiceDescriptor.Methods().ByName("GetStudentData")
)

// PowerschoolServiceClient is a client for the vcassist.services.powerservice.v1.PowerschoolService
// service.
type PowerschoolServiceClient interface {
	GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error)
	GetOAuthFlow(context.Context, *connect.Request[v1.GetOAuthFlowRequest]) (*connect.Response[v1.GetOAuthFlowResponse], error)
	ProvideOAuth(context.Context, *connect.Request[v1.ProvideOAuthRequest]) (*connect.Response[v1.ProvideOAuthResponse], error)
	GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error)
}

// NewPowerschoolServiceClient constructs a client for the
// vcassist.services.powerservice.v1.PowerschoolService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPowerschoolServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PowerschoolServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &powerschoolServiceClient{
		getAuthStatus: connect.NewClient[v1.GetAuthStatusRequest, v1.GetAuthStatusResponse](
			httpClient,
			baseURL+PowerschoolServiceGetAuthStatusProcedure,
			connect.WithSchema(powerschoolServiceGetAuthStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getOAuthFlow: connect.NewClient[v1.GetOAuthFlowRequest, v1.GetOAuthFlowResponse](
			httpClient,
			baseURL+PowerschoolServiceGetOAuthFlowProcedure,
			connect.WithSchema(powerschoolServiceGetOAuthFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		provideOAuth: connect.NewClient[v1.ProvideOAuthRequest, v1.ProvideOAuthResponse](
			httpClient,
			baseURL+PowerschoolServiceProvideOAuthProcedure,
			connect.WithSchema(powerschoolServiceProvideOAuthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStudentData: connect.NewClient[v1.GetStudentDataRequest, v1.GetStudentDataResponse](
			httpClient,
			baseURL+PowerschoolServiceGetStudentDataProcedure,
			connect.WithSchema(powerschoolServiceGetStudentDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// powerschoolServiceClient implements PowerschoolServiceClient.
type powerschoolServiceClient struct {
	getAuthStatus  *connect.Client[v1.GetAuthStatusRequest, v1.GetAuthStatusResponse]
	getOAuthFlow   *connect.Client[v1.GetOAuthFlowRequest, v1.GetOAuthFlowResponse]
	provideOAuth   *connect.Client[v1.ProvideOAuthRequest, v1.ProvideOAuthResponse]
	getStudentData *connect.Client[v1.GetStudentDataRequest, v1.GetStudentDataResponse]
}

// GetAuthStatus calls vcassist.services.powerservice.v1.PowerschoolService.GetAuthStatus.
func (c *powerschoolServiceClient) GetAuthStatus(ctx context.Context, req *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error) {
	return c.getAuthStatus.CallUnary(ctx, req)
}

// GetOAuthFlow calls vcassist.services.powerservice.v1.PowerschoolService.GetOAuthFlow.
func (c *powerschoolServiceClient) GetOAuthFlow(ctx context.Context, req *connect.Request[v1.GetOAuthFlowRequest]) (*connect.Response[v1.GetOAuthFlowResponse], error) {
	return c.getOAuthFlow.CallUnary(ctx, req)
}

// ProvideOAuth calls vcassist.services.powerservice.v1.PowerschoolService.ProvideOAuth.
func (c *powerschoolServiceClient) ProvideOAuth(ctx context.Context, req *connect.Request[v1.ProvideOAuthRequest]) (*connect.Response[v1.ProvideOAuthResponse], error) {
	return c.provideOAuth.CallUnary(ctx, req)
}

// GetStudentData calls vcassist.services.powerservice.v1.PowerschoolService.GetStudentData.
func (c *powerschoolServiceClient) GetStudentData(ctx context.Context, req *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error) {
	return c.getStudentData.CallUnary(ctx, req)
}

// PowerschoolServiceHandler is an implementation of the
// vcassist.services.powerservice.v1.PowerschoolService service.
type PowerschoolServiceHandler interface {
	GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error)
	GetOAuthFlow(context.Context, *connect.Request[v1.GetOAuthFlowRequest]) (*connect.Response[v1.GetOAuthFlowResponse], error)
	ProvideOAuth(context.Context, *connect.Request[v1.ProvideOAuthRequest]) (*connect.Response[v1.ProvideOAuthResponse], error)
	GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error)
}

// NewPowerschoolServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPowerschoolServiceHandler(svc PowerschoolServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	powerschoolServiceGetAuthStatusHandler := connect.NewUnaryHandler(
		PowerschoolServiceGetAuthStatusProcedure,
		svc.GetAuthStatus,
		connect.WithSchema(powerschoolServiceGetAuthStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	powerschoolServiceGetOAuthFlowHandler := connect.NewUnaryHandler(
		PowerschoolServiceGetOAuthFlowProcedure,
		svc.GetOAuthFlow,
		connect.WithSchema(powerschoolServiceGetOAuthFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	powerschoolServiceProvideOAuthHandler := connect.NewUnaryHandler(
		PowerschoolServiceProvideOAuthProcedure,
		svc.ProvideOAuth,
		connect.WithSchema(powerschoolServiceProvideOAuthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	powerschoolServiceGetStudentDataHandler := connect.NewUnaryHandler(
		PowerschoolServiceGetStudentDataProcedure,
		svc.GetStudentData,
		connect.WithSchema(powerschoolServiceGetStudentDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.services.powerservice.v1.PowerschoolService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PowerschoolServiceGetAuthStatusProcedure:
			powerschoolServiceGetAuthStatusHandler.ServeHTTP(w, r)
		case PowerschoolServiceGetOAuthFlowProcedure:
			powerschoolServiceGetOAuthFlowHandler.ServeHTTP(w, r)
		case PowerschoolServiceProvideOAuthProcedure:
			powerschoolServiceProvideOAuthHandler.ServeHTTP(w, r)
		case PowerschoolServiceGetStudentDataProcedure:
			powerschoolServiceGetStudentDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPowerschoolServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPowerschoolServiceHandler struct{}

func (UnimplementedPowerschoolServiceHandler) GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.powerservice.v1.PowerschoolService.GetAuthStatus is not implemented"))
}

func (UnimplementedPowerschoolServiceHandler) GetOAuthFlow(context.Context, *connect.Request[v1.GetOAuthFlowRequest]) (*connect.Response[v1.GetOAuthFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.powerservice.v1.PowerschoolService.GetOAuthFlow is not implemented"))
}

func (UnimplementedPowerschoolServiceHandler) ProvideOAuth(context.Context, *connect.Request[v1.ProvideOAuthRequest]) (*connect.Response[v1.ProvideOAuthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.powerservice.v1.PowerschoolService.ProvideOAuth is not implemented"))
}

func (UnimplementedPowerschoolServiceHandler) GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.powerservice.v1.PowerschoolService.GetStudentData is not implemented"))
}
