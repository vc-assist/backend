// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/services/studentdata/v1/api.proto

package studentdatav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/proto/vcassist/services/studentdata/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StudentDataServiceName is the fully-qualified name of the StudentDataService service.
	StudentDataServiceName = "vcassist.services.studentdata.v1.StudentDataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StudentDataServiceGetCredentialStatusProcedure is the fully-qualified name of the
	// StudentDataService's GetCredentialStatus RPC.
	StudentDataServiceGetCredentialStatusProcedure = "/vcassist.services.studentdata.v1.StudentDataService/GetCredentialStatus"
	// StudentDataServiceProvideCredentialProcedure is the fully-qualified name of the
	// StudentDataService's ProvideCredential RPC.
	StudentDataServiceProvideCredentialProcedure = "/vcassist.services.studentdata.v1.StudentDataService/ProvideCredential"
	// StudentDataServiceGetStudentDataProcedure is the fully-qualified name of the StudentDataService's
	// GetStudentData RPC.
	StudentDataServiceGetStudentDataProcedure = "/vcassist.services.studentdata.v1.StudentDataService/GetStudentData"
	// StudentDataServiceRefreshDataProcedure is the fully-qualified name of the StudentDataService's
	// RefreshData RPC.
	StudentDataServiceRefreshDataProcedure = "/vcassist.services.studentdata.v1.StudentDataService/RefreshData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	studentDataServiceServiceDescriptor                   = v1.File_vcassist_services_studentdata_v1_api_proto.Services().ByName("StudentDataService")
	studentDataServiceGetCredentialStatusMethodDescriptor = studentDataServiceServiceDescriptor.Methods().ByName("GetCredentialStatus")
	studentDataServiceProvideCredentialMethodDescriptor   = studentDataServiceServiceDescriptor.Methods().ByName("ProvideCredential")
	studentDataServiceGetStudentDataMethodDescriptor      = studentDataServiceServiceDescriptor.Methods().ByName("GetStudentData")
	studentDataServiceRefreshDataMethodDescriptor         = studentDataServiceServiceDescriptor.Methods().ByName("RefreshData")
)

// StudentDataServiceClient is a client for the vcassist.services.studentdata.v1.StudentDataService
// service.
type StudentDataServiceClient interface {
	GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error)
	ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error)
	GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error)
	RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error)
}

// NewStudentDataServiceClient constructs a client for the
// vcassist.services.studentdata.v1.StudentDataService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStudentDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StudentDataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &studentDataServiceClient{
		getCredentialStatus: connect.NewClient[v1.GetCredentialStatusRequest, v1.GetCredentialStatusResponse](
			httpClient,
			baseURL+StudentDataServiceGetCredentialStatusProcedure,
			connect.WithSchema(studentDataServiceGetCredentialStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		provideCredential: connect.NewClient[v1.ProvideCredentialRequest, v1.ProvideCredentialResponse](
			httpClient,
			baseURL+StudentDataServiceProvideCredentialProcedure,
			connect.WithSchema(studentDataServiceProvideCredentialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStudentData: connect.NewClient[v1.GetStudentDataRequest, v1.GetStudentDataResponse](
			httpClient,
			baseURL+StudentDataServiceGetStudentDataProcedure,
			connect.WithSchema(studentDataServiceGetStudentDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshData: connect.NewClient[v1.RefreshDataRequest, v1.RefreshDataResponse](
			httpClient,
			baseURL+StudentDataServiceRefreshDataProcedure,
			connect.WithSchema(studentDataServiceRefreshDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// studentDataServiceClient implements StudentDataServiceClient.
type studentDataServiceClient struct {
	getCredentialStatus *connect.Client[v1.GetCredentialStatusRequest, v1.GetCredentialStatusResponse]
	provideCredential   *connect.Client[v1.ProvideCredentialRequest, v1.ProvideCredentialResponse]
	getStudentData      *connect.Client[v1.GetStudentDataRequest, v1.GetStudentDataResponse]
	refreshData         *connect.Client[v1.RefreshDataRequest, v1.RefreshDataResponse]
}

// GetCredentialStatus calls
// vcassist.services.studentdata.v1.StudentDataService.GetCredentialStatus.
func (c *studentDataServiceClient) GetCredentialStatus(ctx context.Context, req *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error) {
	return c.getCredentialStatus.CallUnary(ctx, req)
}

// ProvideCredential calls vcassist.services.studentdata.v1.StudentDataService.ProvideCredential.
func (c *studentDataServiceClient) ProvideCredential(ctx context.Context, req *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error) {
	return c.provideCredential.CallUnary(ctx, req)
}

// GetStudentData calls vcassist.services.studentdata.v1.StudentDataService.GetStudentData.
func (c *studentDataServiceClient) GetStudentData(ctx context.Context, req *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error) {
	return c.getStudentData.CallUnary(ctx, req)
}

// RefreshData calls vcassist.services.studentdata.v1.StudentDataService.RefreshData.
func (c *studentDataServiceClient) RefreshData(ctx context.Context, req *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error) {
	return c.refreshData.CallUnary(ctx, req)
}

// StudentDataServiceHandler is an implementation of the
// vcassist.services.studentdata.v1.StudentDataService service.
type StudentDataServiceHandler interface {
	GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error)
	ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error)
	GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error)
	RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error)
}

// NewStudentDataServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStudentDataServiceHandler(svc StudentDataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	studentDataServiceGetCredentialStatusHandler := connect.NewUnaryHandler(
		StudentDataServiceGetCredentialStatusProcedure,
		svc.GetCredentialStatus,
		connect.WithSchema(studentDataServiceGetCredentialStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentDataServiceProvideCredentialHandler := connect.NewUnaryHandler(
		StudentDataServiceProvideCredentialProcedure,
		svc.ProvideCredential,
		connect.WithSchema(studentDataServiceProvideCredentialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentDataServiceGetStudentDataHandler := connect.NewUnaryHandler(
		StudentDataServiceGetStudentDataProcedure,
		svc.GetStudentData,
		connect.WithSchema(studentDataServiceGetStudentDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	studentDataServiceRefreshDataHandler := connect.NewUnaryHandler(
		StudentDataServiceRefreshDataProcedure,
		svc.RefreshData,
		connect.WithSchema(studentDataServiceRefreshDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.services.studentdata.v1.StudentDataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StudentDataServiceGetCredentialStatusProcedure:
			studentDataServiceGetCredentialStatusHandler.ServeHTTP(w, r)
		case StudentDataServiceProvideCredentialProcedure:
			studentDataServiceProvideCredentialHandler.ServeHTTP(w, r)
		case StudentDataServiceGetStudentDataProcedure:
			studentDataServiceGetStudentDataHandler.ServeHTTP(w, r)
		case StudentDataServiceRefreshDataProcedure:
			studentDataServiceRefreshDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStudentDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStudentDataServiceHandler struct{}

func (UnimplementedStudentDataServiceHandler) GetCredentialStatus(context.Context, *connect.Request[v1.GetCredentialStatusRequest]) (*connect.Response[v1.GetCredentialStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.studentdata.v1.StudentDataService.GetCredentialStatus is not implemented"))
}

func (UnimplementedStudentDataServiceHandler) ProvideCredential(context.Context, *connect.Request[v1.ProvideCredentialRequest]) (*connect.Response[v1.ProvideCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.studentdata.v1.StudentDataService.ProvideCredential is not implemented"))
}

func (UnimplementedStudentDataServiceHandler) GetStudentData(context.Context, *connect.Request[v1.GetStudentDataRequest]) (*connect.Response[v1.GetStudentDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.studentdata.v1.StudentDataService.GetStudentData is not implemented"))
}

func (UnimplementedStudentDataServiceHandler) RefreshData(context.Context, *connect.Request[v1.RefreshDataRequest]) (*connect.Response[v1.RefreshDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.studentdata.v1.StudentDataService.RefreshData is not implemented"))
}
