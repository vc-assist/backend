// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/auth/v1/api.proto (package vcassist.services.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message vcassist.services.auth.v1.StartLoginRequest
 */
export class StartLoginRequest extends Message<StartLoginRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<StartLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.StartLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartLoginRequest {
    return new StartLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartLoginRequest {
    return new StartLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartLoginRequest {
    return new StartLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartLoginRequest | PlainMessage<StartLoginRequest> | undefined, b: StartLoginRequest | PlainMessage<StartLoginRequest> | undefined): boolean {
    return proto3.util.equals(StartLoginRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.auth.v1.StartLoginResponse
 */
export class StartLoginResponse extends Message<StartLoginResponse> {
  constructor(data?: PartialMessage<StartLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.StartLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartLoginResponse {
    return new StartLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartLoginResponse {
    return new StartLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartLoginResponse {
    return new StartLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartLoginResponse | PlainMessage<StartLoginResponse> | undefined, b: StartLoginResponse | PlainMessage<StartLoginResponse> | undefined): boolean {
    return proto3.util.equals(StartLoginResponse, a, b);
  }
}

/**
 * @generated from message vcassist.services.auth.v1.ConsumeVerificationCodeRequest
 */
export class ConsumeVerificationCodeRequest extends Message<ConsumeVerificationCodeRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string provided_code = 2;
   */
  providedCode = "";

  constructor(data?: PartialMessage<ConsumeVerificationCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.ConsumeVerificationCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "provided_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsumeVerificationCodeRequest {
    return new ConsumeVerificationCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsumeVerificationCodeRequest {
    return new ConsumeVerificationCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsumeVerificationCodeRequest {
    return new ConsumeVerificationCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConsumeVerificationCodeRequest | PlainMessage<ConsumeVerificationCodeRequest> | undefined, b: ConsumeVerificationCodeRequest | PlainMessage<ConsumeVerificationCodeRequest> | undefined): boolean {
    return proto3.util.equals(ConsumeVerificationCodeRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.auth.v1.ConsumeVerificationCodeResponse
 */
export class ConsumeVerificationCodeResponse extends Message<ConsumeVerificationCodeResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ConsumeVerificationCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.ConsumeVerificationCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsumeVerificationCodeResponse {
    return new ConsumeVerificationCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsumeVerificationCodeResponse {
    return new ConsumeVerificationCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsumeVerificationCodeResponse {
    return new ConsumeVerificationCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConsumeVerificationCodeResponse | PlainMessage<ConsumeVerificationCodeResponse> | undefined, b: ConsumeVerificationCodeResponse | PlainMessage<ConsumeVerificationCodeResponse> | undefined): boolean {
    return proto3.util.equals(ConsumeVerificationCodeResponse, a, b);
  }
}

/**
 * @generated from message vcassist.services.auth.v1.VerifyTokenRequest
 */
export class VerifyTokenRequest extends Message<VerifyTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<VerifyTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.VerifyTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTokenRequest | PlainMessage<VerifyTokenRequest> | undefined, b: VerifyTokenRequest | PlainMessage<VerifyTokenRequest> | undefined): boolean {
    return proto3.util.equals(VerifyTokenRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.auth.v1.VerifyTokenResponse
 */
export class VerifyTokenResponse extends Message<VerifyTokenResponse> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<VerifyTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.auth.v1.VerifyTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTokenResponse | PlainMessage<VerifyTokenResponse> | undefined, b: VerifyTokenResponse | PlainMessage<VerifyTokenResponse> | undefined): boolean {
    return proto3.util.equals(VerifyTokenResponse, a, b);
  }
}

