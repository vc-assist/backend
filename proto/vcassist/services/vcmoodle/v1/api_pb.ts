// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file vcassist/services/vcmoodle/v1/api.proto (package vcassist.services.vcmoodle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GetCourses
 *
 * @generated from enum vcassist.services.vcmoodle.v1.ResourceType
 */
export enum ResourceType {
  /**
   * @generated from enum value: GENERIC_URL = 0;
   */
  GENERIC_URL = 0,

  /**
   * @generated from enum value: BOOK = 1;
   */
  BOOK = 1,

  /**
   * @generated from enum value: HTML_AREA = 2;
   */
  HTML_AREA = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceType)
proto3.util.setEnumType(ResourceType, "vcassist.services.vcmoodle.v1.ResourceType", [
  { no: 0, name: "GENERIC_URL" },
  { no: 1, name: "BOOK" },
  { no: 2, name: "HTML_AREA" },
]);

/**
 * GetAuthStatus
 *
 * @generated from message vcassist.services.vcmoodle.v1.GetAuthStatusRequest
 */
export class GetAuthStatusRequest extends Message<GetAuthStatusRequest> {
  constructor(data?: PartialMessage<GetAuthStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetAuthStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthStatusRequest {
    return new GetAuthStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthStatusRequest | PlainMessage<GetAuthStatusRequest> | undefined, b: GetAuthStatusRequest | PlainMessage<GetAuthStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthStatusRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.GetAuthStatusResponse
 */
export class GetAuthStatusResponse extends Message<GetAuthStatusResponse> {
  /**
   * @generated from field: bool provided = 1;
   */
  provided = false;

  constructor(data?: PartialMessage<GetAuthStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetAuthStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provided", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthStatusResponse {
    return new GetAuthStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthStatusResponse | PlainMessage<GetAuthStatusResponse> | undefined, b: GetAuthStatusResponse | PlainMessage<GetAuthStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthStatusResponse, a, b);
  }
}

/**
 * ProvideUsernamePassword
 *
 * @generated from message vcassist.services.vcmoodle.v1.ProvideUsernamePasswordRequest
 */
export class ProvideUsernamePasswordRequest extends Message<ProvideUsernamePasswordRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<ProvideUsernamePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.ProvideUsernamePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordRequest {
    return new ProvideUsernamePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideUsernamePasswordRequest | PlainMessage<ProvideUsernamePasswordRequest> | undefined, b: ProvideUsernamePasswordRequest | PlainMessage<ProvideUsernamePasswordRequest> | undefined): boolean {
    return proto3.util.equals(ProvideUsernamePasswordRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.ProvideUsernamePasswordResponse
 */
export class ProvideUsernamePasswordResponse extends Message<ProvideUsernamePasswordResponse> {
  constructor(data?: PartialMessage<ProvideUsernamePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.ProvideUsernamePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProvideUsernamePasswordResponse {
    return new ProvideUsernamePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProvideUsernamePasswordResponse | PlainMessage<ProvideUsernamePasswordResponse> | undefined, b: ProvideUsernamePasswordResponse | PlainMessage<ProvideUsernamePasswordResponse> | undefined): boolean {
    return proto3.util.equals(ProvideUsernamePasswordResponse, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.Chapter
 */
export class Chapter extends Message<Chapter> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * if this field is not null, the html in this field will be displayed
   * on the home page as "today's lesson plan" for the course it belongs to
   *
   * @generated from field: string homepage_content = 3;
   */
  homepageContent = "";

  constructor(data?: PartialMessage<Chapter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.Chapter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "homepage_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chapter {
    return new Chapter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chapter {
    return new Chapter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chapter {
    return new Chapter().fromJsonString(jsonString, options);
  }

  static equals(a: Chapter | PlainMessage<Chapter> | undefined, b: Chapter | PlainMessage<Chapter> | undefined): boolean {
    return proto3.util.equals(Chapter, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: int64 idx = 1;
   */
  idx = protoInt64.zero;

  /**
   * @generated from field: vcassist.services.vcmoodle.v1.ResourceType type = 2;
   */
  type = ResourceType.GENERIC_URL;

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string display_content = 4;
   */
  displayContent = "";

  /**
   * this will be null for resources that are not BOOK
   *
   * @generated from field: repeated vcassist.services.vcmoodle.v1.Chapter chapters = 5;
   */
  chapters: Chapter[] = [];

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idx", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ResourceType) },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "chapters", kind: "message", T: Chapter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.Section
 */
export class Section extends Message<Section> {
  /**
   * @generated from field: int64 idx = 1;
   */
  idx = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: repeated vcassist.services.vcmoodle.v1.Resource resources = 4;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<Section>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.Section";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "idx", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Section {
    return new Section().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Section {
    return new Section().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Section {
    return new Section().fromJsonString(jsonString, options);
  }

  static equals(a: Section | PlainMessage<Section> | undefined, b: Section | PlainMessage<Section> | undefined): boolean {
    return proto3.util.equals(Section, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.Course
 */
export class Course extends Message<Course> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string teacher = 3;
   */
  teacher = "";

  /**
   * @generated from field: string url = 4;
   */
  url = "";

  /**
   * @generated from field: repeated vcassist.services.vcmoodle.v1.Section sections = 5;
   */
  sections: Section[] = [];

  constructor(data?: PartialMessage<Course>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.Course";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "teacher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sections", kind: "message", T: Section, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Course {
    return new Course().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Course {
    return new Course().fromJsonString(jsonString, options);
  }

  static equals(a: Course | PlainMessage<Course> | undefined, b: Course | PlainMessage<Course> | undefined): boolean {
    return proto3.util.equals(Course, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.GetCoursesRequest
 */
export class GetCoursesRequest extends Message<GetCoursesRequest> {
  constructor(data?: PartialMessage<GetCoursesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetCoursesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCoursesRequest {
    return new GetCoursesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCoursesRequest {
    return new GetCoursesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCoursesRequest {
    return new GetCoursesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCoursesRequest | PlainMessage<GetCoursesRequest> | undefined, b: GetCoursesRequest | PlainMessage<GetCoursesRequest> | undefined): boolean {
    return proto3.util.equals(GetCoursesRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.GetCoursesResponse
 */
export class GetCoursesResponse extends Message<GetCoursesResponse> {
  /**
   * @generated from field: repeated vcassist.services.vcmoodle.v1.Course courses = 1;
   */
  courses: Course[] = [];

  constructor(data?: PartialMessage<GetCoursesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetCoursesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCoursesResponse {
    return new GetCoursesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCoursesResponse {
    return new GetCoursesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCoursesResponse {
    return new GetCoursesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCoursesResponse | PlainMessage<GetCoursesResponse> | undefined, b: GetCoursesResponse | PlainMessage<GetCoursesResponse> | undefined): boolean {
    return proto3.util.equals(GetCoursesResponse, a, b);
  }
}

/**
 * GetChapterContent
 *
 * @generated from message vcassist.services.vcmoodle.v1.GetChapterContentRequest
 */
export class GetChapterContentRequest extends Message<GetChapterContentRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetChapterContentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetChapterContentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChapterContentRequest {
    return new GetChapterContentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChapterContentRequest {
    return new GetChapterContentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChapterContentRequest {
    return new GetChapterContentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChapterContentRequest | PlainMessage<GetChapterContentRequest> | undefined, b: GetChapterContentRequest | PlainMessage<GetChapterContentRequest> | undefined): boolean {
    return proto3.util.equals(GetChapterContentRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.GetChapterContentResponse
 */
export class GetChapterContentResponse extends Message<GetChapterContentResponse> {
  /**
   * @generated from field: string html = 1;
   */
  html = "";

  constructor(data?: PartialMessage<GetChapterContentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.GetChapterContentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "html", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChapterContentResponse {
    return new GetChapterContentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChapterContentResponse {
    return new GetChapterContentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChapterContentResponse {
    return new GetChapterContentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChapterContentResponse | PlainMessage<GetChapterContentResponse> | undefined, b: GetChapterContentResponse | PlainMessage<GetChapterContentResponse> | undefined): boolean {
    return proto3.util.equals(GetChapterContentResponse, a, b);
  }
}

/**
 * RefreshCourses
 *
 * @generated from message vcassist.services.vcmoodle.v1.RefreshCoursesRequest
 */
export class RefreshCoursesRequest extends Message<RefreshCoursesRequest> {
  constructor(data?: PartialMessage<RefreshCoursesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.RefreshCoursesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshCoursesRequest {
    return new RefreshCoursesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshCoursesRequest {
    return new RefreshCoursesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshCoursesRequest {
    return new RefreshCoursesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshCoursesRequest | PlainMessage<RefreshCoursesRequest> | undefined, b: RefreshCoursesRequest | PlainMessage<RefreshCoursesRequest> | undefined): boolean {
    return proto3.util.equals(RefreshCoursesRequest, a, b);
  }
}

/**
 * @generated from message vcassist.services.vcmoodle.v1.RefreshCoursesResponse
 */
export class RefreshCoursesResponse extends Message<RefreshCoursesResponse> {
  /**
   * @generated from field: repeated vcassist.services.vcmoodle.v1.Course courses = 1;
   */
  courses: Course[] = [];

  constructor(data?: PartialMessage<RefreshCoursesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "vcassist.services.vcmoodle.v1.RefreshCoursesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "courses", kind: "message", T: Course, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshCoursesResponse {
    return new RefreshCoursesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshCoursesResponse {
    return new RefreshCoursesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshCoursesResponse {
    return new RefreshCoursesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshCoursesResponse | PlainMessage<RefreshCoursesResponse> | undefined, b: RefreshCoursesResponse | PlainMessage<RefreshCoursesResponse> | undefined): boolean {
    return proto3.util.equals(RefreshCoursesResponse, a, b);
  }
}

