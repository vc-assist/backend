// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vcassist/services/vcmoodle/v1/api.proto

package vcmoodlev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "vcassist-backend/proto/vcassist/services/vcmoodle/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MoodleServiceName is the fully-qualified name of the MoodleService service.
	MoodleServiceName = "vcassist.services.vcmoodle.v1.MoodleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MoodleServiceGetAuthStatusProcedure is the fully-qualified name of the MoodleService's
	// GetAuthStatus RPC.
	MoodleServiceGetAuthStatusProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/GetAuthStatus"
	// MoodleServiceProvideUsernamePasswordProcedure is the fully-qualified name of the MoodleService's
	// ProvideUsernamePassword RPC.
	MoodleServiceProvideUsernamePasswordProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/ProvideUsernamePassword"
	// MoodleServiceGetCoursesProcedure is the fully-qualified name of the MoodleService's GetCourses
	// RPC.
	MoodleServiceGetCoursesProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/GetCourses"
	// MoodleServiceRefreshCoursesProcedure is the fully-qualified name of the MoodleService's
	// RefreshCourses RPC.
	MoodleServiceRefreshCoursesProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/RefreshCourses"
	// MoodleServiceGetChapterContentProcedure is the fully-qualified name of the MoodleService's
	// GetChapterContent RPC.
	MoodleServiceGetChapterContentProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/GetChapterContent"
	// MoodleServiceGetFileContentProcedure is the fully-qualified name of the MoodleService's
	// GetFileContent RPC.
	MoodleServiceGetFileContentProcedure = "/vcassist.services.vcmoodle.v1.MoodleService/GetFileContent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	moodleServiceServiceDescriptor                       = v1.File_vcassist_services_vcmoodle_v1_api_proto.Services().ByName("MoodleService")
	moodleServiceGetAuthStatusMethodDescriptor           = moodleServiceServiceDescriptor.Methods().ByName("GetAuthStatus")
	moodleServiceProvideUsernamePasswordMethodDescriptor = moodleServiceServiceDescriptor.Methods().ByName("ProvideUsernamePassword")
	moodleServiceGetCoursesMethodDescriptor              = moodleServiceServiceDescriptor.Methods().ByName("GetCourses")
	moodleServiceRefreshCoursesMethodDescriptor          = moodleServiceServiceDescriptor.Methods().ByName("RefreshCourses")
	moodleServiceGetChapterContentMethodDescriptor       = moodleServiceServiceDescriptor.Methods().ByName("GetChapterContent")
	moodleServiceGetFileContentMethodDescriptor          = moodleServiceServiceDescriptor.Methods().ByName("GetFileContent")
)

// MoodleServiceClient is a client for the vcassist.services.vcmoodle.v1.MoodleService service.
type MoodleServiceClient interface {
	GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error)
	ProvideUsernamePassword(context.Context, *connect.Request[v1.ProvideUsernamePasswordRequest]) (*connect.Response[v1.ProvideUsernamePasswordResponse], error)
	GetCourses(context.Context, *connect.Request[v1.GetCoursesRequest]) (*connect.Response[v1.GetCoursesResponse], error)
	RefreshCourses(context.Context, *connect.Request[v1.RefreshCoursesRequest]) (*connect.Response[v1.RefreshCoursesResponse], error)
	GetChapterContent(context.Context, *connect.Request[v1.GetChapterContentRequest]) (*connect.Response[v1.GetChapterContentResponse], error)
	GetFileContent(context.Context, *connect.Request[v1.GetFileContentRequest]) (*connect.Response[v1.GetFileContentResponse], error)
}

// NewMoodleServiceClient constructs a client for the vcassist.services.vcmoodle.v1.MoodleService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMoodleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MoodleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moodleServiceClient{
		getAuthStatus: connect.NewClient[v1.GetAuthStatusRequest, v1.GetAuthStatusResponse](
			httpClient,
			baseURL+MoodleServiceGetAuthStatusProcedure,
			connect.WithSchema(moodleServiceGetAuthStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		provideUsernamePassword: connect.NewClient[v1.ProvideUsernamePasswordRequest, v1.ProvideUsernamePasswordResponse](
			httpClient,
			baseURL+MoodleServiceProvideUsernamePasswordProcedure,
			connect.WithSchema(moodleServiceProvideUsernamePasswordMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCourses: connect.NewClient[v1.GetCoursesRequest, v1.GetCoursesResponse](
			httpClient,
			baseURL+MoodleServiceGetCoursesProcedure,
			connect.WithSchema(moodleServiceGetCoursesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshCourses: connect.NewClient[v1.RefreshCoursesRequest, v1.RefreshCoursesResponse](
			httpClient,
			baseURL+MoodleServiceRefreshCoursesProcedure,
			connect.WithSchema(moodleServiceRefreshCoursesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChapterContent: connect.NewClient[v1.GetChapterContentRequest, v1.GetChapterContentResponse](
			httpClient,
			baseURL+MoodleServiceGetChapterContentProcedure,
			connect.WithSchema(moodleServiceGetChapterContentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFileContent: connect.NewClient[v1.GetFileContentRequest, v1.GetFileContentResponse](
			httpClient,
			baseURL+MoodleServiceGetFileContentProcedure,
			connect.WithSchema(moodleServiceGetFileContentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// moodleServiceClient implements MoodleServiceClient.
type moodleServiceClient struct {
	getAuthStatus           *connect.Client[v1.GetAuthStatusRequest, v1.GetAuthStatusResponse]
	provideUsernamePassword *connect.Client[v1.ProvideUsernamePasswordRequest, v1.ProvideUsernamePasswordResponse]
	getCourses              *connect.Client[v1.GetCoursesRequest, v1.GetCoursesResponse]
	refreshCourses          *connect.Client[v1.RefreshCoursesRequest, v1.RefreshCoursesResponse]
	getChapterContent       *connect.Client[v1.GetChapterContentRequest, v1.GetChapterContentResponse]
	getFileContent          *connect.Client[v1.GetFileContentRequest, v1.GetFileContentResponse]
}

// GetAuthStatus calls vcassist.services.vcmoodle.v1.MoodleService.GetAuthStatus.
func (c *moodleServiceClient) GetAuthStatus(ctx context.Context, req *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error) {
	return c.getAuthStatus.CallUnary(ctx, req)
}

// ProvideUsernamePassword calls
// vcassist.services.vcmoodle.v1.MoodleService.ProvideUsernamePassword.
func (c *moodleServiceClient) ProvideUsernamePassword(ctx context.Context, req *connect.Request[v1.ProvideUsernamePasswordRequest]) (*connect.Response[v1.ProvideUsernamePasswordResponse], error) {
	return c.provideUsernamePassword.CallUnary(ctx, req)
}

// GetCourses calls vcassist.services.vcmoodle.v1.MoodleService.GetCourses.
func (c *moodleServiceClient) GetCourses(ctx context.Context, req *connect.Request[v1.GetCoursesRequest]) (*connect.Response[v1.GetCoursesResponse], error) {
	return c.getCourses.CallUnary(ctx, req)
}

// RefreshCourses calls vcassist.services.vcmoodle.v1.MoodleService.RefreshCourses.
func (c *moodleServiceClient) RefreshCourses(ctx context.Context, req *connect.Request[v1.RefreshCoursesRequest]) (*connect.Response[v1.RefreshCoursesResponse], error) {
	return c.refreshCourses.CallUnary(ctx, req)
}

// GetChapterContent calls vcassist.services.vcmoodle.v1.MoodleService.GetChapterContent.
func (c *moodleServiceClient) GetChapterContent(ctx context.Context, req *connect.Request[v1.GetChapterContentRequest]) (*connect.Response[v1.GetChapterContentResponse], error) {
	return c.getChapterContent.CallUnary(ctx, req)
}

// GetFileContent calls vcassist.services.vcmoodle.v1.MoodleService.GetFileContent.
func (c *moodleServiceClient) GetFileContent(ctx context.Context, req *connect.Request[v1.GetFileContentRequest]) (*connect.Response[v1.GetFileContentResponse], error) {
	return c.getFileContent.CallUnary(ctx, req)
}

// MoodleServiceHandler is an implementation of the vcassist.services.vcmoodle.v1.MoodleService
// service.
type MoodleServiceHandler interface {
	GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error)
	ProvideUsernamePassword(context.Context, *connect.Request[v1.ProvideUsernamePasswordRequest]) (*connect.Response[v1.ProvideUsernamePasswordResponse], error)
	GetCourses(context.Context, *connect.Request[v1.GetCoursesRequest]) (*connect.Response[v1.GetCoursesResponse], error)
	RefreshCourses(context.Context, *connect.Request[v1.RefreshCoursesRequest]) (*connect.Response[v1.RefreshCoursesResponse], error)
	GetChapterContent(context.Context, *connect.Request[v1.GetChapterContentRequest]) (*connect.Response[v1.GetChapterContentResponse], error)
	GetFileContent(context.Context, *connect.Request[v1.GetFileContentRequest]) (*connect.Response[v1.GetFileContentResponse], error)
}

// NewMoodleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMoodleServiceHandler(svc MoodleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	moodleServiceGetAuthStatusHandler := connect.NewUnaryHandler(
		MoodleServiceGetAuthStatusProcedure,
		svc.GetAuthStatus,
		connect.WithSchema(moodleServiceGetAuthStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceProvideUsernamePasswordHandler := connect.NewUnaryHandler(
		MoodleServiceProvideUsernamePasswordProcedure,
		svc.ProvideUsernamePassword,
		connect.WithSchema(moodleServiceProvideUsernamePasswordMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceGetCoursesHandler := connect.NewUnaryHandler(
		MoodleServiceGetCoursesProcedure,
		svc.GetCourses,
		connect.WithSchema(moodleServiceGetCoursesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceRefreshCoursesHandler := connect.NewUnaryHandler(
		MoodleServiceRefreshCoursesProcedure,
		svc.RefreshCourses,
		connect.WithSchema(moodleServiceRefreshCoursesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceGetChapterContentHandler := connect.NewUnaryHandler(
		MoodleServiceGetChapterContentProcedure,
		svc.GetChapterContent,
		connect.WithSchema(moodleServiceGetChapterContentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	moodleServiceGetFileContentHandler := connect.NewUnaryHandler(
		MoodleServiceGetFileContentProcedure,
		svc.GetFileContent,
		connect.WithSchema(moodleServiceGetFileContentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vcassist.services.vcmoodle.v1.MoodleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MoodleServiceGetAuthStatusProcedure:
			moodleServiceGetAuthStatusHandler.ServeHTTP(w, r)
		case MoodleServiceProvideUsernamePasswordProcedure:
			moodleServiceProvideUsernamePasswordHandler.ServeHTTP(w, r)
		case MoodleServiceGetCoursesProcedure:
			moodleServiceGetCoursesHandler.ServeHTTP(w, r)
		case MoodleServiceRefreshCoursesProcedure:
			moodleServiceRefreshCoursesHandler.ServeHTTP(w, r)
		case MoodleServiceGetChapterContentProcedure:
			moodleServiceGetChapterContentHandler.ServeHTTP(w, r)
		case MoodleServiceGetFileContentProcedure:
			moodleServiceGetFileContentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMoodleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMoodleServiceHandler struct{}

func (UnimplementedMoodleServiceHandler) GetAuthStatus(context.Context, *connect.Request[v1.GetAuthStatusRequest]) (*connect.Response[v1.GetAuthStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.GetAuthStatus is not implemented"))
}

func (UnimplementedMoodleServiceHandler) ProvideUsernamePassword(context.Context, *connect.Request[v1.ProvideUsernamePasswordRequest]) (*connect.Response[v1.ProvideUsernamePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.ProvideUsernamePassword is not implemented"))
}

func (UnimplementedMoodleServiceHandler) GetCourses(context.Context, *connect.Request[v1.GetCoursesRequest]) (*connect.Response[v1.GetCoursesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.GetCourses is not implemented"))
}

func (UnimplementedMoodleServiceHandler) RefreshCourses(context.Context, *connect.Request[v1.RefreshCoursesRequest]) (*connect.Response[v1.RefreshCoursesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.RefreshCourses is not implemented"))
}

func (UnimplementedMoodleServiceHandler) GetChapterContent(context.Context, *connect.Request[v1.GetChapterContentRequest]) (*connect.Response[v1.GetChapterContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.GetChapterContent is not implemented"))
}

func (UnimplementedMoodleServiceHandler) GetFileContent(context.Context, *connect.Request[v1.GetFileContentRequest]) (*connect.Response[v1.GetFileContentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vcassist.services.vcmoodle.v1.MoodleService.GetFileContent is not implemented"))
}
